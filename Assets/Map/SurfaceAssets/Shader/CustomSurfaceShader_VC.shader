Shader "Custom/SurfaceShader_VC" {
	Properties {
		_Color ("Color", Vector) = (1,1,1,1)
		_MainTex ("Albedo (RGB)", 2D) = "white" {}
		_Normal ("Normap Map", 2D) = "bump" {}
	}
	SubShader {
		LOD 200
		Tags { "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Name "FORWARD"
			LOD 200
			Tags { "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 8192
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	vec4 unity_SpecCube1_HDR;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat13;
					vec3 u_xlat14;
					float u_xlat25;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat4 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat4.z = sqrt(u_xlat37);
					    SV_Target0.w = u_xlat3.w * vs_COLOR0.w;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat37 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat4.xyz = vec3(u_xlat37) * u_xlat5.xyz;
					    u_xlat37 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat37)) + (-u_xlat2.xyz);
					    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb37){
					        u_xlat37 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat37 = inversesqrt(u_xlat37);
					        u_xlat6.xyz = vec3(u_xlat37) * u_xlat5.xyz;
					        u_xlat7.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat37 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat37 = min(u_xlat7.z, u_xlat37);
					        u_xlat7.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat5.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat37 = u_xlat6.w + -1.0;
					    u_xlat37 = unity_SpecCube0_HDR.w * u_xlat37 + 1.0;
					    u_xlat37 = log2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat8.xyz = vec3(u_xlat38) * u_xlat5.xyz;
					            u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat38 = min(u_xlat9.z, u_xlat38);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat38) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, 6.0);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat6.xyz + (-u_xlat0.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat36 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat37 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat13.x = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat13.x = u_xlat13.x + -0.5;
					    u_xlat25 = (-u_xlat37) + 1.0;
					    u_xlat2.x = u_xlat25 * u_xlat25;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat25 = u_xlat25 * u_xlat2.x;
					    u_xlat25 = u_xlat13.x * u_xlat25 + 1.0;
					    u_xlat2.x = -abs(u_xlat36) + 1.0;
					    u_xlat14.x = u_xlat2.x * u_xlat2.x;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat2.x = u_xlat2.x * u_xlat14.x;
					    u_xlat13.x = u_xlat13.x * u_xlat2.x + 1.0;
					    u_xlat13.x = u_xlat13.x * u_xlat25;
					    u_xlat13.x = u_xlat37 * u_xlat13.x;
					    u_xlat36 = abs(u_xlat36) + u_xlat37;
					    u_xlat36 = u_xlat36 + 9.99999975e-06;
					    u_xlat36 = 0.5 / u_xlat36;
					    u_xlat36 = u_xlat36 * 0.999999881;
					    u_xlat36 = u_xlat37 * u_xlat36;
					    u_xlat13.xyz = u_xlat13.xxx * _LightColor0.xyz;
					    u_xlat14.xyz = vec3(u_xlat36) * _LightColor0.xyz;
					    u_xlat36 = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat36 * 0.959999979 + 0.0399999991;
					    u_xlat14.xyz = vec3(u_xlat36) * u_xlat14.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat13.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat36 = u_xlat2.x * 2.23517418e-08 + 0.0399999991;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 279
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %86 %98 %99 %111 %120 %157 %241 %245 %267 %268 %270 %273 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD8 "vs_TEXCOORD8" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpMemberDecorate %19 4 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpMemberDecorate %84 0 BuiltIn 84 
					                                                      OpMemberDecorate %84 1 BuiltIn 84 
					                                                      OpMemberDecorate %84 2 BuiltIn 84 
					                                                      OpDecorate %84 Block 
					                                                      OpDecorate vs_TEXCOORD0 Location 98 
					                                                      OpDecorate %99 Location 99 
					                                                      OpDecorate vs_TEXCOORD1 Location 111 
					                                                      OpDecorate %120 Location 120 
					                                                      OpDecorate %157 Location 157 
					                                                      OpDecorate vs_TEXCOORD2 Location 241 
					                                                      OpDecorate vs_TEXCOORD3 Location 245 
					                                                      OpDecorate %267 Location 267 
					                                                      OpDecorate %268 Location 268 
					                                                      OpDecorate vs_TEXCOORD4 Location 270 
					                                                      OpDecorate vs_TEXCOORD8 Location 273 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %7 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                               Private f32_4* %62 = OpVariable Private 
					                                          u32 %82 = OpConstant 1 
					                                              %83 = OpTypeArray %6 %82 
					                                              %84 = OpTypeStruct %7 %6 %83 
					                                              %85 = OpTypePointer Output %84 
					         Output struct {f32_4; f32; f32[1];}* %86 = OpVariable Output 
					                                              %94 = OpTypePointer Output %7 
					                                              %96 = OpTypeVector %6 2 
					                                              %97 = OpTypePointer Output %96 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                 Input f32_4* %99 = OpVariable Input 
					                                         i32 %102 = OpConstant 4 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                         u32 %112 = OpConstant 0 
					                                             %113 = OpTypePointer Private %6 
					                                         u32 %116 = OpConstant 3 
					                                             %117 = OpTypePointer Output %6 
					                                             %119 = OpTypePointer Input %50 
					                                Input f32_3* %120 = OpVariable Input 
					                                         u32 %132 = OpConstant 2 
					                                Input f32_4* %157 = OpVariable Input 
					                                             %205 = OpTypePointer Private %50 
					                              Private f32_3* %206 = OpVariable Private 
					                                             %220 = OpTypePointer Input %6 
					                                             %223 = OpTypePointer Uniform %6 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                               Output f32_4* %267 = OpVariable Output 
					                                Input f32_4* %268 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
					                                         f32 %271 = OpConstant 3,674022E-40 
					                                       f32_4 %272 = OpConstantComposite %271 %271 %271 %271 
					                       Output f32_4* vs_TEXCOORD8 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %51 = OpAccessChain %21 %23 %46 
					                                        f32_4 %52 = OpLoad %51 
					                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
					                                        f32_4 %54 = OpLoad %11 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 3 3 3 
					                                        f32_3 %56 = OpFMul %53 %55 
					                                        f32_4 %57 = OpLoad %9 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
					                                        f32_3 %59 = OpFAdd %56 %58 
					                                        f32_4 %60 = OpLoad %9 
					                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
					                                                      OpStore %9 %61 
					                                        f32_4 %63 = OpLoad %44 
					                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
					                               Uniform f32_4* %65 = OpAccessChain %21 %46 %24 
					                                        f32_4 %66 = OpLoad %65 
					                                        f32_4 %67 = OpFMul %64 %66 
					                                                      OpStore %62 %67 
					                               Uniform f32_4* %68 = OpAccessChain %21 %46 %23 
					                                        f32_4 %69 = OpLoad %68 
					                                        f32_4 %70 = OpLoad %44 
					                                        f32_4 %71 = OpVectorShuffle %70 %70 0 0 0 0 
					                                        f32_4 %72 = OpFMul %69 %71 
					                                        f32_4 %73 = OpLoad %62 
					                                        f32_4 %74 = OpFAdd %72 %73 
					                                                      OpStore %62 %74 
					                               Uniform f32_4* %75 = OpAccessChain %21 %46 %36 
					                                        f32_4 %76 = OpLoad %75 
					                                        f32_4 %77 = OpLoad %44 
					                                        f32_4 %78 = OpVectorShuffle %77 %77 2 2 2 2 
					                                        f32_4 %79 = OpFMul %76 %78 
					                                        f32_4 %80 = OpLoad %62 
					                                        f32_4 %81 = OpFAdd %79 %80 
					                                                      OpStore %62 %81 
					                               Uniform f32_4* %87 = OpAccessChain %21 %46 %46 
					                                        f32_4 %88 = OpLoad %87 
					                                        f32_4 %89 = OpLoad %44 
					                                        f32_4 %90 = OpVectorShuffle %89 %89 3 3 3 3 
					                                        f32_4 %91 = OpFMul %88 %90 
					                                        f32_4 %92 = OpLoad %62 
					                                        f32_4 %93 = OpFAdd %91 %92 
					                                Output f32_4* %95 = OpAccessChain %86 %23 
					                                                      OpStore %95 %93 
					                                       f32_4 %100 = OpLoad %99 
					                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
					                              Uniform f32_4* %103 = OpAccessChain %21 %102 
					                                       f32_4 %104 = OpLoad %103 
					                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
					                                       f32_2 %106 = OpFMul %101 %105 
					                              Uniform f32_4* %107 = OpAccessChain %21 %102 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
					                                       f32_2 %110 = OpFAdd %106 %109 
					                                                      OpStore vs_TEXCOORD0 %110 
					                                Private f32* %114 = OpAccessChain %9 %112 
					                                         f32 %115 = OpLoad %114 
					                                 Output f32* %118 = OpAccessChain vs_TEXCOORD1 %116 
					                                                      OpStore %118 %115 
					                                       f32_3 %121 = OpLoad %120 
					                              Uniform f32_4* %122 = OpAccessChain %21 %24 %23 
					                                       f32_4 %123 = OpLoad %122 
					                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
					                                         f32 %125 = OpDot %121 %124 
					                                Private f32* %126 = OpAccessChain %44 %82 
					                                                      OpStore %126 %125 
					                                       f32_3 %127 = OpLoad %120 
					                              Uniform f32_4* %128 = OpAccessChain %21 %24 %24 
					                                       f32_4 %129 = OpLoad %128 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
					                                         f32 %131 = OpDot %127 %130 
					                                Private f32* %133 = OpAccessChain %44 %132 
					                                                      OpStore %133 %131 
					                                       f32_3 %134 = OpLoad %120 
					                              Uniform f32_4* %135 = OpAccessChain %21 %24 %36 
					                                       f32_4 %136 = OpLoad %135 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                         f32 %138 = OpDot %134 %137 
					                                Private f32* %139 = OpAccessChain %44 %112 
					                                                      OpStore %139 %138 
					                                       f32_4 %140 = OpLoad %44 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                       f32_4 %142 = OpLoad %44 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %141 %143 
					                                Private f32* %145 = OpAccessChain %9 %112 
					                                                      OpStore %145 %144 
					                                Private f32* %146 = OpAccessChain %9 %112 
					                                         f32 %147 = OpLoad %146 
					                                         f32 %148 = OpExtInst %1 32 %147 
					                                Private f32* %149 = OpAccessChain %9 %112 
					                                                      OpStore %149 %148 
					                                       f32_4 %150 = OpLoad %9 
					                                       f32_3 %151 = OpVectorShuffle %150 %150 0 0 0 
					                                       f32_4 %152 = OpLoad %44 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_3 %154 = OpFMul %151 %153 
					                                       f32_4 %155 = OpLoad %44 
					                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
					                                                      OpStore %44 %156 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 1 1 1 
					                              Uniform f32_4* %160 = OpAccessChain %21 %23 %24 
					                                       f32_4 %161 = OpLoad %160 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 1 2 0 
					                                       f32_3 %163 = OpFMul %159 %162 
					                                       f32_4 %164 = OpLoad %62 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %62 %165 
					                              Uniform f32_4* %166 = OpAccessChain %21 %23 %23 
					                                       f32_4 %167 = OpLoad %166 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 1 2 0 
					                                       f32_4 %169 = OpLoad %157 
					                                       f32_3 %170 = OpVectorShuffle %169 %169 0 0 0 
					                                       f32_3 %171 = OpFMul %168 %170 
					                                       f32_4 %172 = OpLoad %62 
					                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
					                                       f32_3 %174 = OpFAdd %171 %173 
					                                       f32_4 %175 = OpLoad %62 
					                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
					                                                      OpStore %62 %176 
					                              Uniform f32_4* %177 = OpAccessChain %21 %23 %36 
					                                       f32_4 %178 = OpLoad %177 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 1 2 0 
					                                       f32_4 %180 = OpLoad %157 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 2 2 2 
					                                       f32_3 %182 = OpFMul %179 %181 
					                                       f32_4 %183 = OpLoad %62 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                       f32_3 %185 = OpFAdd %182 %184 
					                                       f32_4 %186 = OpLoad %62 
					                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
					                                                      OpStore %62 %187 
					                                       f32_4 %188 = OpLoad %62 
					                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
					                                       f32_4 %190 = OpLoad %62 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                         f32 %192 = OpDot %189 %191 
					                                Private f32* %193 = OpAccessChain %9 %112 
					                                                      OpStore %193 %192 
					                                Private f32* %194 = OpAccessChain %9 %112 
					                                         f32 %195 = OpLoad %194 
					                                         f32 %196 = OpExtInst %1 32 %195 
					                                Private f32* %197 = OpAccessChain %9 %112 
					                                                      OpStore %197 %196 
					                                       f32_4 %198 = OpLoad %9 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 0 0 
					                                       f32_4 %200 = OpLoad %62 
					                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
					                                       f32_3 %202 = OpFMul %199 %201 
					                                       f32_4 %203 = OpLoad %62 
					                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
					                                                      OpStore %62 %204 
					                                       f32_4 %207 = OpLoad %44 
					                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
					                                       f32_4 %209 = OpLoad %62 
					                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
					                                       f32_3 %211 = OpFMul %208 %210 
					                                                      OpStore %206 %211 
					                                       f32_4 %212 = OpLoad %44 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 2 0 1 
					                                       f32_4 %214 = OpLoad %62 
					                                       f32_3 %215 = OpVectorShuffle %214 %214 1 2 0 
					                                       f32_3 %216 = OpFMul %213 %215 
					                                       f32_3 %217 = OpLoad %206 
					                                       f32_3 %218 = OpFNegate %217 
					                                       f32_3 %219 = OpFAdd %216 %218 
					                                                      OpStore %206 %219 
					                                  Input f32* %221 = OpAccessChain %157 %116 
					                                         f32 %222 = OpLoad %221 
					                                Uniform f32* %224 = OpAccessChain %21 %36 %116 
					                                         f32 %225 = OpLoad %224 
					                                         f32 %226 = OpFMul %222 %225 
					                                Private f32* %227 = OpAccessChain %9 %112 
					                                                      OpStore %227 %226 
					                                       f32_4 %228 = OpLoad %9 
					                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
					                                       f32_3 %230 = OpLoad %206 
					                                       f32_3 %231 = OpFMul %229 %230 
					                                                      OpStore %206 %231 
					                                Private f32* %232 = OpAccessChain %206 %112 
					                                         f32 %233 = OpLoad %232 
					                                 Output f32* %234 = OpAccessChain vs_TEXCOORD1 %82 
					                                                      OpStore %234 %233 
					                                Private f32* %235 = OpAccessChain %62 %132 
					                                         f32 %236 = OpLoad %235 
					                                 Output f32* %237 = OpAccessChain vs_TEXCOORD1 %112 
					                                                      OpStore %237 %236 
					                                Private f32* %238 = OpAccessChain %44 %82 
					                                         f32 %239 = OpLoad %238 
					                                 Output f32* %240 = OpAccessChain vs_TEXCOORD1 %132 
					                                                      OpStore %240 %239 
					                                Private f32* %242 = OpAccessChain %62 %112 
					                                         f32 %243 = OpLoad %242 
					                                 Output f32* %244 = OpAccessChain vs_TEXCOORD2 %112 
					                                                      OpStore %244 %243 
					                                Private f32* %246 = OpAccessChain %62 %82 
					                                         f32 %247 = OpLoad %246 
					                                 Output f32* %248 = OpAccessChain vs_TEXCOORD3 %112 
					                                                      OpStore %248 %247 
					                                Private f32* %249 = OpAccessChain %44 %132 
					                                         f32 %250 = OpLoad %249 
					                                 Output f32* %251 = OpAccessChain vs_TEXCOORD2 %132 
					                                                      OpStore %251 %250 
					                                Private f32* %252 = OpAccessChain %44 %112 
					                                         f32 %253 = OpLoad %252 
					                                 Output f32* %254 = OpAccessChain vs_TEXCOORD3 %132 
					                                                      OpStore %254 %253 
					                                Private f32* %255 = OpAccessChain %9 %82 
					                                         f32 %256 = OpLoad %255 
					                                 Output f32* %257 = OpAccessChain vs_TEXCOORD2 %116 
					                                                      OpStore %257 %256 
					                                Private f32* %258 = OpAccessChain %9 %132 
					                                         f32 %259 = OpLoad %258 
					                                 Output f32* %260 = OpAccessChain vs_TEXCOORD3 %116 
					                                                      OpStore %260 %259 
					                                Private f32* %261 = OpAccessChain %206 %82 
					                                         f32 %262 = OpLoad %261 
					                                 Output f32* %263 = OpAccessChain vs_TEXCOORD2 %82 
					                                                      OpStore %263 %262 
					                                Private f32* %264 = OpAccessChain %206 %132 
					                                         f32 %265 = OpLoad %264 
					                                 Output f32* %266 = OpAccessChain vs_TEXCOORD3 %82 
					                                                      OpStore %266 %265 
					                                       f32_4 %269 = OpLoad %268 
					                                                      OpStore %267 %269 
					                                                      OpStore vs_TEXCOORD4 %272 
					                                                      OpStore vs_TEXCOORD8 %272 
					                                 Output f32* %274 = OpAccessChain %86 %23 %82 
					                                         f32 %275 = OpLoad %274 
					                                         f32 %276 = OpFNegate %275 
					                                 Output f32* %277 = OpAccessChain %86 %23 %82 
					                                                      OpStore %277 %276 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 725
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %68 %79 %126 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpDecorate vs_TEXCOORD1 Location 12 
					                                                      OpDecorate vs_TEXCOORD2 Location 21 
					                                                      OpDecorate vs_TEXCOORD3 Location 26 
					                                                      OpMemberDecorate %34 0 Offset 34 
					                                                      OpMemberDecorate %34 1 Offset 34 
					                                                      OpMemberDecorate %34 2 Offset 34 
					                                                      OpMemberDecorate %34 3 Offset 34 
					                                                      OpMemberDecorate %34 4 Offset 34 
					                                                      OpMemberDecorate %34 5 Offset 34 
					                                                      OpMemberDecorate %34 6 Offset 34 
					                                                      OpMemberDecorate %34 7 Offset 34 
					                                                      OpMemberDecorate %34 8 Offset 34 
					                                                      OpMemberDecorate %34 9 Offset 34 
					                                                      OpMemberDecorate %34 10 Offset 34 
					                                                      OpMemberDecorate %34 11 Offset 34 
					                                                      OpDecorate %34 Block 
					                                                      OpDecorate %36 DescriptorSet 36 
					                                                      OpDecorate %36 Binding 36 
					                                                      OpDecorate %58 DescriptorSet 58 
					                                                      OpDecorate %58 Binding 58 
					                                                      OpDecorate %62 DescriptorSet 62 
					                                                      OpDecorate %62 Binding 62 
					                                                      OpDecorate vs_TEXCOORD0 Location 68 
					                                                      OpDecorate %79 Location 79 
					                                                      OpDecorate %86 DescriptorSet 86 
					                                                      OpDecorate %86 Binding 86 
					                                                      OpDecorate %88 DescriptorSet 88 
					                                                      OpDecorate %88 Binding 88 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %311 DescriptorSet 311 
					                                                      OpDecorate %311 Binding 311 
					                                                      OpDecorate %313 DescriptorSet 313 
					                                                      OpDecorate %313 Binding 313 
					                                                      OpDecorate %464 DescriptorSet 464 
					                                                      OpDecorate %464 Binding 464 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                              %13 = OpTypeInt 32 0 
					                                          u32 %14 = OpConstant 3 
					                                              %15 = OpTypePointer Input %6 
					                                          u32 %18 = OpConstant 0 
					                                              %19 = OpTypePointer Private %6 
					                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %24 = OpConstant 1 
					                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                          u32 %29 = OpConstant 2 
					                               Private f32_3* %31 = OpVariable Private 
					                                              %34 = OpTypeStruct %7 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
					                                              %35 = OpTypePointer Uniform %34 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %36 = OpVariable Uniform 
					                                              %37 = OpTypeInt 32 1 
					                                          i32 %38 = OpConstant 0 
					                                              %39 = OpTypePointer Uniform %7 
					                                 Private f32* %43 = OpVariable Private 
					                               Private f32_3* %49 = OpVariable Private 
					                                              %54 = OpTypePointer Private %10 
					                               Private f32_4* %55 = OpVariable Private 
					                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %57 = OpTypePointer UniformConstant %56 
					         UniformConstant read_only Texture2D* %58 = OpVariable UniformConstant 
					                                              %60 = OpTypeSampler 
					                                              %61 = OpTypePointer UniformConstant %60 
					                     UniformConstant sampler* %62 = OpVariable UniformConstant 
					                                              %64 = OpTypeSampledImage %56 
					                                              %66 = OpTypeVector %6 2 
					                                              %67 = OpTypePointer Input %66 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                          i32 %72 = OpConstant 11 
					                                              %73 = OpTypePointer Uniform %10 
					                                 Input f32_4* %79 = OpVariable Input 
					                               Private f32_3* %85 = OpVariable Private 
					         UniformConstant read_only Texture2D* %86 = OpVariable UniformConstant 
					                     UniformConstant sampler* %88 = OpVariable UniformConstant 
					                                         f32 %102 = OpConstant 3,674022E-40 
					                                       f32_2 %103 = OpConstantComposite %102 %102 
					                                         f32 %105 = OpConstant 3,674022E-40 
					                                       f32_2 %106 = OpConstantComposite %105 %105 
					                                Private f32* %110 = OpVariable Private 
					                                         f32 %117 = OpConstant 3,674022E-40 
					                                             %125 = OpTypePointer Output %10 
					                               Output f32_4* %126 = OpVariable Output 
					                                             %132 = OpTypePointer Output %6 
					                              Private f32_4* %134 = OpVariable Private 
					                                             %179 = OpTypeBool 
					                                             %180 = OpTypePointer Private %179 
					                               Private bool* %181 = OpVariable Private 
					                                         f32 %182 = OpConstant 3,674022E-40 
					                                         i32 %183 = OpConstant 4 
					                                             %184 = OpTypePointer Uniform %6 
					                              Private f32_4* %198 = OpVariable Private 
					                              Private f32_3* %206 = OpVariable Private 
					                                         i32 %209 = OpConstant 2 
					                              Private f32_3* %218 = OpVariable Private 
					                                         i32 %221 = OpConstant 3 
					                                             %230 = OpTypeVector %179 3 
					                                             %231 = OpTypePointer Private %230 
					                             Private bool_3* %232 = OpVariable Private 
					                                       f32_4 %233 = OpConstantComposite %182 %182 %182 %182 
					                                             %236 = OpTypeVector %179 4 
					                                             %239 = OpTypePointer Function %7 
					                                             %244 = OpTypePointer Function %6 
					                                             %309 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %310 = OpTypePointer UniformConstant %309 
					      UniformConstant read_only TextureCube* %311 = OpVariable UniformConstant 
					                    UniformConstant sampler* %313 = OpVariable UniformConstant 
					                                             %315 = OpTypeSampledImage %309 
					                                         f32 %319 = OpConstant 3,674022E-40 
					                                         i32 %324 = OpConstant 5 
					                               Private bool* %347 = OpVariable Private 
					                                         f32 %350 = OpConstant 3,674022E-40 
					                                         i32 %355 = OpConstant 8 
					                                Private f32* %362 = OpVariable Private 
					                              Private f32_3* %375 = OpVariable Private 
					                                         i32 %378 = OpConstant 6 
					                              Private f32_3* %386 = OpVariable Private 
					                                         i32 %389 = OpConstant 7 
					                             Private bool_3* %397 = OpVariable Private 
					      UniformConstant read_only TextureCube* %464 = OpVariable UniformConstant 
					                                         i32 %475 = OpConstant 9 
					                                         f32 %528 = OpConstant 3,674022E-40 
					                                       f32_3 %529 = OpConstantComposite %528 %528 %528 
					                                         i32 %535 = OpConstant 1 
					                                         f32 %544 = OpConstant 3,674022E-40 
					                              Private f32_3* %572 = OpVariable Private 
					                                         f32 %581 = OpConstant 3,674022E-40 
					                                Private f32* %584 = OpVariable Private 
					                              Private f32_3* %612 = OpVariable Private 
					                                         f32 %653 = OpConstant 3,674022E-40 
					                                         f32 %655 = OpConstant 3,674022E-40 
					                                         f32 %662 = OpConstant 3,674022E-40 
					                                         i32 %666 = OpConstant 10 
					                                         f32 %697 = OpConstant 3,674022E-40 
					                                       f32_3 %709 = OpConstantComposite %655 %655 %655 
					                                         f32 %713 = OpConstant 3,674022E-40 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %240 = OpVariable Function 
					                               Function f32* %245 = OpVariable Function 
					                               Function f32* %257 = OpVariable Function 
					                               Function f32* %269 = OpVariable Function 
					                             Function f32_3* %402 = OpVariable Function 
					                               Function f32* %406 = OpVariable Function 
					                               Function f32* %418 = OpVariable Function 
					                               Function f32* %430 = OpVariable Function 
					                                   Input f32* %16 = OpAccessChain vs_TEXCOORD1 %14 
					                                          f32 %17 = OpLoad %16 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %17 
					                                   Input f32* %22 = OpAccessChain vs_TEXCOORD2 %14 
					                                          f32 %23 = OpLoad %22 
					                                 Private f32* %25 = OpAccessChain %9 %24 
					                                                      OpStore %25 %23 
					                                   Input f32* %27 = OpAccessChain vs_TEXCOORD3 %14 
					                                          f32 %28 = OpLoad %27 
					                                 Private f32* %30 = OpAccessChain %9 %29 
					                                                      OpStore %30 %28 
					                                        f32_3 %32 = OpLoad %9 
					                                        f32_3 %33 = OpFNegate %32 
					                               Uniform f32_3* %40 = OpAccessChain %36 %38 
					                                        f32_3 %41 = OpLoad %40 
					                                        f32_3 %42 = OpFAdd %33 %41 
					                                                      OpStore %31 %42 
					                                        f32_3 %44 = OpLoad %31 
					                                        f32_3 %45 = OpLoad %31 
					                                          f32 %46 = OpDot %44 %45 
					                                                      OpStore %43 %46 
					                                          f32 %47 = OpLoad %43 
					                                          f32 %48 = OpExtInst %1 32 %47 
					                                                      OpStore %43 %48 
					                                          f32 %50 = OpLoad %43 
					                                        f32_3 %51 = OpCompositeConstruct %50 %50 %50 
					                                        f32_3 %52 = OpLoad %31 
					                                        f32_3 %53 = OpFMul %51 %52 
					                                                      OpStore %49 %53 
					                          read_only Texture2D %59 = OpLoad %58 
					                                      sampler %63 = OpLoad %62 
					                   read_only Texture2DSampled %65 = OpSampledImage %59 %63 
					                                        f32_2 %69 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %70 = OpImageSampleImplicitLod %65 %69 
					                                                      OpStore %55 %70 
					                                        f32_4 %71 = OpLoad %55 
					                               Uniform f32_4* %74 = OpAccessChain %36 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpFMul %71 %75 
					                                                      OpStore %55 %76 
					                                        f32_4 %77 = OpLoad %55 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %78 %81 
					                                        f32_4 %83 = OpLoad %55 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %55 %84 
					                          read_only Texture2D %87 = OpLoad %86 
					                                      sampler %89 = OpLoad %88 
					                   read_only Texture2DSampled %90 = OpSampledImage %87 %89 
					                                        f32_2 %91 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %92 = OpImageSampleImplicitLod %90 %91 
					                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 3 
					                                                      OpStore %85 %93 
					                                 Private f32* %94 = OpAccessChain %85 %29 
					                                          f32 %95 = OpLoad %94 
					                                 Private f32* %96 = OpAccessChain %85 %18 
					                                          f32 %97 = OpLoad %96 
					                                          f32 %98 = OpFMul %95 %97 
					                                 Private f32* %99 = OpAccessChain %85 %18 
					                                                      OpStore %99 %98 
					                                       f32_3 %100 = OpLoad %85 
					                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
					                                       f32_2 %104 = OpFMul %101 %103 
					                                       f32_2 %107 = OpFAdd %104 %106 
					                                       f32_3 %108 = OpLoad %85 
					                                       f32_3 %109 = OpVectorShuffle %108 %107 3 4 2 
					                                                      OpStore %85 %109 
					                                       f32_3 %111 = OpLoad %85 
					                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
					                                       f32_3 %113 = OpLoad %85 
					                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
					                                         f32 %115 = OpDot %112 %114 
					                                                      OpStore %110 %115 
					                                         f32 %116 = OpLoad %110 
					                                         f32 %118 = OpExtInst %1 37 %116 %117 
					                                                      OpStore %110 %118 
					                                         f32 %119 = OpLoad %110 
					                                         f32 %120 = OpFNegate %119 
					                                         f32 %121 = OpFAdd %120 %117 
					                                                      OpStore %110 %121 
					                                         f32 %122 = OpLoad %110 
					                                         f32 %123 = OpExtInst %1 31 %122 
					                                Private f32* %124 = OpAccessChain %85 %29 
					                                                      OpStore %124 %123 
					                                Private f32* %127 = OpAccessChain %55 %14 
					                                         f32 %128 = OpLoad %127 
					                                  Input f32* %129 = OpAccessChain %79 %14 
					                                         f32 %130 = OpLoad %129 
					                                         f32 %131 = OpFMul %128 %130 
					                                 Output f32* %133 = OpAccessChain %126 %14 
					                                                      OpStore %133 %131 
					                                       f32_4 %135 = OpLoad vs_TEXCOORD1 
					                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
					                                       f32_3 %137 = OpLoad %85 
					                                         f32 %138 = OpDot %136 %137 
					                                Private f32* %139 = OpAccessChain %134 %18 
					                                                      OpStore %139 %138 
					                                       f32_4 %140 = OpLoad vs_TEXCOORD2 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                       f32_3 %142 = OpLoad %85 
					                                         f32 %143 = OpDot %141 %142 
					                                Private f32* %144 = OpAccessChain %134 %24 
					                                                      OpStore %144 %143 
					                                       f32_4 %145 = OpLoad vs_TEXCOORD3 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                       f32_3 %147 = OpLoad %85 
					                                         f32 %148 = OpDot %146 %147 
					                                Private f32* %149 = OpAccessChain %134 %29 
					                                                      OpStore %149 %148 
					                                       f32_4 %150 = OpLoad %134 
					                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
					                                       f32_4 %152 = OpLoad %134 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                         f32 %154 = OpDot %151 %153 
					                                                      OpStore %110 %154 
					                                         f32 %155 = OpLoad %110 
					                                         f32 %156 = OpExtInst %1 32 %155 
					                                                      OpStore %110 %156 
					                                         f32 %157 = OpLoad %110 
					                                       f32_3 %158 = OpCompositeConstruct %157 %157 %157 
					                                       f32_4 %159 = OpLoad %134 
					                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
					                                       f32_3 %161 = OpFMul %158 %160 
					                                                      OpStore %85 %161 
					                                       f32_3 %162 = OpLoad %49 
					                                       f32_3 %163 = OpFNegate %162 
					                                       f32_3 %164 = OpLoad %85 
					                                         f32 %165 = OpDot %163 %164 
					                                                      OpStore %110 %165 
					                                         f32 %166 = OpLoad %110 
					                                         f32 %167 = OpLoad %110 
					                                         f32 %168 = OpFAdd %166 %167 
					                                                      OpStore %110 %168 
					                                       f32_3 %169 = OpLoad %85 
					                                         f32 %170 = OpLoad %110 
					                                       f32_3 %171 = OpCompositeConstruct %170 %170 %170 
					                                       f32_3 %172 = OpFNegate %171 
					                                       f32_3 %173 = OpFMul %169 %172 
					                                       f32_3 %174 = OpLoad %49 
					                                       f32_3 %175 = OpFNegate %174 
					                                       f32_3 %176 = OpFAdd %173 %175 
					                                       f32_4 %177 = OpLoad %134 
					                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
					                                                      OpStore %134 %178 
					                                Uniform f32* %185 = OpAccessChain %36 %183 %14 
					                                         f32 %186 = OpLoad %185 
					                                        bool %187 = OpFOrdLessThan %182 %186 
					                                                      OpStore %181 %187 
					                                        bool %188 = OpLoad %181 
					                                                      OpSelectionMerge %190 None 
					                                                      OpBranchConditional %188 %189 %304 
					                                             %189 = OpLabel 
					                                       f32_4 %191 = OpLoad %134 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
					                                       f32_4 %193 = OpLoad %134 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                         f32 %195 = OpDot %192 %194 
					                                                      OpStore %110 %195 
					                                         f32 %196 = OpLoad %110 
					                                         f32 %197 = OpExtInst %1 32 %196 
					                                                      OpStore %110 %197 
					                                         f32 %199 = OpLoad %110 
					                                       f32_3 %200 = OpCompositeConstruct %199 %199 %199 
					                                       f32_4 %201 = OpLoad %134 
					                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
					                                       f32_3 %203 = OpFMul %200 %202 
					                                       f32_4 %204 = OpLoad %198 
					                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
					                                                      OpStore %198 %205 
					                                       f32_3 %207 = OpLoad %9 
					                                       f32_3 %208 = OpFNegate %207 
					                              Uniform f32_4* %210 = OpAccessChain %36 %209 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                       f32_3 %213 = OpFAdd %208 %212 
					                                                      OpStore %206 %213 
					                                       f32_3 %214 = OpLoad %206 
					                                       f32_4 %215 = OpLoad %198 
					                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
					                                       f32_3 %217 = OpFDiv %214 %216 
					                                                      OpStore %206 %217 
					                                       f32_3 %219 = OpLoad %9 
					                                       f32_3 %220 = OpFNegate %219 
					                              Uniform f32_4* %222 = OpAccessChain %36 %221 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
					                                       f32_3 %225 = OpFAdd %220 %224 
					                                                      OpStore %218 %225 
					                                       f32_3 %226 = OpLoad %218 
					                                       f32_4 %227 = OpLoad %198 
					                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
					                                       f32_3 %229 = OpFDiv %226 %228 
					                                                      OpStore %218 %229 
					                                       f32_4 %234 = OpLoad %198 
					                                       f32_4 %235 = OpVectorShuffle %234 %234 0 1 2 0 
					                                      bool_4 %237 = OpFOrdLessThan %233 %235 
					                                      bool_3 %238 = OpVectorShuffle %237 %237 0 1 2 
					                                                      OpStore %232 %238 
					                                       f32_3 %241 = OpLoad %206 
					                                                      OpStore %240 %241 
					                               Private bool* %242 = OpAccessChain %232 %18 
					                                        bool %243 = OpLoad %242 
					                                                      OpSelectionMerge %247 None 
					                                                      OpBranchConditional %243 %246 %250 
					                                             %246 = OpLabel 
					                                Private f32* %248 = OpAccessChain %206 %18 
					                                         f32 %249 = OpLoad %248 
					                                                      OpStore %245 %249 
					                                                      OpBranch %247 
					                                             %250 = OpLabel 
					                                Private f32* %251 = OpAccessChain %218 %18 
					                                         f32 %252 = OpLoad %251 
					                                                      OpStore %245 %252 
					                                                      OpBranch %247 
					                                             %247 = OpLabel 
					                                         f32 %253 = OpLoad %245 
					                               Function f32* %254 = OpAccessChain %240 %18 
					                                                      OpStore %254 %253 
					                               Private bool* %255 = OpAccessChain %232 %24 
					                                        bool %256 = OpLoad %255 
					                                                      OpSelectionMerge %259 None 
					                                                      OpBranchConditional %256 %258 %262 
					                                             %258 = OpLabel 
					                                Private f32* %260 = OpAccessChain %206 %24 
					                                         f32 %261 = OpLoad %260 
					                                                      OpStore %257 %261 
					                                                      OpBranch %259 
					                                             %262 = OpLabel 
					                                Private f32* %263 = OpAccessChain %218 %24 
					                                         f32 %264 = OpLoad %263 
					                                                      OpStore %257 %264 
					                                                      OpBranch %259 
					                                             %259 = OpLabel 
					                                         f32 %265 = OpLoad %257 
					                               Function f32* %266 = OpAccessChain %240 %24 
					                                                      OpStore %266 %265 
					                               Private bool* %267 = OpAccessChain %232 %29 
					                                        bool %268 = OpLoad %267 
					                                                      OpSelectionMerge %271 None 
					                                                      OpBranchConditional %268 %270 %274 
					                                             %270 = OpLabel 
					                                Private f32* %272 = OpAccessChain %206 %29 
					                                         f32 %273 = OpLoad %272 
					                                                      OpStore %269 %273 
					                                                      OpBranch %271 
					                                             %274 = OpLabel 
					                                Private f32* %275 = OpAccessChain %218 %29 
					                                         f32 %276 = OpLoad %275 
					                                                      OpStore %269 %276 
					                                                      OpBranch %271 
					                                             %271 = OpLabel 
					                                         f32 %277 = OpLoad %269 
					                               Function f32* %278 = OpAccessChain %240 %29 
					                                                      OpStore %278 %277 
					                                       f32_3 %279 = OpLoad %240 
					                                                      OpStore %206 %279 
					                                Private f32* %280 = OpAccessChain %206 %24 
					                                         f32 %281 = OpLoad %280 
					                                Private f32* %282 = OpAccessChain %206 %18 
					                                         f32 %283 = OpLoad %282 
					                                         f32 %284 = OpExtInst %1 37 %281 %283 
					                                                      OpStore %110 %284 
					                                Private f32* %285 = OpAccessChain %206 %29 
					                                         f32 %286 = OpLoad %285 
					                                         f32 %287 = OpLoad %110 
					                                         f32 %288 = OpExtInst %1 37 %286 %287 
					                                                      OpStore %110 %288 
					                                       f32_3 %289 = OpLoad %9 
					                              Uniform f32_4* %290 = OpAccessChain %36 %183 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFNegate %292 
					                                       f32_3 %294 = OpFAdd %289 %293 
					                                                      OpStore %206 %294 
					                                       f32_4 %295 = OpLoad %198 
					                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
					                                         f32 %297 = OpLoad %110 
					                                       f32_3 %298 = OpCompositeConstruct %297 %297 %297 
					                                       f32_3 %299 = OpFMul %296 %298 
					                                       f32_3 %300 = OpLoad %206 
					                                       f32_3 %301 = OpFAdd %299 %300 
					                                       f32_4 %302 = OpLoad %198 
					                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
					                                                      OpStore %198 %303 
					                                                      OpBranch %190 
					                                             %304 = OpLabel 
					                                       f32_4 %305 = OpLoad %134 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
					                                       f32_4 %307 = OpLoad %198 
					                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
					                                                      OpStore %198 %308 
					                                                      OpBranch %190 
					                                             %190 = OpLabel 
					                       read_only TextureCube %312 = OpLoad %311 
					                                     sampler %314 = OpLoad %313 
					                read_only TextureCubeSampled %316 = OpSampledImage %312 %314 
					                                       f32_4 %317 = OpLoad %198 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
					                                       f32_4 %320 = OpImageSampleExplicitLod %316 %318 Lod %10 
					                                                      OpStore %198 %320 
					                                Private f32* %321 = OpAccessChain %198 %14 
					                                         f32 %322 = OpLoad %321 
					                                         f32 %323 = OpFAdd %322 %105 
					                                                      OpStore %110 %323 
					                                Uniform f32* %325 = OpAccessChain %36 %324 %14 
					                                         f32 %326 = OpLoad %325 
					                                         f32 %327 = OpLoad %110 
					                                         f32 %328 = OpFMul %326 %327 
					                                         f32 %329 = OpFAdd %328 %117 
					                                                      OpStore %110 %329 
					                                         f32 %330 = OpLoad %110 
					                                         f32 %331 = OpExtInst %1 30 %330 
					                                                      OpStore %110 %331 
					                                         f32 %332 = OpLoad %110 
					                                Uniform f32* %333 = OpAccessChain %36 %324 %24 
					                                         f32 %334 = OpLoad %333 
					                                         f32 %335 = OpFMul %332 %334 
					                                                      OpStore %110 %335 
					                                         f32 %336 = OpLoad %110 
					                                         f32 %337 = OpExtInst %1 29 %336 
					                                                      OpStore %110 %337 
					                                         f32 %338 = OpLoad %110 
					                                Uniform f32* %339 = OpAccessChain %36 %324 %18 
					                                         f32 %340 = OpLoad %339 
					                                         f32 %341 = OpFMul %338 %340 
					                                                      OpStore %110 %341 
					                                       f32_4 %342 = OpLoad %198 
					                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
					                                         f32 %344 = OpLoad %110 
					                                       f32_3 %345 = OpCompositeConstruct %344 %344 %344 
					                                       f32_3 %346 = OpFMul %343 %345 
					                                                      OpStore %206 %346 
					                                Uniform f32* %348 = OpAccessChain %36 %221 %14 
					                                         f32 %349 = OpLoad %348 
					                                        bool %351 = OpFOrdLessThan %349 %350 
					                                                      OpStore %347 %351 
					                                        bool %352 = OpLoad %347 
					                                                      OpSelectionMerge %354 None 
					                                                      OpBranchConditional %352 %353 %354 
					                                             %353 = OpLabel 
					                                Uniform f32* %356 = OpAccessChain %36 %355 %14 
					                                         f32 %357 = OpLoad %356 
					                                        bool %358 = OpFOrdLessThan %182 %357 
					                                                      OpStore %347 %358 
					                                        bool %359 = OpLoad %347 
					                                                      OpSelectionMerge %361 None 
					                                                      OpBranchConditional %359 %360 %361 
					                                             %360 = OpLabel 
					                                       f32_4 %363 = OpLoad %134 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                       f32_4 %365 = OpLoad %134 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
					                                         f32 %367 = OpDot %364 %366 
					                                                      OpStore %362 %367 
					                                         f32 %368 = OpLoad %362 
					                                         f32 %369 = OpExtInst %1 32 %368 
					                                                      OpStore %362 %369 
					                                         f32 %370 = OpLoad %362 
					                                       f32_3 %371 = OpCompositeConstruct %370 %370 %370 
					                                       f32_4 %372 = OpLoad %134 
					                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
					                                       f32_3 %374 = OpFMul %371 %373 
					                                                      OpStore %218 %374 
					                                       f32_3 %376 = OpLoad %9 
					                                       f32_3 %377 = OpFNegate %376 
					                              Uniform f32_4* %379 = OpAccessChain %36 %378 
					                                       f32_4 %380 = OpLoad %379 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
					                                       f32_3 %382 = OpFAdd %377 %381 
					                                                      OpStore %375 %382 
					                                       f32_3 %383 = OpLoad %375 
					                                       f32_3 %384 = OpLoad %218 
					                                       f32_3 %385 = OpFDiv %383 %384 
					                                                      OpStore %375 %385 
					                                       f32_3 %387 = OpLoad %9 
					                                       f32_3 %388 = OpFNegate %387 
					                              Uniform f32_4* %390 = OpAccessChain %36 %389 
					                                       f32_4 %391 = OpLoad %390 
					                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
					                                       f32_3 %393 = OpFAdd %388 %392 
					                                                      OpStore %386 %393 
					                                       f32_3 %394 = OpLoad %386 
					                                       f32_3 %395 = OpLoad %218 
					                                       f32_3 %396 = OpFDiv %394 %395 
					                                                      OpStore %386 %396 
					                                       f32_3 %398 = OpLoad %218 
					                                       f32_4 %399 = OpVectorShuffle %398 %398 0 1 2 0 
					                                      bool_4 %400 = OpFOrdLessThan %233 %399 
					                                      bool_3 %401 = OpVectorShuffle %400 %400 0 1 2 
					                                                      OpStore %397 %401 
					                                       f32_3 %403 = OpLoad %375 
					                                                      OpStore %402 %403 
					                               Private bool* %404 = OpAccessChain %397 %18 
					                                        bool %405 = OpLoad %404 
					                                                      OpSelectionMerge %408 None 
					                                                      OpBranchConditional %405 %407 %411 
					                                             %407 = OpLabel 
					                                Private f32* %409 = OpAccessChain %375 %18 
					                                         f32 %410 = OpLoad %409 
					                                                      OpStore %406 %410 
					                                                      OpBranch %408 
					                                             %411 = OpLabel 
					                                Private f32* %412 = OpAccessChain %386 %18 
					                                         f32 %413 = OpLoad %412 
					                                                      OpStore %406 %413 
					                                                      OpBranch %408 
					                                             %408 = OpLabel 
					                                         f32 %414 = OpLoad %406 
					                               Function f32* %415 = OpAccessChain %402 %18 
					                                                      OpStore %415 %414 
					                               Private bool* %416 = OpAccessChain %397 %24 
					                                        bool %417 = OpLoad %416 
					                                                      OpSelectionMerge %420 None 
					                                                      OpBranchConditional %417 %419 %423 
					                                             %419 = OpLabel 
					                                Private f32* %421 = OpAccessChain %375 %24 
					                                         f32 %422 = OpLoad %421 
					                                                      OpStore %418 %422 
					                                                      OpBranch %420 
					                                             %423 = OpLabel 
					                                Private f32* %424 = OpAccessChain %386 %24 
					                                         f32 %425 = OpLoad %424 
					                                                      OpStore %418 %425 
					                                                      OpBranch %420 
					                                             %420 = OpLabel 
					                                         f32 %426 = OpLoad %418 
					                               Function f32* %427 = OpAccessChain %402 %24 
					                                                      OpStore %427 %426 
					                               Private bool* %428 = OpAccessChain %397 %29 
					                                        bool %429 = OpLoad %428 
					                                                      OpSelectionMerge %432 None 
					                                                      OpBranchConditional %429 %431 %435 
					                                             %431 = OpLabel 
					                                Private f32* %433 = OpAccessChain %375 %29 
					                                         f32 %434 = OpLoad %433 
					                                                      OpStore %430 %434 
					                                                      OpBranch %432 
					                                             %435 = OpLabel 
					                                Private f32* %436 = OpAccessChain %386 %29 
					                                         f32 %437 = OpLoad %436 
					                                                      OpStore %430 %437 
					                                                      OpBranch %432 
					                                             %432 = OpLabel 
					                                         f32 %438 = OpLoad %430 
					                               Function f32* %439 = OpAccessChain %402 %29 
					                                                      OpStore %439 %438 
					                                       f32_3 %440 = OpLoad %402 
					                                                      OpStore %375 %440 
					                                Private f32* %441 = OpAccessChain %375 %24 
					                                         f32 %442 = OpLoad %441 
					                                Private f32* %443 = OpAccessChain %375 %18 
					                                         f32 %444 = OpLoad %443 
					                                         f32 %445 = OpExtInst %1 37 %442 %444 
					                                                      OpStore %362 %445 
					                                Private f32* %446 = OpAccessChain %375 %29 
					                                         f32 %447 = OpLoad %446 
					                                         f32 %448 = OpLoad %362 
					                                         f32 %449 = OpExtInst %1 37 %447 %448 
					                                                      OpStore %362 %449 
					                                       f32_3 %450 = OpLoad %9 
					                              Uniform f32_4* %451 = OpAccessChain %36 %355 
					                                       f32_4 %452 = OpLoad %451 
					                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
					                                       f32_3 %454 = OpFNegate %453 
					                                       f32_3 %455 = OpFAdd %450 %454 
					                                                      OpStore %9 %455 
					                                       f32_3 %456 = OpLoad %218 
					                                         f32 %457 = OpLoad %362 
					                                       f32_3 %458 = OpCompositeConstruct %457 %457 %457 
					                                       f32_3 %459 = OpFMul %456 %458 
					                                       f32_3 %460 = OpLoad %9 
					                                       f32_3 %461 = OpFAdd %459 %460 
					                                       f32_4 %462 = OpLoad %134 
					                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
					                                                      OpStore %134 %463 
					                                                      OpBranch %361 
					                                             %361 = OpLabel 
					                       read_only TextureCube %465 = OpLoad %464 
					                                     sampler %466 = OpLoad %313 
					                read_only TextureCubeSampled %467 = OpSampledImage %465 %466 
					                                       f32_4 %468 = OpLoad %134 
					                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
					                                       f32_4 %470 = OpImageSampleExplicitLod %467 %469 Lod %10 
					                                                      OpStore %134 %470 
					                                Private f32* %471 = OpAccessChain %134 %14 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFAdd %472 %105 
					                                Private f32* %474 = OpAccessChain %9 %18 
					                                                      OpStore %474 %473 
					                                Uniform f32* %476 = OpAccessChain %36 %475 %14 
					                                         f32 %477 = OpLoad %476 
					                                Private f32* %478 = OpAccessChain %9 %18 
					                                         f32 %479 = OpLoad %478 
					                                         f32 %480 = OpFMul %477 %479 
					                                         f32 %481 = OpFAdd %480 %117 
					                                Private f32* %482 = OpAccessChain %9 %18 
					                                                      OpStore %482 %481 
					                                Private f32* %483 = OpAccessChain %9 %18 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpExtInst %1 30 %484 
					                                Private f32* %486 = OpAccessChain %9 %18 
					                                                      OpStore %486 %485 
					                                Private f32* %487 = OpAccessChain %9 %18 
					                                         f32 %488 = OpLoad %487 
					                                Uniform f32* %489 = OpAccessChain %36 %475 %24 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFMul %488 %490 
					                                Private f32* %492 = OpAccessChain %9 %18 
					                                                      OpStore %492 %491 
					                                Private f32* %493 = OpAccessChain %9 %18 
					                                         f32 %494 = OpLoad %493 
					                                         f32 %495 = OpExtInst %1 29 %494 
					                                Private f32* %496 = OpAccessChain %9 %18 
					                                                      OpStore %496 %495 
					                                Private f32* %497 = OpAccessChain %9 %18 
					                                         f32 %498 = OpLoad %497 
					                                Uniform f32* %499 = OpAccessChain %36 %475 %18 
					                                         f32 %500 = OpLoad %499 
					                                         f32 %501 = OpFMul %498 %500 
					                                Private f32* %502 = OpAccessChain %9 %18 
					                                                      OpStore %502 %501 
					                                       f32_4 %503 = OpLoad %134 
					                                       f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
					                                       f32_3 %505 = OpLoad %9 
					                                       f32_3 %506 = OpVectorShuffle %505 %505 0 0 0 
					                                       f32_3 %507 = OpFMul %504 %506 
					                                                      OpStore %9 %507 
					                                         f32 %508 = OpLoad %110 
					                                       f32_3 %509 = OpCompositeConstruct %508 %508 %508 
					                                       f32_4 %510 = OpLoad %198 
					                                       f32_3 %511 = OpVectorShuffle %510 %510 0 1 2 
					                                       f32_3 %512 = OpFMul %509 %511 
					                                       f32_3 %513 = OpLoad %9 
					                                       f32_3 %514 = OpFNegate %513 
					                                       f32_3 %515 = OpFAdd %512 %514 
					                                       f32_4 %516 = OpLoad %134 
					                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
					                                                      OpStore %134 %517 
					                              Uniform f32_4* %518 = OpAccessChain %36 %221 
					                                       f32_4 %519 = OpLoad %518 
					                                       f32_3 %520 = OpVectorShuffle %519 %519 3 3 3 
					                                       f32_4 %521 = OpLoad %134 
					                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
					                                       f32_3 %523 = OpFMul %520 %522 
					                                       f32_3 %524 = OpLoad %9 
					                                       f32_3 %525 = OpFAdd %523 %524 
					                                                      OpStore %206 %525 
					                                                      OpBranch %354 
					                                             %354 = OpLabel 
					                                       f32_4 %526 = OpLoad %55 
					                                       f32_3 %527 = OpVectorShuffle %526 %526 0 1 2 
					                                       f32_3 %530 = OpFMul %527 %529 
					                                                      OpStore %9 %530 
					                                       f32_3 %531 = OpLoad %31 
					                                         f32 %532 = OpLoad %43 
					                                       f32_3 %533 = OpCompositeConstruct %532 %532 %532 
					                                       f32_3 %534 = OpFMul %531 %533 
					                              Uniform f32_4* %536 = OpAccessChain %36 %535 
					                                       f32_4 %537 = OpLoad %536 
					                                       f32_3 %538 = OpVectorShuffle %537 %537 0 1 2 
					                                       f32_3 %539 = OpFAdd %534 %538 
					                                                      OpStore %31 %539 
					                                       f32_3 %540 = OpLoad %31 
					                                       f32_3 %541 = OpLoad %31 
					                                         f32 %542 = OpDot %540 %541 
					                                                      OpStore %43 %542 
					                                         f32 %543 = OpLoad %43 
					                                         f32 %545 = OpExtInst %1 40 %543 %544 
					                                                      OpStore %43 %545 
					                                         f32 %546 = OpLoad %43 
					                                         f32 %547 = OpExtInst %1 32 %546 
					                                                      OpStore %43 %547 
					                                         f32 %548 = OpLoad %43 
					                                       f32_3 %549 = OpCompositeConstruct %548 %548 %548 
					                                       f32_3 %550 = OpLoad %31 
					                                       f32_3 %551 = OpFMul %549 %550 
					                                                      OpStore %31 %551 
					                                       f32_3 %552 = OpLoad %85 
					                                       f32_3 %553 = OpLoad %49 
					                                         f32 %554 = OpDot %552 %553 
					                                                      OpStore %43 %554 
					                                       f32_3 %555 = OpLoad %85 
					                              Uniform f32_4* %556 = OpAccessChain %36 %535 
					                                       f32_4 %557 = OpLoad %556 
					                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
					                                         f32 %559 = OpDot %555 %558 
					                                                      OpStore %110 %559 
					                                         f32 %560 = OpLoad %110 
					                                         f32 %561 = OpExtInst %1 43 %560 %182 %117 
					                                                      OpStore %110 %561 
					                              Uniform f32_4* %562 = OpAccessChain %36 %535 
					                                       f32_4 %563 = OpLoad %562 
					                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
					                                       f32_3 %565 = OpLoad %31 
					                                         f32 %566 = OpDot %564 %565 
					                                Private f32* %567 = OpAccessChain %31 %18 
					                                                      OpStore %567 %566 
					                                Private f32* %568 = OpAccessChain %31 %18 
					                                         f32 %569 = OpLoad %568 
					                                         f32 %570 = OpExtInst %1 43 %569 %182 %117 
					                                Private f32* %571 = OpAccessChain %31 %18 
					                                                      OpStore %571 %570 
					                                       f32_3 %573 = OpLoad %31 
					                                       f32_2 %574 = OpVectorShuffle %573 %573 0 0 
					                                       f32_3 %575 = OpLoad %31 
					                                       f32_2 %576 = OpVectorShuffle %575 %575 0 0 
					                                         f32 %577 = OpDot %574 %576 
					                                Private f32* %578 = OpAccessChain %572 %18 
					                                                      OpStore %578 %577 
					                                Private f32* %579 = OpAccessChain %572 %18 
					                                         f32 %580 = OpLoad %579 
					                                         f32 %582 = OpFAdd %580 %581 
					                                Private f32* %583 = OpAccessChain %572 %18 
					                                                      OpStore %583 %582 
					                                         f32 %585 = OpLoad %110 
					                                         f32 %586 = OpFNegate %585 
					                                         f32 %587 = OpFAdd %586 %117 
					                                                      OpStore %584 %587 
					                                         f32 %588 = OpLoad %584 
					                                         f32 %589 = OpLoad %584 
					                                         f32 %590 = OpFMul %588 %589 
					                                Private f32* %591 = OpAccessChain %49 %18 
					                                                      OpStore %591 %590 
					                                Private f32* %592 = OpAccessChain %49 %18 
					                                         f32 %593 = OpLoad %592 
					                                Private f32* %594 = OpAccessChain %49 %18 
					                                         f32 %595 = OpLoad %594 
					                                         f32 %596 = OpFMul %593 %595 
					                                Private f32* %597 = OpAccessChain %49 %18 
					                                                      OpStore %597 %596 
					                                         f32 %598 = OpLoad %584 
					                                Private f32* %599 = OpAccessChain %49 %18 
					                                         f32 %600 = OpLoad %599 
					                                         f32 %601 = OpFMul %598 %600 
					                                                      OpStore %584 %601 
					                                Private f32* %602 = OpAccessChain %572 %18 
					                                         f32 %603 = OpLoad %602 
					                                         f32 %604 = OpLoad %584 
					                                         f32 %605 = OpFMul %603 %604 
					                                         f32 %606 = OpFAdd %605 %117 
					                                                      OpStore %584 %606 
					                                         f32 %607 = OpLoad %43 
					                                         f32 %608 = OpExtInst %1 4 %607 
					                                         f32 %609 = OpFNegate %608 
					                                         f32 %610 = OpFAdd %609 %117 
					                                Private f32* %611 = OpAccessChain %49 %18 
					                                                      OpStore %611 %610 
					                                Private f32* %613 = OpAccessChain %49 %18 
					                                         f32 %614 = OpLoad %613 
					                                Private f32* %615 = OpAccessChain %49 %18 
					                                         f32 %616 = OpLoad %615 
					                                         f32 %617 = OpFMul %614 %616 
					                                Private f32* %618 = OpAccessChain %612 %18 
					                                                      OpStore %618 %617 
					                                Private f32* %619 = OpAccessChain %612 %18 
					                                         f32 %620 = OpLoad %619 
					                                Private f32* %621 = OpAccessChain %612 %18 
					                                         f32 %622 = OpLoad %621 
					                                         f32 %623 = OpFMul %620 %622 
					                                Private f32* %624 = OpAccessChain %612 %18 
					                                                      OpStore %624 %623 
					                                Private f32* %625 = OpAccessChain %49 %18 
					                                         f32 %626 = OpLoad %625 
					                                Private f32* %627 = OpAccessChain %612 %18 
					                                         f32 %628 = OpLoad %627 
					                                         f32 %629 = OpFMul %626 %628 
					                                Private f32* %630 = OpAccessChain %49 %18 
					                                                      OpStore %630 %629 
					                                Private f32* %631 = OpAccessChain %572 %18 
					                                         f32 %632 = OpLoad %631 
					                                Private f32* %633 = OpAccessChain %49 %18 
					                                         f32 %634 = OpLoad %633 
					                                         f32 %635 = OpFMul %632 %634 
					                                         f32 %636 = OpFAdd %635 %117 
					                                Private f32* %637 = OpAccessChain %572 %18 
					                                                      OpStore %637 %636 
					                                Private f32* %638 = OpAccessChain %572 %18 
					                                         f32 %639 = OpLoad %638 
					                                         f32 %640 = OpLoad %584 
					                                         f32 %641 = OpFMul %639 %640 
					                                Private f32* %642 = OpAccessChain %572 %18 
					                                                      OpStore %642 %641 
					                                         f32 %643 = OpLoad %110 
					                                Private f32* %644 = OpAccessChain %572 %18 
					                                         f32 %645 = OpLoad %644 
					                                         f32 %646 = OpFMul %643 %645 
					                                Private f32* %647 = OpAccessChain %572 %18 
					                                                      OpStore %647 %646 
					                                         f32 %648 = OpLoad %43 
					                                         f32 %649 = OpExtInst %1 4 %648 
					                                         f32 %650 = OpLoad %110 
					                                         f32 %651 = OpFAdd %649 %650 
					                                                      OpStore %43 %651 
					                                         f32 %652 = OpLoad %43 
					                                         f32 %654 = OpFAdd %652 %653 
					                                                      OpStore %43 %654 
					                                         f32 %656 = OpLoad %43 
					                                         f32 %657 = OpFDiv %655 %656 
					                                                      OpStore %43 %657 
					                                         f32 %658 = OpLoad %110 
					                                         f32 %659 = OpLoad %43 
					                                         f32 %660 = OpFMul %658 %659 
					                                                      OpStore %43 %660 
					                                         f32 %661 = OpLoad %43 
					                                         f32 %663 = OpFMul %661 %662 
					                                                      OpStore %43 %663 
					                                       f32_3 %664 = OpLoad %572 
					                                       f32_3 %665 = OpVectorShuffle %664 %664 0 0 0 
					                              Uniform f32_4* %667 = OpAccessChain %36 %666 
					                                       f32_4 %668 = OpLoad %667 
					                                       f32_3 %669 = OpVectorShuffle %668 %668 0 1 2 
					                                       f32_3 %670 = OpFMul %665 %669 
					                                                      OpStore %572 %670 
					                                         f32 %671 = OpLoad %43 
					                                       f32_3 %672 = OpCompositeConstruct %671 %671 %671 
					                              Uniform f32_4* %673 = OpAccessChain %36 %666 
					                                       f32_4 %674 = OpLoad %673 
					                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 2 
					                                       f32_3 %676 = OpFMul %672 %675 
					                                                      OpStore %612 %676 
					                                Private f32* %677 = OpAccessChain %31 %18 
					                                         f32 %678 = OpLoad %677 
					                                         f32 %679 = OpFNegate %678 
					                                         f32 %680 = OpFAdd %679 %117 
					                                                      OpStore %43 %680 
					                                         f32 %681 = OpLoad %43 
					                                         f32 %682 = OpLoad %43 
					                                         f32 %683 = OpFMul %681 %682 
					                                Private f32* %684 = OpAccessChain %31 %18 
					                                                      OpStore %684 %683 
					                                Private f32* %685 = OpAccessChain %31 %18 
					                                         f32 %686 = OpLoad %685 
					                                Private f32* %687 = OpAccessChain %31 %18 
					                                         f32 %688 = OpLoad %687 
					                                         f32 %689 = OpFMul %686 %688 
					                                Private f32* %690 = OpAccessChain %31 %18 
					                                                      OpStore %690 %689 
					                                         f32 %691 = OpLoad %43 
					                                Private f32* %692 = OpAccessChain %31 %18 
					                                         f32 %693 = OpLoad %692 
					                                         f32 %694 = OpFMul %691 %693 
					                                                      OpStore %43 %694 
					                                         f32 %695 = OpLoad %43 
					                                         f32 %696 = OpFMul %695 %528 
					                                         f32 %698 = OpFAdd %696 %697 
					                                                      OpStore %43 %698 
					                                         f32 %699 = OpLoad %43 
					                                       f32_3 %700 = OpCompositeConstruct %699 %699 %699 
					                                       f32_3 %701 = OpLoad %612 
					                                       f32_3 %702 = OpFMul %700 %701 
					                                                      OpStore %612 %702 
					                                       f32_3 %703 = OpLoad %9 
					                                       f32_3 %704 = OpLoad %572 
					                                       f32_3 %705 = OpFMul %703 %704 
					                                       f32_3 %706 = OpLoad %612 
					                                       f32_3 %707 = OpFAdd %705 %706 
					                                                      OpStore %9 %707 
					                                       f32_3 %708 = OpLoad %206 
					                                       f32_3 %710 = OpFMul %708 %709 
					                                                      OpStore %31 %710 
					                                Private f32* %711 = OpAccessChain %49 %18 
					                                         f32 %712 = OpLoad %711 
					                                         f32 %714 = OpFMul %712 %713 
					                                         f32 %715 = OpFAdd %714 %697 
					                                                      OpStore %43 %715 
					                                       f32_3 %716 = OpLoad %31 
					                                         f32 %717 = OpLoad %43 
					                                       f32_3 %718 = OpCompositeConstruct %717 %717 %717 
					                                       f32_3 %719 = OpFMul %716 %718 
					                                       f32_3 %720 = OpLoad %9 
					                                       f32_3 %721 = OpFAdd %719 %720 
					                                       f32_4 %722 = OpLoad %126 
					                                       f32_4 %723 = OpVectorShuffle %722 %721 4 5 6 3 
					                                                      OpStore %126 %723 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_SHBr;
					uniform 	vec4 unity_SHBg;
					uniform 	vec4 unity_SHBb;
					uniform 	vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_SHAr;
					uniform 	vec4 unity_SHAg;
					uniform 	vec4 unity_SHAb;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	vec4 unity_SpecCube1_HDR;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					float u_xlat27;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat2.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat4 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat4.z = sqrt(u_xlat40);
					    SV_Target0.w = u_xlat3.w * vs_COLOR0.w;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat4.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					    u_xlat40 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat40 = u_xlat40 + u_xlat40;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat40)) + (-u_xlat2.xyz);
					    u_xlat4.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat4);
					    u_xlat6.y = dot(unity_SHAg, u_xlat4);
					    u_xlat6.z = dot(unity_SHAb, u_xlat4);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat7.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat40 = min(u_xlat8.z, u_xlat40);
					        u_xlat8.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat5.xyz;
					    }
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, 6.0);
					    u_xlat40 = u_xlat7.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat9.xyz = vec3(u_xlat41) * u_xlat5.xyz;
					            u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat41 = min(u_xlat10.z, u_xlat41);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat41) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, 6.0);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat40) * u_xlat7.xyz + (-u_xlat0.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat39 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat40 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat14.x = u_xlat14.x + -0.5;
					    u_xlat27 = (-u_xlat40) + 1.0;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat14.x * u_xlat27 + 1.0;
					    u_xlat2.x = -abs(u_xlat39) + 1.0;
					    u_xlat15.x = u_xlat2.x * u_xlat2.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat2.x = u_xlat2.x * u_xlat15.x;
					    u_xlat14.x = u_xlat14.x * u_xlat2.x + 1.0;
					    u_xlat14.x = u_xlat14.x * u_xlat27;
					    u_xlat14.x = u_xlat40 * u_xlat14.x;
					    u_xlat39 = abs(u_xlat39) + u_xlat40;
					    u_xlat39 = u_xlat39 + 9.99999975e-06;
					    u_xlat39 = 0.5 / u_xlat39;
					    u_xlat39 = u_xlat39 * 0.999999881;
					    u_xlat39 = u_xlat40 * u_xlat39;
					    u_xlat14.xyz = _LightColor0.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat15.xyz = vec3(u_xlat39) * _LightColor0.xyz;
					    u_xlat39 = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat39 * 0.959999979 + 0.0399999991;
					    u_xlat15.xyz = vec3(u_xlat39) * u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.xyz + u_xlat15.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat39 = u_xlat2.x * 2.23517418e-08 + 0.0399999991;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 327
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %113 %121 %174 %243 %247 %269 %270 %272 %311 %321 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD8 "vs_TEXCOORD8" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpMemberDecorate %19 4 Offset 19 
					                                                      OpMemberDecorate %19 5 Offset 19 
					                                                      OpMemberDecorate %19 6 Offset 19 
					                                                      OpMemberDecorate %19 7 Offset 19 
					                                                      OpMemberDecorate %19 8 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate vs_TEXCOORD0 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate vs_TEXCOORD1 Location 113 
					                                                      OpDecorate %121 Location 121 
					                                                      OpDecorate %174 Location 174 
					                                                      OpDecorate vs_TEXCOORD2 Location 243 
					                                                      OpDecorate vs_TEXCOORD3 Location 247 
					                                                      OpDecorate %269 Location 269 
					                                                      OpDecorate %270 Location 270 
					                                                      OpDecorate vs_TEXCOORD4 Location 272 
					                                                      OpDecorate vs_TEXCOORD5 Location 311 
					                                                      OpDecorate vs_TEXCOORD8 Location 321 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %7 %7 %7 %7 %16 %17 %7 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 4 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %29 = OpConstant 0 
					                                          i32 %37 = OpConstant 2 
					                               Private f32_4* %45 = OpVariable Private 
					                                          i32 %47 = OpConstant 3 
					                                              %51 = OpTypeVector %6 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                         u32 %114 = OpConstant 0 
					                                             %115 = OpTypePointer Private %6 
					                                         u32 %118 = OpConstant 3 
					                                             %119 = OpTypePointer Output %6 
					                                Input f32_4* %121 = OpVariable Input 
					                                         u32 %169 = OpConstant 2 
					                                             %173 = OpTypePointer Input %51 
					                                Input f32_3* %174 = OpVariable Input 
					                                         i32 %176 = OpConstant 5 
					                                             %209 = OpTypePointer Private %51 
					                              Private f32_3* %210 = OpVariable Private 
					                                             %224 = OpTypePointer Input %6 
					                                         i32 %227 = OpConstant 6 
					                                             %228 = OpTypePointer Uniform %6 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                               Output f32_4* %269 = OpVariable Output 
					                                Input f32_4* %270 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
					                                         f32 %273 = OpConstant 3,674022E-40 
					                                       f32_4 %274 = OpConstantComposite %273 %273 %273 %273 
					                                             %310 = OpTypePointer Output %51 
					                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD8 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
					                                        f32_4 %31 = OpLoad %30 
					                                        f32_4 %32 = OpLoad %11 
					                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
					                                        f32_4 %34 = OpFMul %31 %33 
					                                        f32_4 %35 = OpLoad %9 
					                                        f32_4 %36 = OpFAdd %34 %35 
					                                                      OpStore %9 %36 
					                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_4 %40 = OpLoad %11 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
					                                        f32_4 %42 = OpFMul %39 %41 
					                                        f32_4 %43 = OpLoad %9 
					                                        f32_4 %44 = OpFAdd %42 %43 
					                                                      OpStore %9 %44 
					                                        f32_4 %46 = OpLoad %9 
					                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpFAdd %46 %49 
					                                                      OpStore %45 %50 
					                               Uniform f32_4* %52 = OpAccessChain %21 %23 %47 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %45 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %21 %66 %24 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %21 %66 %29 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %45 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %21 %66 %37 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %45 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %21 %66 %47 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %45 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %29 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %21 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %21 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore vs_TEXCOORD0 %112 
					                                Private f32* %116 = OpAccessChain %9 %114 
					                                         f32 %117 = OpLoad %116 
					                                 Output f32* %120 = OpAccessChain vs_TEXCOORD1 %118 
					                                                      OpStore %120 %117 
					                                       f32_4 %122 = OpLoad %121 
					                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
					                              Uniform f32_4* %124 = OpAccessChain %21 %23 %24 
					                                       f32_4 %125 = OpLoad %124 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 1 2 0 
					                                       f32_3 %127 = OpFMul %123 %126 
					                                       f32_4 %128 = OpLoad %45 
					                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
					                                                      OpStore %45 %129 
					                              Uniform f32_4* %130 = OpAccessChain %21 %23 %29 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 1 2 0 
					                                       f32_4 %133 = OpLoad %121 
					                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
					                                       f32_3 %135 = OpFMul %132 %134 
					                                       f32_4 %136 = OpLoad %45 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_3 %138 = OpFAdd %135 %137 
					                                       f32_4 %139 = OpLoad %45 
					                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
					                                                      OpStore %45 %140 
					                              Uniform f32_4* %141 = OpAccessChain %21 %23 %37 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 1 2 0 
					                                       f32_4 %144 = OpLoad %121 
					                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
					                                       f32_3 %146 = OpFMul %143 %145 
					                                       f32_4 %147 = OpLoad %45 
					                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
					                                       f32_3 %149 = OpFAdd %146 %148 
					                                       f32_4 %150 = OpLoad %45 
					                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
					                                                      OpStore %45 %151 
					                                       f32_4 %152 = OpLoad %45 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %45 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                Private f32* %157 = OpAccessChain %9 %114 
					                                                      OpStore %157 %156 
					                                Private f32* %158 = OpAccessChain %9 %114 
					                                         f32 %159 = OpLoad %158 
					                                         f32 %160 = OpExtInst %1 32 %159 
					                                Private f32* %161 = OpAccessChain %9 %114 
					                                                      OpStore %161 %160 
					                                       f32_4 %162 = OpLoad %9 
					                                       f32_3 %163 = OpVectorShuffle %162 %162 0 0 0 
					                                       f32_4 %164 = OpLoad %45 
					                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
					                                       f32_3 %166 = OpFMul %163 %165 
					                                       f32_4 %167 = OpLoad %45 
					                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
					                                                      OpStore %45 %168 
					                                Private f32* %170 = OpAccessChain %45 %169 
					                                         f32 %171 = OpLoad %170 
					                                 Output f32* %172 = OpAccessChain vs_TEXCOORD1 %114 
					                                                      OpStore %172 %171 
					                                       f32_3 %175 = OpLoad %174 
					                              Uniform f32_4* %177 = OpAccessChain %21 %176 %29 
					                                       f32_4 %178 = OpLoad %177 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpDot %175 %179 
					                                Private f32* %181 = OpAccessChain %63 %114 
					                                                      OpStore %181 %180 
					                                       f32_3 %182 = OpLoad %174 
					                              Uniform f32_4* %183 = OpAccessChain %21 %176 %24 
					                                       f32_4 %184 = OpLoad %183 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                         f32 %186 = OpDot %182 %185 
					                                Private f32* %187 = OpAccessChain %63 %84 
					                                                      OpStore %187 %186 
					                                       f32_3 %188 = OpLoad %174 
					                              Uniform f32_4* %189 = OpAccessChain %21 %176 %37 
					                                       f32_4 %190 = OpLoad %189 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                         f32 %192 = OpDot %188 %191 
					                                Private f32* %193 = OpAccessChain %63 %169 
					                                                      OpStore %193 %192 
					                                       f32_4 %194 = OpLoad %63 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                       f32_4 %196 = OpLoad %63 
					                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
					                                         f32 %198 = OpDot %195 %197 
					                                Private f32* %199 = OpAccessChain %9 %114 
					                                                      OpStore %199 %198 
					                                Private f32* %200 = OpAccessChain %9 %114 
					                                         f32 %201 = OpLoad %200 
					                                         f32 %202 = OpExtInst %1 32 %201 
					                                Private f32* %203 = OpAccessChain %9 %114 
					                                                      OpStore %203 %202 
					                                       f32_4 %204 = OpLoad %9 
					                                       f32_4 %205 = OpVectorShuffle %204 %204 0 0 0 0 
					                                       f32_4 %206 = OpLoad %63 
					                                       f32_4 %207 = OpVectorShuffle %206 %206 0 1 2 2 
					                                       f32_4 %208 = OpFMul %205 %207 
					                                                      OpStore %63 %208 
					                                       f32_4 %211 = OpLoad %45 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                       f32_4 %213 = OpLoad %63 
					                                       f32_3 %214 = OpVectorShuffle %213 %213 3 0 1 
					                                       f32_3 %215 = OpFMul %212 %214 
					                                                      OpStore %210 %215 
					                                       f32_4 %216 = OpLoad %63 
					                                       f32_3 %217 = OpVectorShuffle %216 %216 1 3 0 
					                                       f32_4 %218 = OpLoad %45 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 1 2 0 
					                                       f32_3 %220 = OpFMul %217 %219 
					                                       f32_3 %221 = OpLoad %210 
					                                       f32_3 %222 = OpFNegate %221 
					                                       f32_3 %223 = OpFAdd %220 %222 
					                                                      OpStore %210 %223 
					                                  Input f32* %225 = OpAccessChain %121 %118 
					                                         f32 %226 = OpLoad %225 
					                                Uniform f32* %229 = OpAccessChain %21 %227 %118 
					                                         f32 %230 = OpLoad %229 
					                                         f32 %231 = OpFMul %226 %230 
					                                Private f32* %232 = OpAccessChain %9 %114 
					                                                      OpStore %232 %231 
					                                       f32_4 %233 = OpLoad %9 
					                                       f32_3 %234 = OpVectorShuffle %233 %233 0 0 0 
					                                       f32_3 %235 = OpLoad %210 
					                                       f32_3 %236 = OpFMul %234 %235 
					                                                      OpStore %210 %236 
					                                Private f32* %237 = OpAccessChain %210 %114 
					                                         f32 %238 = OpLoad %237 
					                                 Output f32* %239 = OpAccessChain vs_TEXCOORD1 %84 
					                                                      OpStore %239 %238 
					                                Private f32* %240 = OpAccessChain %63 %114 
					                                         f32 %241 = OpLoad %240 
					                                 Output f32* %242 = OpAccessChain vs_TEXCOORD1 %169 
					                                                      OpStore %242 %241 
					                                Private f32* %244 = OpAccessChain %45 %114 
					                                         f32 %245 = OpLoad %244 
					                                 Output f32* %246 = OpAccessChain vs_TEXCOORD2 %114 
					                                                      OpStore %246 %245 
					                                Private f32* %248 = OpAccessChain %45 %84 
					                                         f32 %249 = OpLoad %248 
					                                 Output f32* %250 = OpAccessChain vs_TEXCOORD3 %114 
					                                                      OpStore %250 %249 
					                                Private f32* %251 = OpAccessChain %9 %84 
					                                         f32 %252 = OpLoad %251 
					                                 Output f32* %253 = OpAccessChain vs_TEXCOORD2 %118 
					                                                      OpStore %253 %252 
					                                Private f32* %254 = OpAccessChain %9 %169 
					                                         f32 %255 = OpLoad %254 
					                                 Output f32* %256 = OpAccessChain vs_TEXCOORD3 %118 
					                                                      OpStore %256 %255 
					                                Private f32* %257 = OpAccessChain %210 %84 
					                                         f32 %258 = OpLoad %257 
					                                 Output f32* %259 = OpAccessChain vs_TEXCOORD2 %84 
					                                                      OpStore %259 %258 
					                                Private f32* %260 = OpAccessChain %210 %169 
					                                         f32 %261 = OpLoad %260 
					                                 Output f32* %262 = OpAccessChain vs_TEXCOORD3 %84 
					                                                      OpStore %262 %261 
					                                Private f32* %263 = OpAccessChain %63 %84 
					                                         f32 %264 = OpLoad %263 
					                                 Output f32* %265 = OpAccessChain vs_TEXCOORD2 %169 
					                                                      OpStore %265 %264 
					                                Private f32* %266 = OpAccessChain %63 %118 
					                                         f32 %267 = OpLoad %266 
					                                 Output f32* %268 = OpAccessChain vs_TEXCOORD3 %169 
					                                                      OpStore %268 %267 
					                                       f32_4 %271 = OpLoad %270 
					                                                      OpStore %269 %271 
					                                                      OpStore vs_TEXCOORD4 %274 
					                                Private f32* %275 = OpAccessChain %63 %84 
					                                         f32 %276 = OpLoad %275 
					                                Private f32* %277 = OpAccessChain %63 %84 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpFMul %276 %278 
					                                Private f32* %280 = OpAccessChain %9 %114 
					                                                      OpStore %280 %279 
					                                Private f32* %281 = OpAccessChain %63 %114 
					                                         f32 %282 = OpLoad %281 
					                                Private f32* %283 = OpAccessChain %63 %114 
					                                         f32 %284 = OpLoad %283 
					                                         f32 %285 = OpFMul %282 %284 
					                                Private f32* %286 = OpAccessChain %9 %114 
					                                         f32 %287 = OpLoad %286 
					                                         f32 %288 = OpFNegate %287 
					                                         f32 %289 = OpFAdd %285 %288 
					                                Private f32* %290 = OpAccessChain %9 %114 
					                                                      OpStore %290 %289 
					                                       f32_4 %291 = OpLoad %63 
					                                       f32_4 %292 = OpVectorShuffle %291 %291 1 3 2 0 
					                                       f32_4 %293 = OpLoad %63 
					                                       f32_4 %294 = OpFMul %292 %293 
					                                                      OpStore %45 %294 
					                              Uniform f32_4* %295 = OpAccessChain %21 %29 
					                                       f32_4 %296 = OpLoad %295 
					                                       f32_4 %297 = OpLoad %45 
					                                         f32 %298 = OpDot %296 %297 
					                                Private f32* %299 = OpAccessChain %63 %114 
					                                                      OpStore %299 %298 
					                              Uniform f32_4* %300 = OpAccessChain %21 %24 
					                                       f32_4 %301 = OpLoad %300 
					                                       f32_4 %302 = OpLoad %45 
					                                         f32 %303 = OpDot %301 %302 
					                                Private f32* %304 = OpAccessChain %63 %84 
					                                                      OpStore %304 %303 
					                              Uniform f32_4* %305 = OpAccessChain %21 %37 
					                                       f32_4 %306 = OpLoad %305 
					                                       f32_4 %307 = OpLoad %45 
					                                         f32 %308 = OpDot %306 %307 
					                                Private f32* %309 = OpAccessChain %63 %169 
					                                                      OpStore %309 %308 
					                              Uniform f32_4* %312 = OpAccessChain %21 %47 
					                                       f32_4 %313 = OpLoad %312 
					                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
					                                       f32_4 %315 = OpLoad %9 
					                                       f32_3 %316 = OpVectorShuffle %315 %315 0 0 0 
					                                       f32_3 %317 = OpFMul %314 %316 
					                                       f32_4 %318 = OpLoad %63 
					                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
					                                       f32_3 %320 = OpFAdd %317 %319 
					                                                      OpStore vs_TEXCOORD5 %320 
					                                                      OpStore vs_TEXCOORD8 %274 
					                                 Output f32* %322 = OpAccessChain %88 %29 %84 
					                                         f32 %323 = OpLoad %322 
					                                         f32 %324 = OpFNegate %323 
					                                 Output f32* %325 = OpAccessChain %88 %29 %84 
					                                                      OpStore %325 %324 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 766
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %68 %79 %128 %210 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpDecorate vs_TEXCOORD1 Location 12 
					                                                      OpDecorate vs_TEXCOORD2 Location 21 
					                                                      OpDecorate vs_TEXCOORD3 Location 26 
					                                                      OpMemberDecorate %34 0 Offset 34 
					                                                      OpMemberDecorate %34 1 Offset 34 
					                                                      OpMemberDecorate %34 2 Offset 34 
					                                                      OpMemberDecorate %34 3 Offset 34 
					                                                      OpMemberDecorate %34 4 Offset 34 
					                                                      OpMemberDecorate %34 5 Offset 34 
					                                                      OpMemberDecorate %34 6 Offset 34 
					                                                      OpMemberDecorate %34 7 Offset 34 
					                                                      OpMemberDecorate %34 8 Offset 34 
					                                                      OpMemberDecorate %34 9 Offset 34 
					                                                      OpMemberDecorate %34 10 Offset 34 
					                                                      OpMemberDecorate %34 11 Offset 34 
					                                                      OpMemberDecorate %34 12 Offset 34 
					                                                      OpMemberDecorate %34 13 Offset 34 
					                                                      OpMemberDecorate %34 14 Offset 34 
					                                                      OpDecorate %34 Block 
					                                                      OpDecorate %36 DescriptorSet 36 
					                                                      OpDecorate %36 Binding 36 
					                                                      OpDecorate %58 DescriptorSet 58 
					                                                      OpDecorate %58 Binding 58 
					                                                      OpDecorate %62 DescriptorSet 62 
					                                                      OpDecorate %62 Binding 62 
					                                                      OpDecorate vs_TEXCOORD0 Location 68 
					                                                      OpDecorate %79 Location 79 
					                                                      OpDecorate %86 DescriptorSet 86 
					                                                      OpDecorate %86 Binding 86 
					                                                      OpDecorate %88 DescriptorSet 88 
					                                                      OpDecorate %88 Binding 88 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate vs_TEXCOORD5 Location 210 
					                                                      OpDecorate %348 DescriptorSet 348 
					                                                      OpDecorate %348 Binding 348 
					                                                      OpDecorate %350 DescriptorSet 350 
					                                                      OpDecorate %350 Binding 350 
					                                                      OpDecorate %501 DescriptorSet 501 
					                                                      OpDecorate %501 Binding 501 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                              %13 = OpTypeInt 32 0 
					                                          u32 %14 = OpConstant 3 
					                                              %15 = OpTypePointer Input %6 
					                                          u32 %18 = OpConstant 0 
					                                              %19 = OpTypePointer Private %6 
					                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %24 = OpConstant 1 
					                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                          u32 %29 = OpConstant 2 
					                               Private f32_3* %31 = OpVariable Private 
					                                              %34 = OpTypeStruct %7 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
					                                              %35 = OpTypePointer Uniform %34 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %36 = OpVariable Uniform 
					                                              %37 = OpTypeInt 32 1 
					                                          i32 %38 = OpConstant 0 
					                                              %39 = OpTypePointer Uniform %7 
					                                 Private f32* %43 = OpVariable Private 
					                               Private f32_3* %49 = OpVariable Private 
					                                              %54 = OpTypePointer Private %10 
					                               Private f32_4* %55 = OpVariable Private 
					                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %57 = OpTypePointer UniformConstant %56 
					         UniformConstant read_only Texture2D* %58 = OpVariable UniformConstant 
					                                              %60 = OpTypeSampler 
					                                              %61 = OpTypePointer UniformConstant %60 
					                     UniformConstant sampler* %62 = OpVariable UniformConstant 
					                                              %64 = OpTypeSampledImage %56 
					                                              %66 = OpTypeVector %6 2 
					                                              %67 = OpTypePointer Input %66 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                          i32 %72 = OpConstant 14 
					                                              %73 = OpTypePointer Uniform %10 
					                                 Input f32_4* %79 = OpVariable Input 
					                               Private f32_4* %85 = OpVariable Private 
					         UniformConstant read_only Texture2D* %86 = OpVariable UniformConstant 
					                     UniformConstant sampler* %88 = OpVariable UniformConstant 
					                                         f32 %104 = OpConstant 3,674022E-40 
					                                       f32_2 %105 = OpConstantComposite %104 %104 
					                                         f32 %107 = OpConstant 3,674022E-40 
					                                       f32_2 %108 = OpConstantComposite %107 %107 
					                                Private f32* %112 = OpVariable Private 
					                                         f32 %119 = OpConstant 3,674022E-40 
					                                             %127 = OpTypePointer Output %10 
					                               Output f32_4* %128 = OpVariable Output 
					                                             %134 = OpTypePointer Output %6 
					                              Private f32_4* %136 = OpVariable Private 
					                              Private f32_3* %189 = OpVariable Private 
					                                         i32 %190 = OpConstant 2 
					                                         i32 %196 = OpConstant 3 
					                                         i32 %202 = OpConstant 4 
					                                             %209 = OpTypePointer Input %7 
					                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
					                                         f32 %214 = OpConstant 3,674022E-40 
					                                       f32_3 %215 = OpConstantComposite %214 %214 %214 
					                                             %217 = OpTypeBool 
					                                             %218 = OpTypePointer Private %217 
					                               Private bool* %219 = OpVariable Private 
					                                         i32 %220 = OpConstant 7 
					                                             %221 = OpTypePointer Uniform %6 
					                              Private f32_4* %235 = OpVariable Private 
					                              Private f32_3* %243 = OpVariable Private 
					                                         i32 %246 = OpConstant 5 
					                              Private f32_3* %255 = OpVariable Private 
					                                         i32 %258 = OpConstant 6 
					                                             %267 = OpTypeVector %217 3 
					                                             %268 = OpTypePointer Private %267 
					                             Private bool_3* %269 = OpVariable Private 
					                                       f32_4 %270 = OpConstantComposite %214 %214 %214 %214 
					                                             %273 = OpTypeVector %217 4 
					                                             %276 = OpTypePointer Function %7 
					                                             %281 = OpTypePointer Function %6 
					                                             %346 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %347 = OpTypePointer UniformConstant %346 
					      UniformConstant read_only TextureCube* %348 = OpVariable UniformConstant 
					                    UniformConstant sampler* %350 = OpVariable UniformConstant 
					                                             %352 = OpTypeSampledImage %346 
					                                         f32 %356 = OpConstant 3,674022E-40 
					                                         i32 %361 = OpConstant 8 
					                               Private bool* %384 = OpVariable Private 
					                                         f32 %387 = OpConstant 3,674022E-40 
					                                         i32 %392 = OpConstant 11 
					                                Private f32* %399 = OpVariable Private 
					                              Private f32_3* %412 = OpVariable Private 
					                                         i32 %415 = OpConstant 9 
					                              Private f32_3* %423 = OpVariable Private 
					                                         i32 %426 = OpConstant 10 
					                             Private bool_3* %434 = OpVariable Private 
					      UniformConstant read_only TextureCube* %501 = OpVariable UniformConstant 
					                                         i32 %512 = OpConstant 12 
					                                         f32 %565 = OpConstant 3,674022E-40 
					                                       f32_3 %566 = OpConstantComposite %565 %565 %565 
					                                         i32 %572 = OpConstant 1 
					                                         f32 %581 = OpConstant 3,674022E-40 
					                              Private f32_3* %611 = OpVariable Private 
					                                         f32 %620 = OpConstant 3,674022E-40 
					                                Private f32* %623 = OpVariable Private 
					                              Private f32_3* %651 = OpVariable Private 
					                                         f32 %692 = OpConstant 3,674022E-40 
					                                         f32 %694 = OpConstant 3,674022E-40 
					                                         f32 %701 = OpConstant 3,674022E-40 
					                                         i32 %703 = OpConstant 13 
					                                         f32 %738 = OpConstant 3,674022E-40 
					                                       f32_3 %750 = OpConstantComposite %694 %694 %694 
					                                         f32 %754 = OpConstant 3,674022E-40 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %277 = OpVariable Function 
					                               Function f32* %282 = OpVariable Function 
					                               Function f32* %294 = OpVariable Function 
					                               Function f32* %306 = OpVariable Function 
					                             Function f32_3* %439 = OpVariable Function 
					                               Function f32* %443 = OpVariable Function 
					                               Function f32* %455 = OpVariable Function 
					                               Function f32* %467 = OpVariable Function 
					                                   Input f32* %16 = OpAccessChain vs_TEXCOORD1 %14 
					                                          f32 %17 = OpLoad %16 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %17 
					                                   Input f32* %22 = OpAccessChain vs_TEXCOORD2 %14 
					                                          f32 %23 = OpLoad %22 
					                                 Private f32* %25 = OpAccessChain %9 %24 
					                                                      OpStore %25 %23 
					                                   Input f32* %27 = OpAccessChain vs_TEXCOORD3 %14 
					                                          f32 %28 = OpLoad %27 
					                                 Private f32* %30 = OpAccessChain %9 %29 
					                                                      OpStore %30 %28 
					                                        f32_3 %32 = OpLoad %9 
					                                        f32_3 %33 = OpFNegate %32 
					                               Uniform f32_3* %40 = OpAccessChain %36 %38 
					                                        f32_3 %41 = OpLoad %40 
					                                        f32_3 %42 = OpFAdd %33 %41 
					                                                      OpStore %31 %42 
					                                        f32_3 %44 = OpLoad %31 
					                                        f32_3 %45 = OpLoad %31 
					                                          f32 %46 = OpDot %44 %45 
					                                                      OpStore %43 %46 
					                                          f32 %47 = OpLoad %43 
					                                          f32 %48 = OpExtInst %1 32 %47 
					                                                      OpStore %43 %48 
					                                          f32 %50 = OpLoad %43 
					                                        f32_3 %51 = OpCompositeConstruct %50 %50 %50 
					                                        f32_3 %52 = OpLoad %31 
					                                        f32_3 %53 = OpFMul %51 %52 
					                                                      OpStore %49 %53 
					                          read_only Texture2D %59 = OpLoad %58 
					                                      sampler %63 = OpLoad %62 
					                   read_only Texture2DSampled %65 = OpSampledImage %59 %63 
					                                        f32_2 %69 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %70 = OpImageSampleImplicitLod %65 %69 
					                                                      OpStore %55 %70 
					                                        f32_4 %71 = OpLoad %55 
					                               Uniform f32_4* %74 = OpAccessChain %36 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpFMul %71 %75 
					                                                      OpStore %55 %76 
					                                        f32_4 %77 = OpLoad %55 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %78 %81 
					                                        f32_4 %83 = OpLoad %55 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %55 %84 
					                          read_only Texture2D %87 = OpLoad %86 
					                                      sampler %89 = OpLoad %88 
					                   read_only Texture2DSampled %90 = OpSampledImage %87 %89 
					                                        f32_2 %91 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %92 = OpImageSampleImplicitLod %90 %91 
					                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 3 
					                                        f32_4 %94 = OpLoad %85 
					                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
					                                                      OpStore %85 %95 
					                                 Private f32* %96 = OpAccessChain %85 %29 
					                                          f32 %97 = OpLoad %96 
					                                 Private f32* %98 = OpAccessChain %85 %18 
					                                          f32 %99 = OpLoad %98 
					                                         f32 %100 = OpFMul %97 %99 
					                                Private f32* %101 = OpAccessChain %85 %18 
					                                                      OpStore %101 %100 
					                                       f32_4 %102 = OpLoad %85 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %106 = OpFMul %103 %105 
					                                       f32_2 %109 = OpFAdd %106 %108 
					                                       f32_4 %110 = OpLoad %85 
					                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
					                                                      OpStore %85 %111 
					                                       f32_4 %113 = OpLoad %85 
					                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
					                                       f32_4 %115 = OpLoad %85 
					                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
					                                         f32 %117 = OpDot %114 %116 
					                                                      OpStore %112 %117 
					                                         f32 %118 = OpLoad %112 
					                                         f32 %120 = OpExtInst %1 37 %118 %119 
					                                                      OpStore %112 %120 
					                                         f32 %121 = OpLoad %112 
					                                         f32 %122 = OpFNegate %121 
					                                         f32 %123 = OpFAdd %122 %119 
					                                                      OpStore %112 %123 
					                                         f32 %124 = OpLoad %112 
					                                         f32 %125 = OpExtInst %1 31 %124 
					                                Private f32* %126 = OpAccessChain %85 %29 
					                                                      OpStore %126 %125 
					                                Private f32* %129 = OpAccessChain %55 %14 
					                                         f32 %130 = OpLoad %129 
					                                  Input f32* %131 = OpAccessChain %79 %14 
					                                         f32 %132 = OpLoad %131 
					                                         f32 %133 = OpFMul %130 %132 
					                                 Output f32* %135 = OpAccessChain %128 %14 
					                                                      OpStore %135 %133 
					                                       f32_4 %137 = OpLoad vs_TEXCOORD1 
					                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
					                                       f32_4 %139 = OpLoad %85 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                         f32 %141 = OpDot %138 %140 
					                                Private f32* %142 = OpAccessChain %136 %18 
					                                                      OpStore %142 %141 
					                                       f32_4 %143 = OpLoad vs_TEXCOORD2 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
					                                       f32_4 %145 = OpLoad %85 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                         f32 %147 = OpDot %144 %146 
					                                Private f32* %148 = OpAccessChain %136 %24 
					                                                      OpStore %148 %147 
					                                       f32_4 %149 = OpLoad vs_TEXCOORD3 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_4 %151 = OpLoad %85 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
					                                         f32 %153 = OpDot %150 %152 
					                                Private f32* %154 = OpAccessChain %136 %29 
					                                                      OpStore %154 %153 
					                                       f32_4 %155 = OpLoad %136 
					                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
					                                       f32_4 %157 = OpLoad %136 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                         f32 %159 = OpDot %156 %158 
					                                                      OpStore %112 %159 
					                                         f32 %160 = OpLoad %112 
					                                         f32 %161 = OpExtInst %1 32 %160 
					                                                      OpStore %112 %161 
					                                         f32 %162 = OpLoad %112 
					                                       f32_3 %163 = OpCompositeConstruct %162 %162 %162 
					                                       f32_4 %164 = OpLoad %136 
					                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
					                                       f32_3 %166 = OpFMul %163 %165 
					                                       f32_4 %167 = OpLoad %85 
					                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
					                                                      OpStore %85 %168 
					                                       f32_3 %169 = OpLoad %49 
					                                       f32_3 %170 = OpFNegate %169 
					                                       f32_4 %171 = OpLoad %85 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %170 %172 
					                                                      OpStore %112 %173 
					                                         f32 %174 = OpLoad %112 
					                                         f32 %175 = OpLoad %112 
					                                         f32 %176 = OpFAdd %174 %175 
					                                                      OpStore %112 %176 
					                                       f32_4 %177 = OpLoad %85 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpLoad %112 
					                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
					                                       f32_3 %181 = OpFNegate %180 
					                                       f32_3 %182 = OpFMul %178 %181 
					                                       f32_3 %183 = OpLoad %49 
					                                       f32_3 %184 = OpFNegate %183 
					                                       f32_3 %185 = OpFAdd %182 %184 
					                                       f32_4 %186 = OpLoad %136 
					                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
					                                                      OpStore %136 %187 
					                                Private f32* %188 = OpAccessChain %85 %14 
					                                                      OpStore %188 %119 
					                              Uniform f32_4* %191 = OpAccessChain %36 %190 
					                                       f32_4 %192 = OpLoad %191 
					                                       f32_4 %193 = OpLoad %85 
					                                         f32 %194 = OpDot %192 %193 
					                                Private f32* %195 = OpAccessChain %189 %18 
					                                                      OpStore %195 %194 
					                              Uniform f32_4* %197 = OpAccessChain %36 %196 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_4 %199 = OpLoad %85 
					                                         f32 %200 = OpDot %198 %199 
					                                Private f32* %201 = OpAccessChain %189 %24 
					                                                      OpStore %201 %200 
					                              Uniform f32_4* %203 = OpAccessChain %36 %202 
					                                       f32_4 %204 = OpLoad %203 
					                                       f32_4 %205 = OpLoad %85 
					                                         f32 %206 = OpDot %204 %205 
					                                Private f32* %207 = OpAccessChain %189 %29 
					                                                      OpStore %207 %206 
					                                       f32_3 %208 = OpLoad %189 
					                                       f32_3 %211 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %212 = OpFAdd %208 %211 
					                                                      OpStore %189 %212 
					                                       f32_3 %213 = OpLoad %189 
					                                       f32_3 %216 = OpExtInst %1 40 %213 %215 
					                                                      OpStore %189 %216 
					                                Uniform f32* %222 = OpAccessChain %36 %220 %14 
					                                         f32 %223 = OpLoad %222 
					                                        bool %224 = OpFOrdLessThan %214 %223 
					                                                      OpStore %219 %224 
					                                        bool %225 = OpLoad %219 
					                                                      OpSelectionMerge %227 None 
					                                                      OpBranchConditional %225 %226 %341 
					                                             %226 = OpLabel 
					                                       f32_4 %228 = OpLoad %136 
					                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
					                                       f32_4 %230 = OpLoad %136 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                         f32 %232 = OpDot %229 %231 
					                                                      OpStore %112 %232 
					                                         f32 %233 = OpLoad %112 
					                                         f32 %234 = OpExtInst %1 32 %233 
					                                                      OpStore %112 %234 
					                                         f32 %236 = OpLoad %112 
					                                       f32_3 %237 = OpCompositeConstruct %236 %236 %236 
					                                       f32_4 %238 = OpLoad %136 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                       f32_3 %240 = OpFMul %237 %239 
					                                       f32_4 %241 = OpLoad %235 
					                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
					                                                      OpStore %235 %242 
					                                       f32_3 %244 = OpLoad %9 
					                                       f32_3 %245 = OpFNegate %244 
					                              Uniform f32_4* %247 = OpAccessChain %36 %246 
					                                       f32_4 %248 = OpLoad %247 
					                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
					                                       f32_3 %250 = OpFAdd %245 %249 
					                                                      OpStore %243 %250 
					                                       f32_3 %251 = OpLoad %243 
					                                       f32_4 %252 = OpLoad %235 
					                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
					                                       f32_3 %254 = OpFDiv %251 %253 
					                                                      OpStore %243 %254 
					                                       f32_3 %256 = OpLoad %9 
					                                       f32_3 %257 = OpFNegate %256 
					                              Uniform f32_4* %259 = OpAccessChain %36 %258 
					                                       f32_4 %260 = OpLoad %259 
					                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
					                                       f32_3 %262 = OpFAdd %257 %261 
					                                                      OpStore %255 %262 
					                                       f32_3 %263 = OpLoad %255 
					                                       f32_4 %264 = OpLoad %235 
					                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
					                                       f32_3 %266 = OpFDiv %263 %265 
					                                                      OpStore %255 %266 
					                                       f32_4 %271 = OpLoad %235 
					                                       f32_4 %272 = OpVectorShuffle %271 %271 0 1 2 0 
					                                      bool_4 %274 = OpFOrdLessThan %270 %272 
					                                      bool_3 %275 = OpVectorShuffle %274 %274 0 1 2 
					                                                      OpStore %269 %275 
					                                       f32_3 %278 = OpLoad %243 
					                                                      OpStore %277 %278 
					                               Private bool* %279 = OpAccessChain %269 %18 
					                                        bool %280 = OpLoad %279 
					                                                      OpSelectionMerge %284 None 
					                                                      OpBranchConditional %280 %283 %287 
					                                             %283 = OpLabel 
					                                Private f32* %285 = OpAccessChain %243 %18 
					                                         f32 %286 = OpLoad %285 
					                                                      OpStore %282 %286 
					                                                      OpBranch %284 
					                                             %287 = OpLabel 
					                                Private f32* %288 = OpAccessChain %255 %18 
					                                         f32 %289 = OpLoad %288 
					                                                      OpStore %282 %289 
					                                                      OpBranch %284 
					                                             %284 = OpLabel 
					                                         f32 %290 = OpLoad %282 
					                               Function f32* %291 = OpAccessChain %277 %18 
					                                                      OpStore %291 %290 
					                               Private bool* %292 = OpAccessChain %269 %24 
					                                        bool %293 = OpLoad %292 
					                                                      OpSelectionMerge %296 None 
					                                                      OpBranchConditional %293 %295 %299 
					                                             %295 = OpLabel 
					                                Private f32* %297 = OpAccessChain %243 %24 
					                                         f32 %298 = OpLoad %297 
					                                                      OpStore %294 %298 
					                                                      OpBranch %296 
					                                             %299 = OpLabel 
					                                Private f32* %300 = OpAccessChain %255 %24 
					                                         f32 %301 = OpLoad %300 
					                                                      OpStore %294 %301 
					                                                      OpBranch %296 
					                                             %296 = OpLabel 
					                                         f32 %302 = OpLoad %294 
					                               Function f32* %303 = OpAccessChain %277 %24 
					                                                      OpStore %303 %302 
					                               Private bool* %304 = OpAccessChain %269 %29 
					                                        bool %305 = OpLoad %304 
					                                                      OpSelectionMerge %308 None 
					                                                      OpBranchConditional %305 %307 %311 
					                                             %307 = OpLabel 
					                                Private f32* %309 = OpAccessChain %243 %29 
					                                         f32 %310 = OpLoad %309 
					                                                      OpStore %306 %310 
					                                                      OpBranch %308 
					                                             %311 = OpLabel 
					                                Private f32* %312 = OpAccessChain %255 %29 
					                                         f32 %313 = OpLoad %312 
					                                                      OpStore %306 %313 
					                                                      OpBranch %308 
					                                             %308 = OpLabel 
					                                         f32 %314 = OpLoad %306 
					                               Function f32* %315 = OpAccessChain %277 %29 
					                                                      OpStore %315 %314 
					                                       f32_3 %316 = OpLoad %277 
					                                                      OpStore %243 %316 
					                                Private f32* %317 = OpAccessChain %243 %24 
					                                         f32 %318 = OpLoad %317 
					                                Private f32* %319 = OpAccessChain %243 %18 
					                                         f32 %320 = OpLoad %319 
					                                         f32 %321 = OpExtInst %1 37 %318 %320 
					                                                      OpStore %112 %321 
					                                Private f32* %322 = OpAccessChain %243 %29 
					                                         f32 %323 = OpLoad %322 
					                                         f32 %324 = OpLoad %112 
					                                         f32 %325 = OpExtInst %1 37 %323 %324 
					                                                      OpStore %112 %325 
					                                       f32_3 %326 = OpLoad %9 
					                              Uniform f32_4* %327 = OpAccessChain %36 %220 
					                                       f32_4 %328 = OpLoad %327 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_3 %330 = OpFNegate %329 
					                                       f32_3 %331 = OpFAdd %326 %330 
					                                                      OpStore %243 %331 
					                                       f32_4 %332 = OpLoad %235 
					                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
					                                         f32 %334 = OpLoad %112 
					                                       f32_3 %335 = OpCompositeConstruct %334 %334 %334 
					                                       f32_3 %336 = OpFMul %333 %335 
					                                       f32_3 %337 = OpLoad %243 
					                                       f32_3 %338 = OpFAdd %336 %337 
					                                       f32_4 %339 = OpLoad %235 
					                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
					                                                      OpStore %235 %340 
					                                                      OpBranch %227 
					                                             %341 = OpLabel 
					                                       f32_4 %342 = OpLoad %136 
					                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
					                                       f32_4 %344 = OpLoad %235 
					                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 6 3 
					                                                      OpStore %235 %345 
					                                                      OpBranch %227 
					                                             %227 = OpLabel 
					                       read_only TextureCube %349 = OpLoad %348 
					                                     sampler %351 = OpLoad %350 
					                read_only TextureCubeSampled %353 = OpSampledImage %349 %351 
					                                       f32_4 %354 = OpLoad %235 
					                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
					                                       f32_4 %357 = OpImageSampleExplicitLod %353 %355 Lod %10 
					                                                      OpStore %235 %357 
					                                Private f32* %358 = OpAccessChain %235 %14 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFAdd %359 %107 
					                                                      OpStore %112 %360 
					                                Uniform f32* %362 = OpAccessChain %36 %361 %14 
					                                         f32 %363 = OpLoad %362 
					                                         f32 %364 = OpLoad %112 
					                                         f32 %365 = OpFMul %363 %364 
					                                         f32 %366 = OpFAdd %365 %119 
					                                                      OpStore %112 %366 
					                                         f32 %367 = OpLoad %112 
					                                         f32 %368 = OpExtInst %1 30 %367 
					                                                      OpStore %112 %368 
					                                         f32 %369 = OpLoad %112 
					                                Uniform f32* %370 = OpAccessChain %36 %361 %24 
					                                         f32 %371 = OpLoad %370 
					                                         f32 %372 = OpFMul %369 %371 
					                                                      OpStore %112 %372 
					                                         f32 %373 = OpLoad %112 
					                                         f32 %374 = OpExtInst %1 29 %373 
					                                                      OpStore %112 %374 
					                                         f32 %375 = OpLoad %112 
					                                Uniform f32* %376 = OpAccessChain %36 %361 %18 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                                      OpStore %112 %378 
					                                       f32_4 %379 = OpLoad %235 
					                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
					                                         f32 %381 = OpLoad %112 
					                                       f32_3 %382 = OpCompositeConstruct %381 %381 %381 
					                                       f32_3 %383 = OpFMul %380 %382 
					                                                      OpStore %243 %383 
					                                Uniform f32* %385 = OpAccessChain %36 %258 %14 
					                                         f32 %386 = OpLoad %385 
					                                        bool %388 = OpFOrdLessThan %386 %387 
					                                                      OpStore %384 %388 
					                                        bool %389 = OpLoad %384 
					                                                      OpSelectionMerge %391 None 
					                                                      OpBranchConditional %389 %390 %391 
					                                             %390 = OpLabel 
					                                Uniform f32* %393 = OpAccessChain %36 %392 %14 
					                                         f32 %394 = OpLoad %393 
					                                        bool %395 = OpFOrdLessThan %214 %394 
					                                                      OpStore %384 %395 
					                                        bool %396 = OpLoad %384 
					                                                      OpSelectionMerge %398 None 
					                                                      OpBranchConditional %396 %397 %398 
					                                             %397 = OpLabel 
					                                       f32_4 %400 = OpLoad %136 
					                                       f32_3 %401 = OpVectorShuffle %400 %400 0 1 2 
					                                       f32_4 %402 = OpLoad %136 
					                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
					                                         f32 %404 = OpDot %401 %403 
					                                                      OpStore %399 %404 
					                                         f32 %405 = OpLoad %399 
					                                         f32 %406 = OpExtInst %1 32 %405 
					                                                      OpStore %399 %406 
					                                         f32 %407 = OpLoad %399 
					                                       f32_3 %408 = OpCompositeConstruct %407 %407 %407 
					                                       f32_4 %409 = OpLoad %136 
					                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
					                                       f32_3 %411 = OpFMul %408 %410 
					                                                      OpStore %255 %411 
					                                       f32_3 %413 = OpLoad %9 
					                                       f32_3 %414 = OpFNegate %413 
					                              Uniform f32_4* %416 = OpAccessChain %36 %415 
					                                       f32_4 %417 = OpLoad %416 
					                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
					                                       f32_3 %419 = OpFAdd %414 %418 
					                                                      OpStore %412 %419 
					                                       f32_3 %420 = OpLoad %412 
					                                       f32_3 %421 = OpLoad %255 
					                                       f32_3 %422 = OpFDiv %420 %421 
					                                                      OpStore %412 %422 
					                                       f32_3 %424 = OpLoad %9 
					                                       f32_3 %425 = OpFNegate %424 
					                              Uniform f32_4* %427 = OpAccessChain %36 %426 
					                                       f32_4 %428 = OpLoad %427 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFAdd %425 %429 
					                                                      OpStore %423 %430 
					                                       f32_3 %431 = OpLoad %423 
					                                       f32_3 %432 = OpLoad %255 
					                                       f32_3 %433 = OpFDiv %431 %432 
					                                                      OpStore %423 %433 
					                                       f32_3 %435 = OpLoad %255 
					                                       f32_4 %436 = OpVectorShuffle %435 %435 0 1 2 0 
					                                      bool_4 %437 = OpFOrdLessThan %270 %436 
					                                      bool_3 %438 = OpVectorShuffle %437 %437 0 1 2 
					                                                      OpStore %434 %438 
					                                       f32_3 %440 = OpLoad %412 
					                                                      OpStore %439 %440 
					                               Private bool* %441 = OpAccessChain %434 %18 
					                                        bool %442 = OpLoad %441 
					                                                      OpSelectionMerge %445 None 
					                                                      OpBranchConditional %442 %444 %448 
					                                             %444 = OpLabel 
					                                Private f32* %446 = OpAccessChain %412 %18 
					                                         f32 %447 = OpLoad %446 
					                                                      OpStore %443 %447 
					                                                      OpBranch %445 
					                                             %448 = OpLabel 
					                                Private f32* %449 = OpAccessChain %423 %18 
					                                         f32 %450 = OpLoad %449 
					                                                      OpStore %443 %450 
					                                                      OpBranch %445 
					                                             %445 = OpLabel 
					                                         f32 %451 = OpLoad %443 
					                               Function f32* %452 = OpAccessChain %439 %18 
					                                                      OpStore %452 %451 
					                               Private bool* %453 = OpAccessChain %434 %24 
					                                        bool %454 = OpLoad %453 
					                                                      OpSelectionMerge %457 None 
					                                                      OpBranchConditional %454 %456 %460 
					                                             %456 = OpLabel 
					                                Private f32* %458 = OpAccessChain %412 %24 
					                                         f32 %459 = OpLoad %458 
					                                                      OpStore %455 %459 
					                                                      OpBranch %457 
					                                             %460 = OpLabel 
					                                Private f32* %461 = OpAccessChain %423 %24 
					                                         f32 %462 = OpLoad %461 
					                                                      OpStore %455 %462 
					                                                      OpBranch %457 
					                                             %457 = OpLabel 
					                                         f32 %463 = OpLoad %455 
					                               Function f32* %464 = OpAccessChain %439 %24 
					                                                      OpStore %464 %463 
					                               Private bool* %465 = OpAccessChain %434 %29 
					                                        bool %466 = OpLoad %465 
					                                                      OpSelectionMerge %469 None 
					                                                      OpBranchConditional %466 %468 %472 
					                                             %468 = OpLabel 
					                                Private f32* %470 = OpAccessChain %412 %29 
					                                         f32 %471 = OpLoad %470 
					                                                      OpStore %467 %471 
					                                                      OpBranch %469 
					                                             %472 = OpLabel 
					                                Private f32* %473 = OpAccessChain %423 %29 
					                                         f32 %474 = OpLoad %473 
					                                                      OpStore %467 %474 
					                                                      OpBranch %469 
					                                             %469 = OpLabel 
					                                         f32 %475 = OpLoad %467 
					                               Function f32* %476 = OpAccessChain %439 %29 
					                                                      OpStore %476 %475 
					                                       f32_3 %477 = OpLoad %439 
					                                                      OpStore %412 %477 
					                                Private f32* %478 = OpAccessChain %412 %24 
					                                         f32 %479 = OpLoad %478 
					                                Private f32* %480 = OpAccessChain %412 %18 
					                                         f32 %481 = OpLoad %480 
					                                         f32 %482 = OpExtInst %1 37 %479 %481 
					                                                      OpStore %399 %482 
					                                Private f32* %483 = OpAccessChain %412 %29 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpLoad %399 
					                                         f32 %486 = OpExtInst %1 37 %484 %485 
					                                                      OpStore %399 %486 
					                                       f32_3 %487 = OpLoad %9 
					                              Uniform f32_4* %488 = OpAccessChain %36 %392 
					                                       f32_4 %489 = OpLoad %488 
					                                       f32_3 %490 = OpVectorShuffle %489 %489 0 1 2 
					                                       f32_3 %491 = OpFNegate %490 
					                                       f32_3 %492 = OpFAdd %487 %491 
					                                                      OpStore %9 %492 
					                                       f32_3 %493 = OpLoad %255 
					                                         f32 %494 = OpLoad %399 
					                                       f32_3 %495 = OpCompositeConstruct %494 %494 %494 
					                                       f32_3 %496 = OpFMul %493 %495 
					                                       f32_3 %497 = OpLoad %9 
					                                       f32_3 %498 = OpFAdd %496 %497 
					                                       f32_4 %499 = OpLoad %136 
					                                       f32_4 %500 = OpVectorShuffle %499 %498 4 5 6 3 
					                                                      OpStore %136 %500 
					                                                      OpBranch %398 
					                                             %398 = OpLabel 
					                       read_only TextureCube %502 = OpLoad %501 
					                                     sampler %503 = OpLoad %350 
					                read_only TextureCubeSampled %504 = OpSampledImage %502 %503 
					                                       f32_4 %505 = OpLoad %136 
					                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
					                                       f32_4 %507 = OpImageSampleExplicitLod %504 %506 Lod %10 
					                                                      OpStore %136 %507 
					                                Private f32* %508 = OpAccessChain %136 %14 
					                                         f32 %509 = OpLoad %508 
					                                         f32 %510 = OpFAdd %509 %107 
					                                Private f32* %511 = OpAccessChain %9 %18 
					                                                      OpStore %511 %510 
					                                Uniform f32* %513 = OpAccessChain %36 %512 %14 
					                                         f32 %514 = OpLoad %513 
					                                Private f32* %515 = OpAccessChain %9 %18 
					                                         f32 %516 = OpLoad %515 
					                                         f32 %517 = OpFMul %514 %516 
					                                         f32 %518 = OpFAdd %517 %119 
					                                Private f32* %519 = OpAccessChain %9 %18 
					                                                      OpStore %519 %518 
					                                Private f32* %520 = OpAccessChain %9 %18 
					                                         f32 %521 = OpLoad %520 
					                                         f32 %522 = OpExtInst %1 30 %521 
					                                Private f32* %523 = OpAccessChain %9 %18 
					                                                      OpStore %523 %522 
					                                Private f32* %524 = OpAccessChain %9 %18 
					                                         f32 %525 = OpLoad %524 
					                                Uniform f32* %526 = OpAccessChain %36 %512 %24 
					                                         f32 %527 = OpLoad %526 
					                                         f32 %528 = OpFMul %525 %527 
					                                Private f32* %529 = OpAccessChain %9 %18 
					                                                      OpStore %529 %528 
					                                Private f32* %530 = OpAccessChain %9 %18 
					                                         f32 %531 = OpLoad %530 
					                                         f32 %532 = OpExtInst %1 29 %531 
					                                Private f32* %533 = OpAccessChain %9 %18 
					                                                      OpStore %533 %532 
					                                Private f32* %534 = OpAccessChain %9 %18 
					                                         f32 %535 = OpLoad %534 
					                                Uniform f32* %536 = OpAccessChain %36 %512 %18 
					                                         f32 %537 = OpLoad %536 
					                                         f32 %538 = OpFMul %535 %537 
					                                Private f32* %539 = OpAccessChain %9 %18 
					                                                      OpStore %539 %538 
					                                       f32_4 %540 = OpLoad %136 
					                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
					                                       f32_3 %542 = OpLoad %9 
					                                       f32_3 %543 = OpVectorShuffle %542 %542 0 0 0 
					                                       f32_3 %544 = OpFMul %541 %543 
					                                                      OpStore %9 %544 
					                                         f32 %545 = OpLoad %112 
					                                       f32_3 %546 = OpCompositeConstruct %545 %545 %545 
					                                       f32_4 %547 = OpLoad %235 
					                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
					                                       f32_3 %549 = OpFMul %546 %548 
					                                       f32_3 %550 = OpLoad %9 
					                                       f32_3 %551 = OpFNegate %550 
					                                       f32_3 %552 = OpFAdd %549 %551 
					                                       f32_4 %553 = OpLoad %136 
					                                       f32_4 %554 = OpVectorShuffle %553 %552 4 5 6 3 
					                                                      OpStore %136 %554 
					                              Uniform f32_4* %555 = OpAccessChain %36 %258 
					                                       f32_4 %556 = OpLoad %555 
					                                       f32_3 %557 = OpVectorShuffle %556 %556 3 3 3 
					                                       f32_4 %558 = OpLoad %136 
					                                       f32_3 %559 = OpVectorShuffle %558 %558 0 1 2 
					                                       f32_3 %560 = OpFMul %557 %559 
					                                       f32_3 %561 = OpLoad %9 
					                                       f32_3 %562 = OpFAdd %560 %561 
					                                                      OpStore %243 %562 
					                                                      OpBranch %391 
					                                             %391 = OpLabel 
					                                       f32_4 %563 = OpLoad %55 
					                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
					                                       f32_3 %567 = OpFMul %564 %566 
					                                                      OpStore %9 %567 
					                                       f32_3 %568 = OpLoad %31 
					                                         f32 %569 = OpLoad %43 
					                                       f32_3 %570 = OpCompositeConstruct %569 %569 %569 
					                                       f32_3 %571 = OpFMul %568 %570 
					                              Uniform f32_4* %573 = OpAccessChain %36 %572 
					                                       f32_4 %574 = OpLoad %573 
					                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
					                                       f32_3 %576 = OpFAdd %571 %575 
					                                                      OpStore %31 %576 
					                                       f32_3 %577 = OpLoad %31 
					                                       f32_3 %578 = OpLoad %31 
					                                         f32 %579 = OpDot %577 %578 
					                                                      OpStore %43 %579 
					                                         f32 %580 = OpLoad %43 
					                                         f32 %582 = OpExtInst %1 40 %580 %581 
					                                                      OpStore %43 %582 
					                                         f32 %583 = OpLoad %43 
					                                         f32 %584 = OpExtInst %1 32 %583 
					                                                      OpStore %43 %584 
					                                         f32 %585 = OpLoad %43 
					                                       f32_3 %586 = OpCompositeConstruct %585 %585 %585 
					                                       f32_3 %587 = OpLoad %31 
					                                       f32_3 %588 = OpFMul %586 %587 
					                                                      OpStore %31 %588 
					                                       f32_4 %589 = OpLoad %85 
					                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
					                                       f32_3 %591 = OpLoad %49 
					                                         f32 %592 = OpDot %590 %591 
					                                                      OpStore %43 %592 
					                                       f32_4 %593 = OpLoad %85 
					                                       f32_3 %594 = OpVectorShuffle %593 %593 0 1 2 
					                              Uniform f32_4* %595 = OpAccessChain %36 %572 
					                                       f32_4 %596 = OpLoad %595 
					                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
					                                         f32 %598 = OpDot %594 %597 
					                                                      OpStore %112 %598 
					                                         f32 %599 = OpLoad %112 
					                                         f32 %600 = OpExtInst %1 43 %599 %214 %119 
					                                                      OpStore %112 %600 
					                              Uniform f32_4* %601 = OpAccessChain %36 %572 
					                                       f32_4 %602 = OpLoad %601 
					                                       f32_3 %603 = OpVectorShuffle %602 %602 0 1 2 
					                                       f32_3 %604 = OpLoad %31 
					                                         f32 %605 = OpDot %603 %604 
					                                Private f32* %606 = OpAccessChain %31 %18 
					                                                      OpStore %606 %605 
					                                Private f32* %607 = OpAccessChain %31 %18 
					                                         f32 %608 = OpLoad %607 
					                                         f32 %609 = OpExtInst %1 43 %608 %214 %119 
					                                Private f32* %610 = OpAccessChain %31 %18 
					                                                      OpStore %610 %609 
					                                       f32_3 %612 = OpLoad %31 
					                                       f32_2 %613 = OpVectorShuffle %612 %612 0 0 
					                                       f32_3 %614 = OpLoad %31 
					                                       f32_2 %615 = OpVectorShuffle %614 %614 0 0 
					                                         f32 %616 = OpDot %613 %615 
					                                Private f32* %617 = OpAccessChain %611 %18 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %611 %18 
					                                         f32 %619 = OpLoad %618 
					                                         f32 %621 = OpFAdd %619 %620 
					                                Private f32* %622 = OpAccessChain %611 %18 
					                                                      OpStore %622 %621 
					                                         f32 %624 = OpLoad %112 
					                                         f32 %625 = OpFNegate %624 
					                                         f32 %626 = OpFAdd %625 %119 
					                                                      OpStore %623 %626 
					                                         f32 %627 = OpLoad %623 
					                                         f32 %628 = OpLoad %623 
					                                         f32 %629 = OpFMul %627 %628 
					                                Private f32* %630 = OpAccessChain %49 %18 
					                                                      OpStore %630 %629 
					                                Private f32* %631 = OpAccessChain %49 %18 
					                                         f32 %632 = OpLoad %631 
					                                Private f32* %633 = OpAccessChain %49 %18 
					                                         f32 %634 = OpLoad %633 
					                                         f32 %635 = OpFMul %632 %634 
					                                Private f32* %636 = OpAccessChain %49 %18 
					                                                      OpStore %636 %635 
					                                         f32 %637 = OpLoad %623 
					                                Private f32* %638 = OpAccessChain %49 %18 
					                                         f32 %639 = OpLoad %638 
					                                         f32 %640 = OpFMul %637 %639 
					                                                      OpStore %623 %640 
					                                Private f32* %641 = OpAccessChain %611 %18 
					                                         f32 %642 = OpLoad %641 
					                                         f32 %643 = OpLoad %623 
					                                         f32 %644 = OpFMul %642 %643 
					                                         f32 %645 = OpFAdd %644 %119 
					                                                      OpStore %623 %645 
					                                         f32 %646 = OpLoad %43 
					                                         f32 %647 = OpExtInst %1 4 %646 
					                                         f32 %648 = OpFNegate %647 
					                                         f32 %649 = OpFAdd %648 %119 
					                                Private f32* %650 = OpAccessChain %49 %18 
					                                                      OpStore %650 %649 
					                                Private f32* %652 = OpAccessChain %49 %18 
					                                         f32 %653 = OpLoad %652 
					                                Private f32* %654 = OpAccessChain %49 %18 
					                                         f32 %655 = OpLoad %654 
					                                         f32 %656 = OpFMul %653 %655 
					                                Private f32* %657 = OpAccessChain %651 %18 
					                                                      OpStore %657 %656 
					                                Private f32* %658 = OpAccessChain %651 %18 
					                                         f32 %659 = OpLoad %658 
					                                Private f32* %660 = OpAccessChain %651 %18 
					                                         f32 %661 = OpLoad %660 
					                                         f32 %662 = OpFMul %659 %661 
					                                Private f32* %663 = OpAccessChain %651 %18 
					                                                      OpStore %663 %662 
					                                Private f32* %664 = OpAccessChain %49 %18 
					                                         f32 %665 = OpLoad %664 
					                                Private f32* %666 = OpAccessChain %651 %18 
					                                         f32 %667 = OpLoad %666 
					                                         f32 %668 = OpFMul %665 %667 
					                                Private f32* %669 = OpAccessChain %49 %18 
					                                                      OpStore %669 %668 
					                                Private f32* %670 = OpAccessChain %611 %18 
					                                         f32 %671 = OpLoad %670 
					                                Private f32* %672 = OpAccessChain %49 %18 
					                                         f32 %673 = OpLoad %672 
					                                         f32 %674 = OpFMul %671 %673 
					                                         f32 %675 = OpFAdd %674 %119 
					                                Private f32* %676 = OpAccessChain %611 %18 
					                                                      OpStore %676 %675 
					                                Private f32* %677 = OpAccessChain %611 %18 
					                                         f32 %678 = OpLoad %677 
					                                         f32 %679 = OpLoad %623 
					                                         f32 %680 = OpFMul %678 %679 
					                                Private f32* %681 = OpAccessChain %611 %18 
					                                                      OpStore %681 %680 
					                                         f32 %682 = OpLoad %112 
					                                Private f32* %683 = OpAccessChain %611 %18 
					                                         f32 %684 = OpLoad %683 
					                                         f32 %685 = OpFMul %682 %684 
					                                Private f32* %686 = OpAccessChain %611 %18 
					                                                      OpStore %686 %685 
					                                         f32 %687 = OpLoad %43 
					                                         f32 %688 = OpExtInst %1 4 %687 
					                                         f32 %689 = OpLoad %112 
					                                         f32 %690 = OpFAdd %688 %689 
					                                                      OpStore %43 %690 
					                                         f32 %691 = OpLoad %43 
					                                         f32 %693 = OpFAdd %691 %692 
					                                                      OpStore %43 %693 
					                                         f32 %695 = OpLoad %43 
					                                         f32 %696 = OpFDiv %694 %695 
					                                                      OpStore %43 %696 
					                                         f32 %697 = OpLoad %112 
					                                         f32 %698 = OpLoad %43 
					                                         f32 %699 = OpFMul %697 %698 
					                                                      OpStore %43 %699 
					                                         f32 %700 = OpLoad %43 
					                                         f32 %702 = OpFMul %700 %701 
					                                                      OpStore %43 %702 
					                              Uniform f32_4* %704 = OpAccessChain %36 %703 
					                                       f32_4 %705 = OpLoad %704 
					                                       f32_3 %706 = OpVectorShuffle %705 %705 0 1 2 
					                                       f32_3 %707 = OpLoad %611 
					                                       f32_3 %708 = OpVectorShuffle %707 %707 0 0 0 
					                                       f32_3 %709 = OpFMul %706 %708 
					                                       f32_3 %710 = OpLoad %189 
					                                       f32_3 %711 = OpFAdd %709 %710 
					                                                      OpStore %611 %711 
					                                         f32 %712 = OpLoad %43 
					                                       f32_3 %713 = OpCompositeConstruct %712 %712 %712 
					                              Uniform f32_4* %714 = OpAccessChain %36 %703 
					                                       f32_4 %715 = OpLoad %714 
					                                       f32_3 %716 = OpVectorShuffle %715 %715 0 1 2 
					                                       f32_3 %717 = OpFMul %713 %716 
					                                                      OpStore %651 %717 
					                                Private f32* %718 = OpAccessChain %31 %18 
					                                         f32 %719 = OpLoad %718 
					                                         f32 %720 = OpFNegate %719 
					                                         f32 %721 = OpFAdd %720 %119 
					                                                      OpStore %43 %721 
					                                         f32 %722 = OpLoad %43 
					                                         f32 %723 = OpLoad %43 
					                                         f32 %724 = OpFMul %722 %723 
					                                Private f32* %725 = OpAccessChain %31 %18 
					                                                      OpStore %725 %724 
					                                Private f32* %726 = OpAccessChain %31 %18 
					                                         f32 %727 = OpLoad %726 
					                                Private f32* %728 = OpAccessChain %31 %18 
					                                         f32 %729 = OpLoad %728 
					                                         f32 %730 = OpFMul %727 %729 
					                                Private f32* %731 = OpAccessChain %31 %18 
					                                                      OpStore %731 %730 
					                                         f32 %732 = OpLoad %43 
					                                Private f32* %733 = OpAccessChain %31 %18 
					                                         f32 %734 = OpLoad %733 
					                                         f32 %735 = OpFMul %732 %734 
					                                                      OpStore %43 %735 
					                                         f32 %736 = OpLoad %43 
					                                         f32 %737 = OpFMul %736 %565 
					                                         f32 %739 = OpFAdd %737 %738 
					                                                      OpStore %43 %739 
					                                         f32 %740 = OpLoad %43 
					                                       f32_3 %741 = OpCompositeConstruct %740 %740 %740 
					                                       f32_3 %742 = OpLoad %651 
					                                       f32_3 %743 = OpFMul %741 %742 
					                                                      OpStore %651 %743 
					                                       f32_3 %744 = OpLoad %9 
					                                       f32_3 %745 = OpLoad %611 
					                                       f32_3 %746 = OpFMul %744 %745 
					                                       f32_3 %747 = OpLoad %651 
					                                       f32_3 %748 = OpFAdd %746 %747 
					                                                      OpStore %9 %748 
					                                       f32_3 %749 = OpLoad %243 
					                                       f32_3 %751 = OpFMul %749 %750 
					                                                      OpStore %31 %751 
					                                Private f32* %752 = OpAccessChain %49 %18 
					                                         f32 %753 = OpLoad %752 
					                                         f32 %755 = OpFMul %753 %754 
					                                         f32 %756 = OpFAdd %755 %738 
					                                                      OpStore %43 %756 
					                                       f32_3 %757 = OpLoad %31 
					                                         f32 %758 = OpLoad %43 
					                                       f32_3 %759 = OpCompositeConstruct %758 %758 %758 
					                                       f32_3 %760 = OpFMul %757 %759 
					                                       f32_3 %761 = OpLoad %9 
					                                       f32_3 %762 = OpFAdd %760 %761 
					                                       f32_4 %763 = OpLoad %128 
					                                       f32_4 %764 = OpVectorShuffle %763 %762 4 5 6 3 
					                                                      OpStore %128 %764 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	vec4 unity_4LightAtten0;
					uniform 	vec4 unity_LightColor[8];
					uniform 	vec4 unity_SHBr;
					uniform 	vec4 unity_SHBg;
					uniform 	vec4 unity_SHBb;
					uniform 	vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_SHAr;
					uniform 	vec4 unity_SHAg;
					uniform 	vec4 unity_SHAb;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	vec4 unity_SpecCube1_HDR;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					float u_xlat27;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat2.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat4 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat4.z = sqrt(u_xlat40);
					    SV_Target0.w = u_xlat3.w * vs_COLOR0.w;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat4.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					    u_xlat40 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat40 = u_xlat40 + u_xlat40;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat40)) + (-u_xlat2.xyz);
					    u_xlat4.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat4);
					    u_xlat6.y = dot(unity_SHAg, u_xlat4);
					    u_xlat6.z = dot(unity_SHAb, u_xlat4);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat7.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat40 = min(u_xlat8.z, u_xlat40);
					        u_xlat8.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat5.xyz;
					    }
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, 6.0);
					    u_xlat40 = u_xlat7.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat9.xyz = vec3(u_xlat41) * u_xlat5.xyz;
					            u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat41 = min(u_xlat10.z, u_xlat41);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat41) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, 6.0);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat40) * u_xlat7.xyz + (-u_xlat0.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat39 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat40 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat14.x = u_xlat14.x + -0.5;
					    u_xlat27 = (-u_xlat40) + 1.0;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat14.x * u_xlat27 + 1.0;
					    u_xlat2.x = -abs(u_xlat39) + 1.0;
					    u_xlat15.x = u_xlat2.x * u_xlat2.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat2.x = u_xlat2.x * u_xlat15.x;
					    u_xlat14.x = u_xlat14.x * u_xlat2.x + 1.0;
					    u_xlat14.x = u_xlat14.x * u_xlat27;
					    u_xlat14.x = u_xlat40 * u_xlat14.x;
					    u_xlat39 = abs(u_xlat39) + u_xlat40;
					    u_xlat39 = u_xlat39 + 9.99999975e-06;
					    u_xlat39 = 0.5 / u_xlat39;
					    u_xlat39 = u_xlat39 * 0.999999881;
					    u_xlat39 = u_xlat40 * u_xlat39;
					    u_xlat14.xyz = _LightColor0.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat15.xyz = vec3(u_xlat39) * _LightColor0.xyz;
					    u_xlat39 = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat39 * 0.959999979 + 0.0399999991;
					    u_xlat15.xyz = vec3(u_xlat39) * u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.xyz + u_xlat15.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat39 = u_xlat2.x * 2.23517418e-08 + 0.0399999991;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 452
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %115 %162 %179 %247 %251 %273 %274 %276 %440 %446 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD8 "vs_TEXCOORD8" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpMemberDecorate %21 0 Offset 21 
					                                                      OpMemberDecorate %21 1 Offset 21 
					                                                      OpMemberDecorate %21 2 Offset 21 
					                                                      OpMemberDecorate %21 3 Offset 21 
					                                                      OpMemberDecorate %21 4 Offset 21 
					                                                      OpMemberDecorate %21 5 Offset 21 
					                                                      OpMemberDecorate %21 6 Offset 21 
					                                                      OpMemberDecorate %21 7 Offset 21 
					                                                      OpMemberDecorate %21 8 Offset 21 
					                                                      OpMemberDecorate %21 9 Offset 21 
					                                                      OpMemberDecorate %21 10 Offset 21 
					                                                      OpMemberDecorate %21 11 Offset 21 
					                                                      OpMemberDecorate %21 12 Offset 21 
					                                                      OpMemberDecorate %21 13 Offset 21 
					                                                      OpDecorate %21 Block 
					                                                      OpDecorate %23 DescriptorSet 23 
					                                                      OpDecorate %23 Binding 23 
					                                                      OpMemberDecorate %88 0 BuiltIn 88 
					                                                      OpMemberDecorate %88 1 BuiltIn 88 
					                                                      OpMemberDecorate %88 2 BuiltIn 88 
					                                                      OpDecorate %88 Block 
					                                                      OpDecorate vs_TEXCOORD0 Location 102 
					                                                      OpDecorate %103 Location 103 
					                                                      OpDecorate %115 Location 115 
					                                                      OpDecorate vs_TEXCOORD1 Location 162 
					                                                      OpDecorate %179 Location 179 
					                                                      OpDecorate vs_TEXCOORD2 Location 247 
					                                                      OpDecorate vs_TEXCOORD3 Location 251 
					                                                      OpDecorate %273 Location 273 
					                                                      OpDecorate %274 Location 274 
					                                                      OpDecorate vs_TEXCOORD4 Location 276 
					                                                      OpDecorate vs_TEXCOORD5 Location 440 
					                                                      OpDecorate vs_TEXCOORD8 Location 446 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 8 
					                                              %16 = OpTypeArray %7 %15 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %7 %17 
					                                              %19 = OpTypeArray %7 %17 
					                                              %20 = OpTypeArray %7 %17 
					                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %18 %19 %7 %20 %7 
					                                              %22 = OpTypePointer Uniform %21 
					Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
					                                              %24 = OpTypeInt 32 1 
					                                          i32 %25 = OpConstant 9 
					                                          i32 %26 = OpConstant 1 
					                                              %27 = OpTypePointer Uniform %7 
					                                          i32 %31 = OpConstant 0 
					                                          i32 %39 = OpConstant 2 
					                               Private f32_4* %47 = OpVariable Private 
					                                          i32 %49 = OpConstant 3 
					                                              %53 = OpTypeVector %6 3 
					                               Private f32_4* %65 = OpVariable Private 
					                                          i32 %68 = OpConstant 12 
					                                          u32 %86 = OpConstant 1 
					                                              %87 = OpTypeArray %6 %86 
					                                              %88 = OpTypeStruct %7 %6 %87 
					                                              %89 = OpTypePointer Output %88 
					         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
					                                              %98 = OpTypePointer Output %7 
					                                             %100 = OpTypeVector %6 2 
					                                             %101 = OpTypePointer Output %100 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                Input f32_4* %103 = OpVariable Input 
					                                         i32 %106 = OpConstant 13 
					                                Input f32_4* %115 = OpVariable Input 
					                                             %146 = OpTypePointer Private %6 
					                                Private f32* %147 = OpVariable Private 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                         u32 %163 = OpConstant 2 
					                                         u32 %166 = OpConstant 0 
					                                             %167 = OpTypePointer Output %6 
					                                         u32 %169 = OpConstant 3 
					                                             %170 = OpTypePointer Input %6 
					                                         i32 %173 = OpConstant 11 
					                                             %174 = OpTypePointer Uniform %6 
					                                             %178 = OpTypePointer Input %53 
					                                Input f32_3* %179 = OpVariable Input 
					                                         i32 %181 = OpConstant 10 
					                                Private f32* %199 = OpVariable Private 
					                              Private f32_4* %212 = OpVariable Private 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                               Output f32_4* %273 = OpVariable Output 
					                                Input f32_4* %274 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
					                                         f32 %277 = OpConstant 3,674022E-40 
					                                       f32_4 %278 = OpConstantComposite %277 %277 %277 %277 
					                              Private f32_4* %297 = OpVariable Private 
					                                         f32 %328 = OpConstant 3,674022E-40 
					                                       f32_4 %329 = OpConstantComposite %328 %328 %328 %328 
					                                         f32 %337 = OpConstant 3,674022E-40 
					                                       f32_4 %338 = OpConstantComposite %337 %337 %337 %337 
					                                         i32 %352 = OpConstant 4 
					                                         i32 %409 = OpConstant 5 
					                                         i32 %415 = OpConstant 6 
					                                         i32 %421 = OpConstant 7 
					                                         i32 %427 = OpConstant 8 
					                                             %439 = OpTypePointer Output %53 
					                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD8 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
					                                        f32_4 %29 = OpLoad %28 
					                                        f32_4 %30 = OpFMul %13 %29 
					                                                      OpStore %9 %30 
					                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
					                                        f32_4 %33 = OpLoad %32 
					                                        f32_4 %34 = OpLoad %11 
					                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
					                                        f32_4 %36 = OpFMul %33 %35 
					                                        f32_4 %37 = OpLoad %9 
					                                        f32_4 %38 = OpFAdd %36 %37 
					                                                      OpStore %9 %38 
					                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
					                                        f32_4 %41 = OpLoad %40 
					                                        f32_4 %42 = OpLoad %11 
					                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
					                                        f32_4 %44 = OpFMul %41 %43 
					                                        f32_4 %45 = OpLoad %9 
					                                        f32_4 %46 = OpFAdd %44 %45 
					                                                      OpStore %9 %46 
					                                        f32_4 %48 = OpLoad %9 
					                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
					                                        f32_4 %51 = OpLoad %50 
					                                        f32_4 %52 = OpFAdd %48 %51 
					                                                      OpStore %47 %52 
					                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_4 %57 = OpLoad %11 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                                        f32_3 %59 = OpFMul %56 %58 
					                                        f32_4 %60 = OpLoad %9 
					                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                                        f32_3 %62 = OpFAdd %59 %61 
					                                        f32_4 %63 = OpLoad %9 
					                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                                      OpStore %9 %64 
					                                        f32_4 %66 = OpLoad %47 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
					                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
					                                        f32_4 %70 = OpLoad %69 
					                                        f32_4 %71 = OpFMul %67 %70 
					                                                      OpStore %65 %71 
					                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
					                                        f32_4 %73 = OpLoad %72 
					                                        f32_4 %74 = OpLoad %47 
					                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
					                                        f32_4 %76 = OpFMul %73 %75 
					                                        f32_4 %77 = OpLoad %65 
					                                        f32_4 %78 = OpFAdd %76 %77 
					                                                      OpStore %65 %78 
					                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_4 %81 = OpLoad %47 
					                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
					                                        f32_4 %83 = OpFMul %80 %82 
					                                        f32_4 %84 = OpLoad %65 
					                                        f32_4 %85 = OpFAdd %83 %84 
					                                                      OpStore %65 %85 
					                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
					                                        f32_4 %92 = OpLoad %91 
					                                        f32_4 %93 = OpLoad %47 
					                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
					                                        f32_4 %95 = OpFMul %92 %94 
					                                        f32_4 %96 = OpLoad %65 
					                                        f32_4 %97 = OpFAdd %95 %96 
					                                Output f32_4* %99 = OpAccessChain %90 %31 
					                                                      OpStore %99 %97 
					                                       f32_4 %104 = OpLoad %103 
					                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
					                              Uniform f32_4* %107 = OpAccessChain %23 %106 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
					                                       f32_2 %110 = OpFMul %105 %109 
					                              Uniform f32_4* %111 = OpAccessChain %23 %106 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
					                                       f32_2 %114 = OpFAdd %110 %113 
					                                                      OpStore vs_TEXCOORD0 %114 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 1 1 1 
					                              Uniform f32_4* %118 = OpAccessChain %23 %25 %26 
					                                       f32_4 %119 = OpLoad %118 
					                                       f32_3 %120 = OpVectorShuffle %119 %119 1 2 0 
					                                       f32_3 %121 = OpFMul %117 %120 
					                                       f32_4 %122 = OpLoad %47 
					                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
					                                                      OpStore %47 %123 
					                              Uniform f32_4* %124 = OpAccessChain %23 %25 %31 
					                                       f32_4 %125 = OpLoad %124 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 1 2 0 
					                                       f32_4 %127 = OpLoad %115 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
					                                       f32_3 %129 = OpFMul %126 %128 
					                                       f32_4 %130 = OpLoad %47 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                       f32_3 %132 = OpFAdd %129 %131 
					                                       f32_4 %133 = OpLoad %47 
					                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
					                                                      OpStore %47 %134 
					                              Uniform f32_4* %135 = OpAccessChain %23 %25 %39 
					                                       f32_4 %136 = OpLoad %135 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 1 2 0 
					                                       f32_4 %138 = OpLoad %115 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 2 2 2 
					                                       f32_3 %140 = OpFMul %137 %139 
					                                       f32_4 %141 = OpLoad %47 
					                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
					                                       f32_3 %143 = OpFAdd %140 %142 
					                                       f32_4 %144 = OpLoad %47 
					                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 6 3 
					                                                      OpStore %47 %145 
					                                       f32_4 %148 = OpLoad %47 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
					                                       f32_4 %150 = OpLoad %47 
					                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
					                                         f32 %152 = OpDot %149 %151 
					                                                      OpStore %147 %152 
					                                         f32 %153 = OpLoad %147 
					                                         f32 %154 = OpExtInst %1 32 %153 
					                                                      OpStore %147 %154 
					                                         f32 %155 = OpLoad %147 
					                                       f32_3 %156 = OpCompositeConstruct %155 %155 %155 
					                                       f32_4 %157 = OpLoad %47 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                       f32_3 %159 = OpFMul %156 %158 
					                                       f32_4 %160 = OpLoad %47 
					                                       f32_4 %161 = OpVectorShuffle %160 %159 4 5 6 3 
					                                                      OpStore %47 %161 
					                                Private f32* %164 = OpAccessChain %47 %163 
					                                         f32 %165 = OpLoad %164 
					                                 Output f32* %168 = OpAccessChain vs_TEXCOORD1 %166 
					                                                      OpStore %168 %165 
					                                  Input f32* %171 = OpAccessChain %115 %169 
					                                         f32 %172 = OpLoad %171 
					                                Uniform f32* %175 = OpAccessChain %23 %173 %169 
					                                         f32 %176 = OpLoad %175 
					                                         f32 %177 = OpFMul %172 %176 
					                                                      OpStore %147 %177 
					                                       f32_3 %180 = OpLoad %179 
					                              Uniform f32_4* %182 = OpAccessChain %23 %181 %31 
					                                       f32_4 %183 = OpLoad %182 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                         f32 %185 = OpDot %180 %184 
					                                Private f32* %186 = OpAccessChain %65 %166 
					                                                      OpStore %186 %185 
					                                       f32_3 %187 = OpLoad %179 
					                              Uniform f32_4* %188 = OpAccessChain %23 %181 %26 
					                                       f32_4 %189 = OpLoad %188 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                         f32 %191 = OpDot %187 %190 
					                                Private f32* %192 = OpAccessChain %65 %86 
					                                                      OpStore %192 %191 
					                                       f32_3 %193 = OpLoad %179 
					                              Uniform f32_4* %194 = OpAccessChain %23 %181 %39 
					                                       f32_4 %195 = OpLoad %194 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                         f32 %197 = OpDot %193 %196 
					                                Private f32* %198 = OpAccessChain %65 %163 
					                                                      OpStore %198 %197 
					                                       f32_4 %200 = OpLoad %65 
					                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
					                                       f32_4 %202 = OpLoad %65 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
					                                         f32 %204 = OpDot %201 %203 
					                                                      OpStore %199 %204 
					                                         f32 %205 = OpLoad %199 
					                                         f32 %206 = OpExtInst %1 32 %205 
					                                                      OpStore %199 %206 
					                                         f32 %207 = OpLoad %199 
					                                       f32_4 %208 = OpCompositeConstruct %207 %207 %207 %207 
					                                       f32_4 %209 = OpLoad %65 
					                                       f32_4 %210 = OpVectorShuffle %209 %209 0 1 2 2 
					                                       f32_4 %211 = OpFMul %208 %210 
					                                                      OpStore %65 %211 
					                                       f32_4 %213 = OpLoad %47 
					                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
					                                       f32_4 %215 = OpLoad %65 
					                                       f32_3 %216 = OpVectorShuffle %215 %215 3 0 1 
					                                       f32_3 %217 = OpFMul %214 %216 
					                                       f32_4 %218 = OpLoad %212 
					                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
					                                                      OpStore %212 %219 
					                                       f32_4 %220 = OpLoad %65 
					                                       f32_3 %221 = OpVectorShuffle %220 %220 1 3 0 
					                                       f32_4 %222 = OpLoad %47 
					                                       f32_3 %223 = OpVectorShuffle %222 %222 1 2 0 
					                                       f32_3 %224 = OpFMul %221 %223 
					                                       f32_4 %225 = OpLoad %212 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpFNegate %226 
					                                       f32_3 %228 = OpFAdd %224 %227 
					                                       f32_4 %229 = OpLoad %212 
					                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
					                                                      OpStore %212 %230 
					                                         f32 %231 = OpLoad %147 
					                                       f32_3 %232 = OpCompositeConstruct %231 %231 %231 
					                                       f32_4 %233 = OpLoad %212 
					                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
					                                       f32_3 %235 = OpFMul %232 %234 
					                                       f32_4 %236 = OpLoad %212 
					                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
					                                                      OpStore %212 %237 
					                                Private f32* %238 = OpAccessChain %212 %166 
					                                         f32 %239 = OpLoad %238 
					                                 Output f32* %240 = OpAccessChain vs_TEXCOORD1 %86 
					                                                      OpStore %240 %239 
					                                Private f32* %241 = OpAccessChain %9 %166 
					                                         f32 %242 = OpLoad %241 
					                                 Output f32* %243 = OpAccessChain vs_TEXCOORD1 %169 
					                                                      OpStore %243 %242 
					                                Private f32* %244 = OpAccessChain %65 %166 
					                                         f32 %245 = OpLoad %244 
					                                 Output f32* %246 = OpAccessChain vs_TEXCOORD1 %163 
					                                                      OpStore %246 %245 
					                                Private f32* %248 = OpAccessChain %47 %166 
					                                         f32 %249 = OpLoad %248 
					                                 Output f32* %250 = OpAccessChain vs_TEXCOORD2 %166 
					                                                      OpStore %250 %249 
					                                Private f32* %252 = OpAccessChain %47 %86 
					                                         f32 %253 = OpLoad %252 
					                                 Output f32* %254 = OpAccessChain vs_TEXCOORD3 %166 
					                                                      OpStore %254 %253 
					                                Private f32* %255 = OpAccessChain %212 %86 
					                                         f32 %256 = OpLoad %255 
					                                 Output f32* %257 = OpAccessChain vs_TEXCOORD2 %86 
					                                                      OpStore %257 %256 
					                                Private f32* %258 = OpAccessChain %212 %163 
					                                         f32 %259 = OpLoad %258 
					                                 Output f32* %260 = OpAccessChain vs_TEXCOORD3 %86 
					                                                      OpStore %260 %259 
					                                Private f32* %261 = OpAccessChain %9 %86 
					                                         f32 %262 = OpLoad %261 
					                                 Output f32* %263 = OpAccessChain vs_TEXCOORD2 %169 
					                                                      OpStore %263 %262 
					                                Private f32* %264 = OpAccessChain %65 %86 
					                                         f32 %265 = OpLoad %264 
					                                 Output f32* %266 = OpAccessChain vs_TEXCOORD2 %163 
					                                                      OpStore %266 %265 
					                                Private f32* %267 = OpAccessChain %9 %163 
					                                         f32 %268 = OpLoad %267 
					                                 Output f32* %269 = OpAccessChain vs_TEXCOORD3 %169 
					                                                      OpStore %269 %268 
					                                Private f32* %270 = OpAccessChain %65 %169 
					                                         f32 %271 = OpLoad %270 
					                                 Output f32* %272 = OpAccessChain vs_TEXCOORD3 %163 
					                                                      OpStore %272 %271 
					                                       f32_4 %275 = OpLoad %274 
					                                                      OpStore %273 %275 
					                                                      OpStore vs_TEXCOORD4 %278 
					                                       f32_4 %279 = OpLoad %9 
					                                       f32_4 %280 = OpVectorShuffle %279 %279 0 0 0 0 
					                                       f32_4 %281 = OpFNegate %280 
					                              Uniform f32_4* %282 = OpAccessChain %23 %31 
					                                       f32_4 %283 = OpLoad %282 
					                                       f32_4 %284 = OpFAdd %281 %283 
					                                                      OpStore %47 %284 
					                                       f32_4 %285 = OpLoad %9 
					                                       f32_4 %286 = OpVectorShuffle %285 %285 1 1 1 1 
					                                       f32_4 %287 = OpFNegate %286 
					                              Uniform f32_4* %288 = OpAccessChain %23 %26 
					                                       f32_4 %289 = OpLoad %288 
					                                       f32_4 %290 = OpFAdd %287 %289 
					                                                      OpStore %212 %290 
					                                       f32_4 %291 = OpLoad %9 
					                                       f32_4 %292 = OpVectorShuffle %291 %291 2 2 2 2 
					                                       f32_4 %293 = OpFNegate %292 
					                              Uniform f32_4* %294 = OpAccessChain %23 %39 
					                                       f32_4 %295 = OpLoad %294 
					                                       f32_4 %296 = OpFAdd %293 %295 
					                                                      OpStore %9 %296 
					                                       f32_4 %298 = OpLoad %65 
					                                       f32_4 %299 = OpVectorShuffle %298 %298 1 1 1 1 
					                                       f32_4 %300 = OpLoad %212 
					                                       f32_4 %301 = OpFMul %299 %300 
					                                                      OpStore %297 %301 
					                                       f32_4 %302 = OpLoad %212 
					                                       f32_4 %303 = OpLoad %212 
					                                       f32_4 %304 = OpFMul %302 %303 
					                                                      OpStore %212 %304 
					                                       f32_4 %305 = OpLoad %47 
					                                       f32_4 %306 = OpLoad %47 
					                                       f32_4 %307 = OpFMul %305 %306 
					                                       f32_4 %308 = OpLoad %212 
					                                       f32_4 %309 = OpFAdd %307 %308 
					                                                      OpStore %212 %309 
					                                       f32_4 %310 = OpLoad %47 
					                                       f32_4 %311 = OpLoad %65 
					                                       f32_4 %312 = OpVectorShuffle %311 %311 0 0 0 0 
					                                       f32_4 %313 = OpFMul %310 %312 
					                                       f32_4 %314 = OpLoad %297 
					                                       f32_4 %315 = OpFAdd %313 %314 
					                                                      OpStore %47 %315 
					                                       f32_4 %316 = OpLoad %9 
					                                       f32_4 %317 = OpLoad %65 
					                                       f32_4 %318 = OpVectorShuffle %317 %317 3 3 2 3 
					                                       f32_4 %319 = OpFMul %316 %318 
					                                       f32_4 %320 = OpLoad %47 
					                                       f32_4 %321 = OpFAdd %319 %320 
					                                                      OpStore %47 %321 
					                                       f32_4 %322 = OpLoad %9 
					                                       f32_4 %323 = OpLoad %9 
					                                       f32_4 %324 = OpFMul %322 %323 
					                                       f32_4 %325 = OpLoad %212 
					                                       f32_4 %326 = OpFAdd %324 %325 
					                                                      OpStore %9 %326 
					                                       f32_4 %327 = OpLoad %9 
					                                       f32_4 %330 = OpExtInst %1 40 %327 %329 
					                                                      OpStore %9 %330 
					                                       f32_4 %331 = OpLoad %9 
					                                       f32_4 %332 = OpExtInst %1 32 %331 
					                                                      OpStore %212 %332 
					                                       f32_4 %333 = OpLoad %9 
					                              Uniform f32_4* %334 = OpAccessChain %23 %49 
					                                       f32_4 %335 = OpLoad %334 
					                                       f32_4 %336 = OpFMul %333 %335 
					                                       f32_4 %339 = OpFAdd %336 %338 
					                                                      OpStore %9 %339 
					                                       f32_4 %340 = OpLoad %9 
					                                       f32_4 %341 = OpFDiv %338 %340 
					                                                      OpStore %9 %341 
					                                       f32_4 %342 = OpLoad %47 
					                                       f32_4 %343 = OpLoad %212 
					                                       f32_4 %344 = OpFMul %342 %343 
					                                                      OpStore %47 %344 
					                                       f32_4 %345 = OpLoad %47 
					                                       f32_4 %346 = OpExtInst %1 40 %345 %278 
					                                                      OpStore %47 %346 
					                                       f32_4 %347 = OpLoad %9 
					                                       f32_4 %348 = OpLoad %47 
					                                       f32_4 %349 = OpFMul %347 %348 
					                                                      OpStore %9 %349 
					                                       f32_4 %350 = OpLoad %9 
					                                       f32_3 %351 = OpVectorShuffle %350 %350 1 1 1 
					                              Uniform f32_4* %353 = OpAccessChain %23 %352 %26 
					                                       f32_4 %354 = OpLoad %353 
					                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
					                                       f32_3 %356 = OpFMul %351 %355 
					                                       f32_4 %357 = OpLoad %47 
					                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
					                                                      OpStore %47 %358 
					                              Uniform f32_4* %359 = OpAccessChain %23 %352 %31 
					                                       f32_4 %360 = OpLoad %359 
					                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
					                                       f32_4 %362 = OpLoad %9 
					                                       f32_3 %363 = OpVectorShuffle %362 %362 0 0 0 
					                                       f32_3 %364 = OpFMul %361 %363 
					                                       f32_4 %365 = OpLoad %47 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
					                                       f32_3 %367 = OpFAdd %364 %366 
					                                       f32_4 %368 = OpLoad %47 
					                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
					                                                      OpStore %47 %369 
					                              Uniform f32_4* %370 = OpAccessChain %23 %352 %39 
					                                       f32_4 %371 = OpLoad %370 
					                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
					                                       f32_4 %373 = OpLoad %9 
					                                       f32_3 %374 = OpVectorShuffle %373 %373 2 2 2 
					                                       f32_3 %375 = OpFMul %372 %374 
					                                       f32_4 %376 = OpLoad %47 
					                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
					                                       f32_3 %378 = OpFAdd %375 %377 
					                                       f32_4 %379 = OpLoad %9 
					                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
					                                                      OpStore %9 %380 
					                              Uniform f32_4* %381 = OpAccessChain %23 %352 %49 
					                                       f32_4 %382 = OpLoad %381 
					                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
					                                       f32_4 %384 = OpLoad %9 
					                                       f32_3 %385 = OpVectorShuffle %384 %384 3 3 3 
					                                       f32_3 %386 = OpFMul %383 %385 
					                                       f32_4 %387 = OpLoad %9 
					                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
					                                       f32_3 %389 = OpFAdd %386 %388 
					                                       f32_4 %390 = OpLoad %9 
					                                       f32_4 %391 = OpVectorShuffle %390 %389 4 5 6 3 
					                                                      OpStore %9 %391 
					                                Private f32* %392 = OpAccessChain %65 %86 
					                                         f32 %393 = OpLoad %392 
					                                Private f32* %394 = OpAccessChain %65 %86 
					                                         f32 %395 = OpLoad %394 
					                                         f32 %396 = OpFMul %393 %395 
					                                                      OpStore %147 %396 
					                                Private f32* %397 = OpAccessChain %65 %166 
					                                         f32 %398 = OpLoad %397 
					                                Private f32* %399 = OpAccessChain %65 %166 
					                                         f32 %400 = OpLoad %399 
					                                         f32 %401 = OpFMul %398 %400 
					                                         f32 %402 = OpLoad %147 
					                                         f32 %403 = OpFNegate %402 
					                                         f32 %404 = OpFAdd %401 %403 
					                                                      OpStore %147 %404 
					                                       f32_4 %405 = OpLoad %65 
					                                       f32_4 %406 = OpVectorShuffle %405 %405 1 3 2 0 
					                                       f32_4 %407 = OpLoad %65 
					                                       f32_4 %408 = OpFMul %406 %407 
					                                                      OpStore %47 %408 
					                              Uniform f32_4* %410 = OpAccessChain %23 %409 
					                                       f32_4 %411 = OpLoad %410 
					                                       f32_4 %412 = OpLoad %47 
					                                         f32 %413 = OpDot %411 %412 
					                                Private f32* %414 = OpAccessChain %65 %166 
					                                                      OpStore %414 %413 
					                              Uniform f32_4* %416 = OpAccessChain %23 %415 
					                                       f32_4 %417 = OpLoad %416 
					                                       f32_4 %418 = OpLoad %47 
					                                         f32 %419 = OpDot %417 %418 
					                                Private f32* %420 = OpAccessChain %65 %86 
					                                                      OpStore %420 %419 
					                              Uniform f32_4* %422 = OpAccessChain %23 %421 
					                                       f32_4 %423 = OpLoad %422 
					                                       f32_4 %424 = OpLoad %47 
					                                         f32 %425 = OpDot %423 %424 
					                                Private f32* %426 = OpAccessChain %65 %163 
					                                                      OpStore %426 %425 
					                              Uniform f32_4* %428 = OpAccessChain %23 %427 
					                                       f32_4 %429 = OpLoad %428 
					                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
					                                         f32 %431 = OpLoad %147 
					                                       f32_3 %432 = OpCompositeConstruct %431 %431 %431 
					                                       f32_3 %433 = OpFMul %430 %432 
					                                       f32_4 %434 = OpLoad %65 
					                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
					                                       f32_3 %436 = OpFAdd %433 %435 
					                                       f32_4 %437 = OpLoad %47 
					                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
					                                                      OpStore %47 %438 
					                                       f32_4 %441 = OpLoad %9 
					                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
					                                       f32_4 %443 = OpLoad %47 
					                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
					                                       f32_3 %445 = OpFAdd %442 %444 
					                                                      OpStore vs_TEXCOORD5 %445 
					                                                      OpStore vs_TEXCOORD8 %278 
					                                 Output f32* %447 = OpAccessChain %90 %31 %86 
					                                         f32 %448 = OpLoad %447 
					                                         f32 %449 = OpFNegate %448 
					                                 Output f32* %450 = OpAccessChain %90 %31 %86 
					                                                      OpStore %450 %449 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 766
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %68 %79 %128 %210 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpDecorate vs_TEXCOORD1 Location 12 
					                                                      OpDecorate vs_TEXCOORD2 Location 21 
					                                                      OpDecorate vs_TEXCOORD3 Location 26 
					                                                      OpMemberDecorate %34 0 Offset 34 
					                                                      OpMemberDecorate %34 1 Offset 34 
					                                                      OpMemberDecorate %34 2 Offset 34 
					                                                      OpMemberDecorate %34 3 Offset 34 
					                                                      OpMemberDecorate %34 4 Offset 34 
					                                                      OpMemberDecorate %34 5 Offset 34 
					                                                      OpMemberDecorate %34 6 Offset 34 
					                                                      OpMemberDecorate %34 7 Offset 34 
					                                                      OpMemberDecorate %34 8 Offset 34 
					                                                      OpMemberDecorate %34 9 Offset 34 
					                                                      OpMemberDecorate %34 10 Offset 34 
					                                                      OpMemberDecorate %34 11 Offset 34 
					                                                      OpMemberDecorate %34 12 Offset 34 
					                                                      OpMemberDecorate %34 13 Offset 34 
					                                                      OpMemberDecorate %34 14 Offset 34 
					                                                      OpDecorate %34 Block 
					                                                      OpDecorate %36 DescriptorSet 36 
					                                                      OpDecorate %36 Binding 36 
					                                                      OpDecorate %58 DescriptorSet 58 
					                                                      OpDecorate %58 Binding 58 
					                                                      OpDecorate %62 DescriptorSet 62 
					                                                      OpDecorate %62 Binding 62 
					                                                      OpDecorate vs_TEXCOORD0 Location 68 
					                                                      OpDecorate %79 Location 79 
					                                                      OpDecorate %86 DescriptorSet 86 
					                                                      OpDecorate %86 Binding 86 
					                                                      OpDecorate %88 DescriptorSet 88 
					                                                      OpDecorate %88 Binding 88 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate vs_TEXCOORD5 Location 210 
					                                                      OpDecorate %348 DescriptorSet 348 
					                                                      OpDecorate %348 Binding 348 
					                                                      OpDecorate %350 DescriptorSet 350 
					                                                      OpDecorate %350 Binding 350 
					                                                      OpDecorate %501 DescriptorSet 501 
					                                                      OpDecorate %501 Binding 501 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                              %13 = OpTypeInt 32 0 
					                                          u32 %14 = OpConstant 3 
					                                              %15 = OpTypePointer Input %6 
					                                          u32 %18 = OpConstant 0 
					                                              %19 = OpTypePointer Private %6 
					                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %24 = OpConstant 1 
					                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                          u32 %29 = OpConstant 2 
					                               Private f32_3* %31 = OpVariable Private 
					                                              %34 = OpTypeStruct %7 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
					                                              %35 = OpTypePointer Uniform %34 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %36 = OpVariable Uniform 
					                                              %37 = OpTypeInt 32 1 
					                                          i32 %38 = OpConstant 0 
					                                              %39 = OpTypePointer Uniform %7 
					                                 Private f32* %43 = OpVariable Private 
					                               Private f32_3* %49 = OpVariable Private 
					                                              %54 = OpTypePointer Private %10 
					                               Private f32_4* %55 = OpVariable Private 
					                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %57 = OpTypePointer UniformConstant %56 
					         UniformConstant read_only Texture2D* %58 = OpVariable UniformConstant 
					                                              %60 = OpTypeSampler 
					                                              %61 = OpTypePointer UniformConstant %60 
					                     UniformConstant sampler* %62 = OpVariable UniformConstant 
					                                              %64 = OpTypeSampledImage %56 
					                                              %66 = OpTypeVector %6 2 
					                                              %67 = OpTypePointer Input %66 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                          i32 %72 = OpConstant 14 
					                                              %73 = OpTypePointer Uniform %10 
					                                 Input f32_4* %79 = OpVariable Input 
					                               Private f32_4* %85 = OpVariable Private 
					         UniformConstant read_only Texture2D* %86 = OpVariable UniformConstant 
					                     UniformConstant sampler* %88 = OpVariable UniformConstant 
					                                         f32 %104 = OpConstant 3,674022E-40 
					                                       f32_2 %105 = OpConstantComposite %104 %104 
					                                         f32 %107 = OpConstant 3,674022E-40 
					                                       f32_2 %108 = OpConstantComposite %107 %107 
					                                Private f32* %112 = OpVariable Private 
					                                         f32 %119 = OpConstant 3,674022E-40 
					                                             %127 = OpTypePointer Output %10 
					                               Output f32_4* %128 = OpVariable Output 
					                                             %134 = OpTypePointer Output %6 
					                              Private f32_4* %136 = OpVariable Private 
					                              Private f32_3* %189 = OpVariable Private 
					                                         i32 %190 = OpConstant 2 
					                                         i32 %196 = OpConstant 3 
					                                         i32 %202 = OpConstant 4 
					                                             %209 = OpTypePointer Input %7 
					                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
					                                         f32 %214 = OpConstant 3,674022E-40 
					                                       f32_3 %215 = OpConstantComposite %214 %214 %214 
					                                             %217 = OpTypeBool 
					                                             %218 = OpTypePointer Private %217 
					                               Private bool* %219 = OpVariable Private 
					                                         i32 %220 = OpConstant 7 
					                                             %221 = OpTypePointer Uniform %6 
					                              Private f32_4* %235 = OpVariable Private 
					                              Private f32_3* %243 = OpVariable Private 
					                                         i32 %246 = OpConstant 5 
					                              Private f32_3* %255 = OpVariable Private 
					                                         i32 %258 = OpConstant 6 
					                                             %267 = OpTypeVector %217 3 
					                                             %268 = OpTypePointer Private %267 
					                             Private bool_3* %269 = OpVariable Private 
					                                       f32_4 %270 = OpConstantComposite %214 %214 %214 %214 
					                                             %273 = OpTypeVector %217 4 
					                                             %276 = OpTypePointer Function %7 
					                                             %281 = OpTypePointer Function %6 
					                                             %346 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %347 = OpTypePointer UniformConstant %346 
					      UniformConstant read_only TextureCube* %348 = OpVariable UniformConstant 
					                    UniformConstant sampler* %350 = OpVariable UniformConstant 
					                                             %352 = OpTypeSampledImage %346 
					                                         f32 %356 = OpConstant 3,674022E-40 
					                                         i32 %361 = OpConstant 8 
					                               Private bool* %384 = OpVariable Private 
					                                         f32 %387 = OpConstant 3,674022E-40 
					                                         i32 %392 = OpConstant 11 
					                                Private f32* %399 = OpVariable Private 
					                              Private f32_3* %412 = OpVariable Private 
					                                         i32 %415 = OpConstant 9 
					                              Private f32_3* %423 = OpVariable Private 
					                                         i32 %426 = OpConstant 10 
					                             Private bool_3* %434 = OpVariable Private 
					      UniformConstant read_only TextureCube* %501 = OpVariable UniformConstant 
					                                         i32 %512 = OpConstant 12 
					                                         f32 %565 = OpConstant 3,674022E-40 
					                                       f32_3 %566 = OpConstantComposite %565 %565 %565 
					                                         i32 %572 = OpConstant 1 
					                                         f32 %581 = OpConstant 3,674022E-40 
					                              Private f32_3* %611 = OpVariable Private 
					                                         f32 %620 = OpConstant 3,674022E-40 
					                                Private f32* %623 = OpVariable Private 
					                              Private f32_3* %651 = OpVariable Private 
					                                         f32 %692 = OpConstant 3,674022E-40 
					                                         f32 %694 = OpConstant 3,674022E-40 
					                                         f32 %701 = OpConstant 3,674022E-40 
					                                         i32 %703 = OpConstant 13 
					                                         f32 %738 = OpConstant 3,674022E-40 
					                                       f32_3 %750 = OpConstantComposite %694 %694 %694 
					                                         f32 %754 = OpConstant 3,674022E-40 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %277 = OpVariable Function 
					                               Function f32* %282 = OpVariable Function 
					                               Function f32* %294 = OpVariable Function 
					                               Function f32* %306 = OpVariable Function 
					                             Function f32_3* %439 = OpVariable Function 
					                               Function f32* %443 = OpVariable Function 
					                               Function f32* %455 = OpVariable Function 
					                               Function f32* %467 = OpVariable Function 
					                                   Input f32* %16 = OpAccessChain vs_TEXCOORD1 %14 
					                                          f32 %17 = OpLoad %16 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %17 
					                                   Input f32* %22 = OpAccessChain vs_TEXCOORD2 %14 
					                                          f32 %23 = OpLoad %22 
					                                 Private f32* %25 = OpAccessChain %9 %24 
					                                                      OpStore %25 %23 
					                                   Input f32* %27 = OpAccessChain vs_TEXCOORD3 %14 
					                                          f32 %28 = OpLoad %27 
					                                 Private f32* %30 = OpAccessChain %9 %29 
					                                                      OpStore %30 %28 
					                                        f32_3 %32 = OpLoad %9 
					                                        f32_3 %33 = OpFNegate %32 
					                               Uniform f32_3* %40 = OpAccessChain %36 %38 
					                                        f32_3 %41 = OpLoad %40 
					                                        f32_3 %42 = OpFAdd %33 %41 
					                                                      OpStore %31 %42 
					                                        f32_3 %44 = OpLoad %31 
					                                        f32_3 %45 = OpLoad %31 
					                                          f32 %46 = OpDot %44 %45 
					                                                      OpStore %43 %46 
					                                          f32 %47 = OpLoad %43 
					                                          f32 %48 = OpExtInst %1 32 %47 
					                                                      OpStore %43 %48 
					                                          f32 %50 = OpLoad %43 
					                                        f32_3 %51 = OpCompositeConstruct %50 %50 %50 
					                                        f32_3 %52 = OpLoad %31 
					                                        f32_3 %53 = OpFMul %51 %52 
					                                                      OpStore %49 %53 
					                          read_only Texture2D %59 = OpLoad %58 
					                                      sampler %63 = OpLoad %62 
					                   read_only Texture2DSampled %65 = OpSampledImage %59 %63 
					                                        f32_2 %69 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %70 = OpImageSampleImplicitLod %65 %69 
					                                                      OpStore %55 %70 
					                                        f32_4 %71 = OpLoad %55 
					                               Uniform f32_4* %74 = OpAccessChain %36 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpFMul %71 %75 
					                                                      OpStore %55 %76 
					                                        f32_4 %77 = OpLoad %55 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %78 %81 
					                                        f32_4 %83 = OpLoad %55 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %55 %84 
					                          read_only Texture2D %87 = OpLoad %86 
					                                      sampler %89 = OpLoad %88 
					                   read_only Texture2DSampled %90 = OpSampledImage %87 %89 
					                                        f32_2 %91 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %92 = OpImageSampleImplicitLod %90 %91 
					                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 3 
					                                        f32_4 %94 = OpLoad %85 
					                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
					                                                      OpStore %85 %95 
					                                 Private f32* %96 = OpAccessChain %85 %29 
					                                          f32 %97 = OpLoad %96 
					                                 Private f32* %98 = OpAccessChain %85 %18 
					                                          f32 %99 = OpLoad %98 
					                                         f32 %100 = OpFMul %97 %99 
					                                Private f32* %101 = OpAccessChain %85 %18 
					                                                      OpStore %101 %100 
					                                       f32_4 %102 = OpLoad %85 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %106 = OpFMul %103 %105 
					                                       f32_2 %109 = OpFAdd %106 %108 
					                                       f32_4 %110 = OpLoad %85 
					                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
					                                                      OpStore %85 %111 
					                                       f32_4 %113 = OpLoad %85 
					                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
					                                       f32_4 %115 = OpLoad %85 
					                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
					                                         f32 %117 = OpDot %114 %116 
					                                                      OpStore %112 %117 
					                                         f32 %118 = OpLoad %112 
					                                         f32 %120 = OpExtInst %1 37 %118 %119 
					                                                      OpStore %112 %120 
					                                         f32 %121 = OpLoad %112 
					                                         f32 %122 = OpFNegate %121 
					                                         f32 %123 = OpFAdd %122 %119 
					                                                      OpStore %112 %123 
					                                         f32 %124 = OpLoad %112 
					                                         f32 %125 = OpExtInst %1 31 %124 
					                                Private f32* %126 = OpAccessChain %85 %29 
					                                                      OpStore %126 %125 
					                                Private f32* %129 = OpAccessChain %55 %14 
					                                         f32 %130 = OpLoad %129 
					                                  Input f32* %131 = OpAccessChain %79 %14 
					                                         f32 %132 = OpLoad %131 
					                                         f32 %133 = OpFMul %130 %132 
					                                 Output f32* %135 = OpAccessChain %128 %14 
					                                                      OpStore %135 %133 
					                                       f32_4 %137 = OpLoad vs_TEXCOORD1 
					                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
					                                       f32_4 %139 = OpLoad %85 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                         f32 %141 = OpDot %138 %140 
					                                Private f32* %142 = OpAccessChain %136 %18 
					                                                      OpStore %142 %141 
					                                       f32_4 %143 = OpLoad vs_TEXCOORD2 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
					                                       f32_4 %145 = OpLoad %85 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                         f32 %147 = OpDot %144 %146 
					                                Private f32* %148 = OpAccessChain %136 %24 
					                                                      OpStore %148 %147 
					                                       f32_4 %149 = OpLoad vs_TEXCOORD3 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_4 %151 = OpLoad %85 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
					                                         f32 %153 = OpDot %150 %152 
					                                Private f32* %154 = OpAccessChain %136 %29 
					                                                      OpStore %154 %153 
					                                       f32_4 %155 = OpLoad %136 
					                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
					                                       f32_4 %157 = OpLoad %136 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                         f32 %159 = OpDot %156 %158 
					                                                      OpStore %112 %159 
					                                         f32 %160 = OpLoad %112 
					                                         f32 %161 = OpExtInst %1 32 %160 
					                                                      OpStore %112 %161 
					                                         f32 %162 = OpLoad %112 
					                                       f32_3 %163 = OpCompositeConstruct %162 %162 %162 
					                                       f32_4 %164 = OpLoad %136 
					                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
					                                       f32_3 %166 = OpFMul %163 %165 
					                                       f32_4 %167 = OpLoad %85 
					                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
					                                                      OpStore %85 %168 
					                                       f32_3 %169 = OpLoad %49 
					                                       f32_3 %170 = OpFNegate %169 
					                                       f32_4 %171 = OpLoad %85 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %170 %172 
					                                                      OpStore %112 %173 
					                                         f32 %174 = OpLoad %112 
					                                         f32 %175 = OpLoad %112 
					                                         f32 %176 = OpFAdd %174 %175 
					                                                      OpStore %112 %176 
					                                       f32_4 %177 = OpLoad %85 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpLoad %112 
					                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
					                                       f32_3 %181 = OpFNegate %180 
					                                       f32_3 %182 = OpFMul %178 %181 
					                                       f32_3 %183 = OpLoad %49 
					                                       f32_3 %184 = OpFNegate %183 
					                                       f32_3 %185 = OpFAdd %182 %184 
					                                       f32_4 %186 = OpLoad %136 
					                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
					                                                      OpStore %136 %187 
					                                Private f32* %188 = OpAccessChain %85 %14 
					                                                      OpStore %188 %119 
					                              Uniform f32_4* %191 = OpAccessChain %36 %190 
					                                       f32_4 %192 = OpLoad %191 
					                                       f32_4 %193 = OpLoad %85 
					                                         f32 %194 = OpDot %192 %193 
					                                Private f32* %195 = OpAccessChain %189 %18 
					                                                      OpStore %195 %194 
					                              Uniform f32_4* %197 = OpAccessChain %36 %196 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_4 %199 = OpLoad %85 
					                                         f32 %200 = OpDot %198 %199 
					                                Private f32* %201 = OpAccessChain %189 %24 
					                                                      OpStore %201 %200 
					                              Uniform f32_4* %203 = OpAccessChain %36 %202 
					                                       f32_4 %204 = OpLoad %203 
					                                       f32_4 %205 = OpLoad %85 
					                                         f32 %206 = OpDot %204 %205 
					                                Private f32* %207 = OpAccessChain %189 %29 
					                                                      OpStore %207 %206 
					                                       f32_3 %208 = OpLoad %189 
					                                       f32_3 %211 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %212 = OpFAdd %208 %211 
					                                                      OpStore %189 %212 
					                                       f32_3 %213 = OpLoad %189 
					                                       f32_3 %216 = OpExtInst %1 40 %213 %215 
					                                                      OpStore %189 %216 
					                                Uniform f32* %222 = OpAccessChain %36 %220 %14 
					                                         f32 %223 = OpLoad %222 
					                                        bool %224 = OpFOrdLessThan %214 %223 
					                                                      OpStore %219 %224 
					                                        bool %225 = OpLoad %219 
					                                                      OpSelectionMerge %227 None 
					                                                      OpBranchConditional %225 %226 %341 
					                                             %226 = OpLabel 
					                                       f32_4 %228 = OpLoad %136 
					                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
					                                       f32_4 %230 = OpLoad %136 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                         f32 %232 = OpDot %229 %231 
					                                                      OpStore %112 %232 
					                                         f32 %233 = OpLoad %112 
					                                         f32 %234 = OpExtInst %1 32 %233 
					                                                      OpStore %112 %234 
					                                         f32 %236 = OpLoad %112 
					                                       f32_3 %237 = OpCompositeConstruct %236 %236 %236 
					                                       f32_4 %238 = OpLoad %136 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                       f32_3 %240 = OpFMul %237 %239 
					                                       f32_4 %241 = OpLoad %235 
					                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
					                                                      OpStore %235 %242 
					                                       f32_3 %244 = OpLoad %9 
					                                       f32_3 %245 = OpFNegate %244 
					                              Uniform f32_4* %247 = OpAccessChain %36 %246 
					                                       f32_4 %248 = OpLoad %247 
					                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
					                                       f32_3 %250 = OpFAdd %245 %249 
					                                                      OpStore %243 %250 
					                                       f32_3 %251 = OpLoad %243 
					                                       f32_4 %252 = OpLoad %235 
					                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
					                                       f32_3 %254 = OpFDiv %251 %253 
					                                                      OpStore %243 %254 
					                                       f32_3 %256 = OpLoad %9 
					                                       f32_3 %257 = OpFNegate %256 
					                              Uniform f32_4* %259 = OpAccessChain %36 %258 
					                                       f32_4 %260 = OpLoad %259 
					                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
					                                       f32_3 %262 = OpFAdd %257 %261 
					                                                      OpStore %255 %262 
					                                       f32_3 %263 = OpLoad %255 
					                                       f32_4 %264 = OpLoad %235 
					                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
					                                       f32_3 %266 = OpFDiv %263 %265 
					                                                      OpStore %255 %266 
					                                       f32_4 %271 = OpLoad %235 
					                                       f32_4 %272 = OpVectorShuffle %271 %271 0 1 2 0 
					                                      bool_4 %274 = OpFOrdLessThan %270 %272 
					                                      bool_3 %275 = OpVectorShuffle %274 %274 0 1 2 
					                                                      OpStore %269 %275 
					                                       f32_3 %278 = OpLoad %243 
					                                                      OpStore %277 %278 
					                               Private bool* %279 = OpAccessChain %269 %18 
					                                        bool %280 = OpLoad %279 
					                                                      OpSelectionMerge %284 None 
					                                                      OpBranchConditional %280 %283 %287 
					                                             %283 = OpLabel 
					                                Private f32* %285 = OpAccessChain %243 %18 
					                                         f32 %286 = OpLoad %285 
					                                                      OpStore %282 %286 
					                                                      OpBranch %284 
					                                             %287 = OpLabel 
					                                Private f32* %288 = OpAccessChain %255 %18 
					                                         f32 %289 = OpLoad %288 
					                                                      OpStore %282 %289 
					                                                      OpBranch %284 
					                                             %284 = OpLabel 
					                                         f32 %290 = OpLoad %282 
					                               Function f32* %291 = OpAccessChain %277 %18 
					                                                      OpStore %291 %290 
					                               Private bool* %292 = OpAccessChain %269 %24 
					                                        bool %293 = OpLoad %292 
					                                                      OpSelectionMerge %296 None 
					                                                      OpBranchConditional %293 %295 %299 
					                                             %295 = OpLabel 
					                                Private f32* %297 = OpAccessChain %243 %24 
					                                         f32 %298 = OpLoad %297 
					                                                      OpStore %294 %298 
					                                                      OpBranch %296 
					                                             %299 = OpLabel 
					                                Private f32* %300 = OpAccessChain %255 %24 
					                                         f32 %301 = OpLoad %300 
					                                                      OpStore %294 %301 
					                                                      OpBranch %296 
					                                             %296 = OpLabel 
					                                         f32 %302 = OpLoad %294 
					                               Function f32* %303 = OpAccessChain %277 %24 
					                                                      OpStore %303 %302 
					                               Private bool* %304 = OpAccessChain %269 %29 
					                                        bool %305 = OpLoad %304 
					                                                      OpSelectionMerge %308 None 
					                                                      OpBranchConditional %305 %307 %311 
					                                             %307 = OpLabel 
					                                Private f32* %309 = OpAccessChain %243 %29 
					                                         f32 %310 = OpLoad %309 
					                                                      OpStore %306 %310 
					                                                      OpBranch %308 
					                                             %311 = OpLabel 
					                                Private f32* %312 = OpAccessChain %255 %29 
					                                         f32 %313 = OpLoad %312 
					                                                      OpStore %306 %313 
					                                                      OpBranch %308 
					                                             %308 = OpLabel 
					                                         f32 %314 = OpLoad %306 
					                               Function f32* %315 = OpAccessChain %277 %29 
					                                                      OpStore %315 %314 
					                                       f32_3 %316 = OpLoad %277 
					                                                      OpStore %243 %316 
					                                Private f32* %317 = OpAccessChain %243 %24 
					                                         f32 %318 = OpLoad %317 
					                                Private f32* %319 = OpAccessChain %243 %18 
					                                         f32 %320 = OpLoad %319 
					                                         f32 %321 = OpExtInst %1 37 %318 %320 
					                                                      OpStore %112 %321 
					                                Private f32* %322 = OpAccessChain %243 %29 
					                                         f32 %323 = OpLoad %322 
					                                         f32 %324 = OpLoad %112 
					                                         f32 %325 = OpExtInst %1 37 %323 %324 
					                                                      OpStore %112 %325 
					                                       f32_3 %326 = OpLoad %9 
					                              Uniform f32_4* %327 = OpAccessChain %36 %220 
					                                       f32_4 %328 = OpLoad %327 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_3 %330 = OpFNegate %329 
					                                       f32_3 %331 = OpFAdd %326 %330 
					                                                      OpStore %243 %331 
					                                       f32_4 %332 = OpLoad %235 
					                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
					                                         f32 %334 = OpLoad %112 
					                                       f32_3 %335 = OpCompositeConstruct %334 %334 %334 
					                                       f32_3 %336 = OpFMul %333 %335 
					                                       f32_3 %337 = OpLoad %243 
					                                       f32_3 %338 = OpFAdd %336 %337 
					                                       f32_4 %339 = OpLoad %235 
					                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
					                                                      OpStore %235 %340 
					                                                      OpBranch %227 
					                                             %341 = OpLabel 
					                                       f32_4 %342 = OpLoad %136 
					                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
					                                       f32_4 %344 = OpLoad %235 
					                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 6 3 
					                                                      OpStore %235 %345 
					                                                      OpBranch %227 
					                                             %227 = OpLabel 
					                       read_only TextureCube %349 = OpLoad %348 
					                                     sampler %351 = OpLoad %350 
					                read_only TextureCubeSampled %353 = OpSampledImage %349 %351 
					                                       f32_4 %354 = OpLoad %235 
					                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
					                                       f32_4 %357 = OpImageSampleExplicitLod %353 %355 Lod %10 
					                                                      OpStore %235 %357 
					                                Private f32* %358 = OpAccessChain %235 %14 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFAdd %359 %107 
					                                                      OpStore %112 %360 
					                                Uniform f32* %362 = OpAccessChain %36 %361 %14 
					                                         f32 %363 = OpLoad %362 
					                                         f32 %364 = OpLoad %112 
					                                         f32 %365 = OpFMul %363 %364 
					                                         f32 %366 = OpFAdd %365 %119 
					                                                      OpStore %112 %366 
					                                         f32 %367 = OpLoad %112 
					                                         f32 %368 = OpExtInst %1 30 %367 
					                                                      OpStore %112 %368 
					                                         f32 %369 = OpLoad %112 
					                                Uniform f32* %370 = OpAccessChain %36 %361 %24 
					                                         f32 %371 = OpLoad %370 
					                                         f32 %372 = OpFMul %369 %371 
					                                                      OpStore %112 %372 
					                                         f32 %373 = OpLoad %112 
					                                         f32 %374 = OpExtInst %1 29 %373 
					                                                      OpStore %112 %374 
					                                         f32 %375 = OpLoad %112 
					                                Uniform f32* %376 = OpAccessChain %36 %361 %18 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                                      OpStore %112 %378 
					                                       f32_4 %379 = OpLoad %235 
					                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
					                                         f32 %381 = OpLoad %112 
					                                       f32_3 %382 = OpCompositeConstruct %381 %381 %381 
					                                       f32_3 %383 = OpFMul %380 %382 
					                                                      OpStore %243 %383 
					                                Uniform f32* %385 = OpAccessChain %36 %258 %14 
					                                         f32 %386 = OpLoad %385 
					                                        bool %388 = OpFOrdLessThan %386 %387 
					                                                      OpStore %384 %388 
					                                        bool %389 = OpLoad %384 
					                                                      OpSelectionMerge %391 None 
					                                                      OpBranchConditional %389 %390 %391 
					                                             %390 = OpLabel 
					                                Uniform f32* %393 = OpAccessChain %36 %392 %14 
					                                         f32 %394 = OpLoad %393 
					                                        bool %395 = OpFOrdLessThan %214 %394 
					                                                      OpStore %384 %395 
					                                        bool %396 = OpLoad %384 
					                                                      OpSelectionMerge %398 None 
					                                                      OpBranchConditional %396 %397 %398 
					                                             %397 = OpLabel 
					                                       f32_4 %400 = OpLoad %136 
					                                       f32_3 %401 = OpVectorShuffle %400 %400 0 1 2 
					                                       f32_4 %402 = OpLoad %136 
					                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
					                                         f32 %404 = OpDot %401 %403 
					                                                      OpStore %399 %404 
					                                         f32 %405 = OpLoad %399 
					                                         f32 %406 = OpExtInst %1 32 %405 
					                                                      OpStore %399 %406 
					                                         f32 %407 = OpLoad %399 
					                                       f32_3 %408 = OpCompositeConstruct %407 %407 %407 
					                                       f32_4 %409 = OpLoad %136 
					                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
					                                       f32_3 %411 = OpFMul %408 %410 
					                                                      OpStore %255 %411 
					                                       f32_3 %413 = OpLoad %9 
					                                       f32_3 %414 = OpFNegate %413 
					                              Uniform f32_4* %416 = OpAccessChain %36 %415 
					                                       f32_4 %417 = OpLoad %416 
					                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
					                                       f32_3 %419 = OpFAdd %414 %418 
					                                                      OpStore %412 %419 
					                                       f32_3 %420 = OpLoad %412 
					                                       f32_3 %421 = OpLoad %255 
					                                       f32_3 %422 = OpFDiv %420 %421 
					                                                      OpStore %412 %422 
					                                       f32_3 %424 = OpLoad %9 
					                                       f32_3 %425 = OpFNegate %424 
					                              Uniform f32_4* %427 = OpAccessChain %36 %426 
					                                       f32_4 %428 = OpLoad %427 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFAdd %425 %429 
					                                                      OpStore %423 %430 
					                                       f32_3 %431 = OpLoad %423 
					                                       f32_3 %432 = OpLoad %255 
					                                       f32_3 %433 = OpFDiv %431 %432 
					                                                      OpStore %423 %433 
					                                       f32_3 %435 = OpLoad %255 
					                                       f32_4 %436 = OpVectorShuffle %435 %435 0 1 2 0 
					                                      bool_4 %437 = OpFOrdLessThan %270 %436 
					                                      bool_3 %438 = OpVectorShuffle %437 %437 0 1 2 
					                                                      OpStore %434 %438 
					                                       f32_3 %440 = OpLoad %412 
					                                                      OpStore %439 %440 
					                               Private bool* %441 = OpAccessChain %434 %18 
					                                        bool %442 = OpLoad %441 
					                                                      OpSelectionMerge %445 None 
					                                                      OpBranchConditional %442 %444 %448 
					                                             %444 = OpLabel 
					                                Private f32* %446 = OpAccessChain %412 %18 
					                                         f32 %447 = OpLoad %446 
					                                                      OpStore %443 %447 
					                                                      OpBranch %445 
					                                             %448 = OpLabel 
					                                Private f32* %449 = OpAccessChain %423 %18 
					                                         f32 %450 = OpLoad %449 
					                                                      OpStore %443 %450 
					                                                      OpBranch %445 
					                                             %445 = OpLabel 
					                                         f32 %451 = OpLoad %443 
					                               Function f32* %452 = OpAccessChain %439 %18 
					                                                      OpStore %452 %451 
					                               Private bool* %453 = OpAccessChain %434 %24 
					                                        bool %454 = OpLoad %453 
					                                                      OpSelectionMerge %457 None 
					                                                      OpBranchConditional %454 %456 %460 
					                                             %456 = OpLabel 
					                                Private f32* %458 = OpAccessChain %412 %24 
					                                         f32 %459 = OpLoad %458 
					                                                      OpStore %455 %459 
					                                                      OpBranch %457 
					                                             %460 = OpLabel 
					                                Private f32* %461 = OpAccessChain %423 %24 
					                                         f32 %462 = OpLoad %461 
					                                                      OpStore %455 %462 
					                                                      OpBranch %457 
					                                             %457 = OpLabel 
					                                         f32 %463 = OpLoad %455 
					                               Function f32* %464 = OpAccessChain %439 %24 
					                                                      OpStore %464 %463 
					                               Private bool* %465 = OpAccessChain %434 %29 
					                                        bool %466 = OpLoad %465 
					                                                      OpSelectionMerge %469 None 
					                                                      OpBranchConditional %466 %468 %472 
					                                             %468 = OpLabel 
					                                Private f32* %470 = OpAccessChain %412 %29 
					                                         f32 %471 = OpLoad %470 
					                                                      OpStore %467 %471 
					                                                      OpBranch %469 
					                                             %472 = OpLabel 
					                                Private f32* %473 = OpAccessChain %423 %29 
					                                         f32 %474 = OpLoad %473 
					                                                      OpStore %467 %474 
					                                                      OpBranch %469 
					                                             %469 = OpLabel 
					                                         f32 %475 = OpLoad %467 
					                               Function f32* %476 = OpAccessChain %439 %29 
					                                                      OpStore %476 %475 
					                                       f32_3 %477 = OpLoad %439 
					                                                      OpStore %412 %477 
					                                Private f32* %478 = OpAccessChain %412 %24 
					                                         f32 %479 = OpLoad %478 
					                                Private f32* %480 = OpAccessChain %412 %18 
					                                         f32 %481 = OpLoad %480 
					                                         f32 %482 = OpExtInst %1 37 %479 %481 
					                                                      OpStore %399 %482 
					                                Private f32* %483 = OpAccessChain %412 %29 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpLoad %399 
					                                         f32 %486 = OpExtInst %1 37 %484 %485 
					                                                      OpStore %399 %486 
					                                       f32_3 %487 = OpLoad %9 
					                              Uniform f32_4* %488 = OpAccessChain %36 %392 
					                                       f32_4 %489 = OpLoad %488 
					                                       f32_3 %490 = OpVectorShuffle %489 %489 0 1 2 
					                                       f32_3 %491 = OpFNegate %490 
					                                       f32_3 %492 = OpFAdd %487 %491 
					                                                      OpStore %9 %492 
					                                       f32_3 %493 = OpLoad %255 
					                                         f32 %494 = OpLoad %399 
					                                       f32_3 %495 = OpCompositeConstruct %494 %494 %494 
					                                       f32_3 %496 = OpFMul %493 %495 
					                                       f32_3 %497 = OpLoad %9 
					                                       f32_3 %498 = OpFAdd %496 %497 
					                                       f32_4 %499 = OpLoad %136 
					                                       f32_4 %500 = OpVectorShuffle %499 %498 4 5 6 3 
					                                                      OpStore %136 %500 
					                                                      OpBranch %398 
					                                             %398 = OpLabel 
					                       read_only TextureCube %502 = OpLoad %501 
					                                     sampler %503 = OpLoad %350 
					                read_only TextureCubeSampled %504 = OpSampledImage %502 %503 
					                                       f32_4 %505 = OpLoad %136 
					                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
					                                       f32_4 %507 = OpImageSampleExplicitLod %504 %506 Lod %10 
					                                                      OpStore %136 %507 
					                                Private f32* %508 = OpAccessChain %136 %14 
					                                         f32 %509 = OpLoad %508 
					                                         f32 %510 = OpFAdd %509 %107 
					                                Private f32* %511 = OpAccessChain %9 %18 
					                                                      OpStore %511 %510 
					                                Uniform f32* %513 = OpAccessChain %36 %512 %14 
					                                         f32 %514 = OpLoad %513 
					                                Private f32* %515 = OpAccessChain %9 %18 
					                                         f32 %516 = OpLoad %515 
					                                         f32 %517 = OpFMul %514 %516 
					                                         f32 %518 = OpFAdd %517 %119 
					                                Private f32* %519 = OpAccessChain %9 %18 
					                                                      OpStore %519 %518 
					                                Private f32* %520 = OpAccessChain %9 %18 
					                                         f32 %521 = OpLoad %520 
					                                         f32 %522 = OpExtInst %1 30 %521 
					                                Private f32* %523 = OpAccessChain %9 %18 
					                                                      OpStore %523 %522 
					                                Private f32* %524 = OpAccessChain %9 %18 
					                                         f32 %525 = OpLoad %524 
					                                Uniform f32* %526 = OpAccessChain %36 %512 %24 
					                                         f32 %527 = OpLoad %526 
					                                         f32 %528 = OpFMul %525 %527 
					                                Private f32* %529 = OpAccessChain %9 %18 
					                                                      OpStore %529 %528 
					                                Private f32* %530 = OpAccessChain %9 %18 
					                                         f32 %531 = OpLoad %530 
					                                         f32 %532 = OpExtInst %1 29 %531 
					                                Private f32* %533 = OpAccessChain %9 %18 
					                                                      OpStore %533 %532 
					                                Private f32* %534 = OpAccessChain %9 %18 
					                                         f32 %535 = OpLoad %534 
					                                Uniform f32* %536 = OpAccessChain %36 %512 %18 
					                                         f32 %537 = OpLoad %536 
					                                         f32 %538 = OpFMul %535 %537 
					                                Private f32* %539 = OpAccessChain %9 %18 
					                                                      OpStore %539 %538 
					                                       f32_4 %540 = OpLoad %136 
					                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
					                                       f32_3 %542 = OpLoad %9 
					                                       f32_3 %543 = OpVectorShuffle %542 %542 0 0 0 
					                                       f32_3 %544 = OpFMul %541 %543 
					                                                      OpStore %9 %544 
					                                         f32 %545 = OpLoad %112 
					                                       f32_3 %546 = OpCompositeConstruct %545 %545 %545 
					                                       f32_4 %547 = OpLoad %235 
					                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
					                                       f32_3 %549 = OpFMul %546 %548 
					                                       f32_3 %550 = OpLoad %9 
					                                       f32_3 %551 = OpFNegate %550 
					                                       f32_3 %552 = OpFAdd %549 %551 
					                                       f32_4 %553 = OpLoad %136 
					                                       f32_4 %554 = OpVectorShuffle %553 %552 4 5 6 3 
					                                                      OpStore %136 %554 
					                              Uniform f32_4* %555 = OpAccessChain %36 %258 
					                                       f32_4 %556 = OpLoad %555 
					                                       f32_3 %557 = OpVectorShuffle %556 %556 3 3 3 
					                                       f32_4 %558 = OpLoad %136 
					                                       f32_3 %559 = OpVectorShuffle %558 %558 0 1 2 
					                                       f32_3 %560 = OpFMul %557 %559 
					                                       f32_3 %561 = OpLoad %9 
					                                       f32_3 %562 = OpFAdd %560 %561 
					                                                      OpStore %243 %562 
					                                                      OpBranch %391 
					                                             %391 = OpLabel 
					                                       f32_4 %563 = OpLoad %55 
					                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
					                                       f32_3 %567 = OpFMul %564 %566 
					                                                      OpStore %9 %567 
					                                       f32_3 %568 = OpLoad %31 
					                                         f32 %569 = OpLoad %43 
					                                       f32_3 %570 = OpCompositeConstruct %569 %569 %569 
					                                       f32_3 %571 = OpFMul %568 %570 
					                              Uniform f32_4* %573 = OpAccessChain %36 %572 
					                                       f32_4 %574 = OpLoad %573 
					                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
					                                       f32_3 %576 = OpFAdd %571 %575 
					                                                      OpStore %31 %576 
					                                       f32_3 %577 = OpLoad %31 
					                                       f32_3 %578 = OpLoad %31 
					                                         f32 %579 = OpDot %577 %578 
					                                                      OpStore %43 %579 
					                                         f32 %580 = OpLoad %43 
					                                         f32 %582 = OpExtInst %1 40 %580 %581 
					                                                      OpStore %43 %582 
					                                         f32 %583 = OpLoad %43 
					                                         f32 %584 = OpExtInst %1 32 %583 
					                                                      OpStore %43 %584 
					                                         f32 %585 = OpLoad %43 
					                                       f32_3 %586 = OpCompositeConstruct %585 %585 %585 
					                                       f32_3 %587 = OpLoad %31 
					                                       f32_3 %588 = OpFMul %586 %587 
					                                                      OpStore %31 %588 
					                                       f32_4 %589 = OpLoad %85 
					                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
					                                       f32_3 %591 = OpLoad %49 
					                                         f32 %592 = OpDot %590 %591 
					                                                      OpStore %43 %592 
					                                       f32_4 %593 = OpLoad %85 
					                                       f32_3 %594 = OpVectorShuffle %593 %593 0 1 2 
					                              Uniform f32_4* %595 = OpAccessChain %36 %572 
					                                       f32_4 %596 = OpLoad %595 
					                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
					                                         f32 %598 = OpDot %594 %597 
					                                                      OpStore %112 %598 
					                                         f32 %599 = OpLoad %112 
					                                         f32 %600 = OpExtInst %1 43 %599 %214 %119 
					                                                      OpStore %112 %600 
					                              Uniform f32_4* %601 = OpAccessChain %36 %572 
					                                       f32_4 %602 = OpLoad %601 
					                                       f32_3 %603 = OpVectorShuffle %602 %602 0 1 2 
					                                       f32_3 %604 = OpLoad %31 
					                                         f32 %605 = OpDot %603 %604 
					                                Private f32* %606 = OpAccessChain %31 %18 
					                                                      OpStore %606 %605 
					                                Private f32* %607 = OpAccessChain %31 %18 
					                                         f32 %608 = OpLoad %607 
					                                         f32 %609 = OpExtInst %1 43 %608 %214 %119 
					                                Private f32* %610 = OpAccessChain %31 %18 
					                                                      OpStore %610 %609 
					                                       f32_3 %612 = OpLoad %31 
					                                       f32_2 %613 = OpVectorShuffle %612 %612 0 0 
					                                       f32_3 %614 = OpLoad %31 
					                                       f32_2 %615 = OpVectorShuffle %614 %614 0 0 
					                                         f32 %616 = OpDot %613 %615 
					                                Private f32* %617 = OpAccessChain %611 %18 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %611 %18 
					                                         f32 %619 = OpLoad %618 
					                                         f32 %621 = OpFAdd %619 %620 
					                                Private f32* %622 = OpAccessChain %611 %18 
					                                                      OpStore %622 %621 
					                                         f32 %624 = OpLoad %112 
					                                         f32 %625 = OpFNegate %624 
					                                         f32 %626 = OpFAdd %625 %119 
					                                                      OpStore %623 %626 
					                                         f32 %627 = OpLoad %623 
					                                         f32 %628 = OpLoad %623 
					                                         f32 %629 = OpFMul %627 %628 
					                                Private f32* %630 = OpAccessChain %49 %18 
					                                                      OpStore %630 %629 
					                                Private f32* %631 = OpAccessChain %49 %18 
					                                         f32 %632 = OpLoad %631 
					                                Private f32* %633 = OpAccessChain %49 %18 
					                                         f32 %634 = OpLoad %633 
					                                         f32 %635 = OpFMul %632 %634 
					                                Private f32* %636 = OpAccessChain %49 %18 
					                                                      OpStore %636 %635 
					                                         f32 %637 = OpLoad %623 
					                                Private f32* %638 = OpAccessChain %49 %18 
					                                         f32 %639 = OpLoad %638 
					                                         f32 %640 = OpFMul %637 %639 
					                                                      OpStore %623 %640 
					                                Private f32* %641 = OpAccessChain %611 %18 
					                                         f32 %642 = OpLoad %641 
					                                         f32 %643 = OpLoad %623 
					                                         f32 %644 = OpFMul %642 %643 
					                                         f32 %645 = OpFAdd %644 %119 
					                                                      OpStore %623 %645 
					                                         f32 %646 = OpLoad %43 
					                                         f32 %647 = OpExtInst %1 4 %646 
					                                         f32 %648 = OpFNegate %647 
					                                         f32 %649 = OpFAdd %648 %119 
					                                Private f32* %650 = OpAccessChain %49 %18 
					                                                      OpStore %650 %649 
					                                Private f32* %652 = OpAccessChain %49 %18 
					                                         f32 %653 = OpLoad %652 
					                                Private f32* %654 = OpAccessChain %49 %18 
					                                         f32 %655 = OpLoad %654 
					                                         f32 %656 = OpFMul %653 %655 
					                                Private f32* %657 = OpAccessChain %651 %18 
					                                                      OpStore %657 %656 
					                                Private f32* %658 = OpAccessChain %651 %18 
					                                         f32 %659 = OpLoad %658 
					                                Private f32* %660 = OpAccessChain %651 %18 
					                                         f32 %661 = OpLoad %660 
					                                         f32 %662 = OpFMul %659 %661 
					                                Private f32* %663 = OpAccessChain %651 %18 
					                                                      OpStore %663 %662 
					                                Private f32* %664 = OpAccessChain %49 %18 
					                                         f32 %665 = OpLoad %664 
					                                Private f32* %666 = OpAccessChain %651 %18 
					                                         f32 %667 = OpLoad %666 
					                                         f32 %668 = OpFMul %665 %667 
					                                Private f32* %669 = OpAccessChain %49 %18 
					                                                      OpStore %669 %668 
					                                Private f32* %670 = OpAccessChain %611 %18 
					                                         f32 %671 = OpLoad %670 
					                                Private f32* %672 = OpAccessChain %49 %18 
					                                         f32 %673 = OpLoad %672 
					                                         f32 %674 = OpFMul %671 %673 
					                                         f32 %675 = OpFAdd %674 %119 
					                                Private f32* %676 = OpAccessChain %611 %18 
					                                                      OpStore %676 %675 
					                                Private f32* %677 = OpAccessChain %611 %18 
					                                         f32 %678 = OpLoad %677 
					                                         f32 %679 = OpLoad %623 
					                                         f32 %680 = OpFMul %678 %679 
					                                Private f32* %681 = OpAccessChain %611 %18 
					                                                      OpStore %681 %680 
					                                         f32 %682 = OpLoad %112 
					                                Private f32* %683 = OpAccessChain %611 %18 
					                                         f32 %684 = OpLoad %683 
					                                         f32 %685 = OpFMul %682 %684 
					                                Private f32* %686 = OpAccessChain %611 %18 
					                                                      OpStore %686 %685 
					                                         f32 %687 = OpLoad %43 
					                                         f32 %688 = OpExtInst %1 4 %687 
					                                         f32 %689 = OpLoad %112 
					                                         f32 %690 = OpFAdd %688 %689 
					                                                      OpStore %43 %690 
					                                         f32 %691 = OpLoad %43 
					                                         f32 %693 = OpFAdd %691 %692 
					                                                      OpStore %43 %693 
					                                         f32 %695 = OpLoad %43 
					                                         f32 %696 = OpFDiv %694 %695 
					                                                      OpStore %43 %696 
					                                         f32 %697 = OpLoad %112 
					                                         f32 %698 = OpLoad %43 
					                                         f32 %699 = OpFMul %697 %698 
					                                                      OpStore %43 %699 
					                                         f32 %700 = OpLoad %43 
					                                         f32 %702 = OpFMul %700 %701 
					                                                      OpStore %43 %702 
					                              Uniform f32_4* %704 = OpAccessChain %36 %703 
					                                       f32_4 %705 = OpLoad %704 
					                                       f32_3 %706 = OpVectorShuffle %705 %705 0 1 2 
					                                       f32_3 %707 = OpLoad %611 
					                                       f32_3 %708 = OpVectorShuffle %707 %707 0 0 0 
					                                       f32_3 %709 = OpFMul %706 %708 
					                                       f32_3 %710 = OpLoad %189 
					                                       f32_3 %711 = OpFAdd %709 %710 
					                                                      OpStore %611 %711 
					                                         f32 %712 = OpLoad %43 
					                                       f32_3 %713 = OpCompositeConstruct %712 %712 %712 
					                              Uniform f32_4* %714 = OpAccessChain %36 %703 
					                                       f32_4 %715 = OpLoad %714 
					                                       f32_3 %716 = OpVectorShuffle %715 %715 0 1 2 
					                                       f32_3 %717 = OpFMul %713 %716 
					                                                      OpStore %651 %717 
					                                Private f32* %718 = OpAccessChain %31 %18 
					                                         f32 %719 = OpLoad %718 
					                                         f32 %720 = OpFNegate %719 
					                                         f32 %721 = OpFAdd %720 %119 
					                                                      OpStore %43 %721 
					                                         f32 %722 = OpLoad %43 
					                                         f32 %723 = OpLoad %43 
					                                         f32 %724 = OpFMul %722 %723 
					                                Private f32* %725 = OpAccessChain %31 %18 
					                                                      OpStore %725 %724 
					                                Private f32* %726 = OpAccessChain %31 %18 
					                                         f32 %727 = OpLoad %726 
					                                Private f32* %728 = OpAccessChain %31 %18 
					                                         f32 %729 = OpLoad %728 
					                                         f32 %730 = OpFMul %727 %729 
					                                Private f32* %731 = OpAccessChain %31 %18 
					                                                      OpStore %731 %730 
					                                         f32 %732 = OpLoad %43 
					                                Private f32* %733 = OpAccessChain %31 %18 
					                                         f32 %734 = OpLoad %733 
					                                         f32 %735 = OpFMul %732 %734 
					                                                      OpStore %43 %735 
					                                         f32 %736 = OpLoad %43 
					                                         f32 %737 = OpFMul %736 %565 
					                                         f32 %739 = OpFAdd %737 %738 
					                                                      OpStore %43 %739 
					                                         f32 %740 = OpLoad %43 
					                                       f32_3 %741 = OpCompositeConstruct %740 %740 %740 
					                                       f32_3 %742 = OpLoad %651 
					                                       f32_3 %743 = OpFMul %741 %742 
					                                                      OpStore %651 %743 
					                                       f32_3 %744 = OpLoad %9 
					                                       f32_3 %745 = OpLoad %611 
					                                       f32_3 %746 = OpFMul %744 %745 
					                                       f32_3 %747 = OpLoad %651 
					                                       f32_3 %748 = OpFAdd %746 %747 
					                                                      OpStore %9 %748 
					                                       f32_3 %749 = OpLoad %243 
					                                       f32_3 %751 = OpFMul %749 %750 
					                                                      OpStore %31 %751 
					                                Private f32* %752 = OpAccessChain %49 %18 
					                                         f32 %753 = OpLoad %752 
					                                         f32 %755 = OpFMul %753 %754 
					                                         f32 %756 = OpFAdd %755 %738 
					                                                      OpStore %43 %756 
					                                       f32_3 %757 = OpLoad %31 
					                                         f32 %758 = OpLoad %43 
					                                       f32_3 %759 = OpCompositeConstruct %758 %758 %758 
					                                       f32_3 %760 = OpFMul %757 %759 
					                                       f32_3 %761 = OpLoad %9 
					                                       f32_3 %762 = OpFAdd %760 %761 
					                                       f32_4 %763 = OpLoad %128 
					                                       f32_4 %764 = OpVectorShuffle %763 %762 4 5 6 3 
					                                                      OpStore %128 %764 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_FogColor;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	vec4 unity_SpecCube1_HDR;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat13;
					vec3 u_xlat14;
					float u_xlat25;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat4 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat4.z = sqrt(u_xlat37);
					    SV_Target0.w = u_xlat3.w * vs_COLOR0.w;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat37 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat4.xyz = vec3(u_xlat37) * u_xlat5.xyz;
					    u_xlat37 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat37)) + (-u_xlat2.xyz);
					    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb37){
					        u_xlat37 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat37 = inversesqrt(u_xlat37);
					        u_xlat6.xyz = vec3(u_xlat37) * u_xlat5.xyz;
					        u_xlat7.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat37 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat37 = min(u_xlat7.z, u_xlat37);
					        u_xlat7.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat5.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat37 = u_xlat6.w + -1.0;
					    u_xlat37 = unity_SpecCube0_HDR.w * u_xlat37 + 1.0;
					    u_xlat37 = log2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat8.xyz = vec3(u_xlat38) * u_xlat5.xyz;
					            u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat38 = min(u_xlat9.z, u_xlat38);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat38) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, 6.0);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat6.xyz + (-u_xlat0.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat36 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat37 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat13.x = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat13.x = u_xlat13.x + -0.5;
					    u_xlat25 = (-u_xlat37) + 1.0;
					    u_xlat2.x = u_xlat25 * u_xlat25;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat25 = u_xlat25 * u_xlat2.x;
					    u_xlat25 = u_xlat13.x * u_xlat25 + 1.0;
					    u_xlat2.x = -abs(u_xlat36) + 1.0;
					    u_xlat14.x = u_xlat2.x * u_xlat2.x;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat2.x = u_xlat2.x * u_xlat14.x;
					    u_xlat13.x = u_xlat13.x * u_xlat2.x + 1.0;
					    u_xlat13.x = u_xlat13.x * u_xlat25;
					    u_xlat13.x = u_xlat37 * u_xlat13.x;
					    u_xlat36 = abs(u_xlat36) + u_xlat37;
					    u_xlat36 = u_xlat36 + 9.99999975e-06;
					    u_xlat36 = 0.5 / u_xlat36;
					    u_xlat36 = u_xlat36 * 0.999999881;
					    u_xlat36 = u_xlat37 * u_xlat36;
					    u_xlat13.xyz = u_xlat13.xxx * _LightColor0.xyz;
					    u_xlat14.xyz = vec3(u_xlat36) * _LightColor0.xyz;
					    u_xlat36 = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat36 * 0.959999979 + 0.0399999991;
					    u_xlat14.xyz = vec3(u_xlat36) * u_xlat14.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat13.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat36 = u_xlat2.x * 2.23517418e-08 + 0.0399999991;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD6 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 283
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %93 %98 %105 %106 %118 %125 %161 %245 %249 %271 %272 %274 %277 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD8 "vs_TEXCOORD8" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpMemberDecorate %19 4 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpMemberDecorate %91 0 BuiltIn 91 
					                                                      OpMemberDecorate %91 1 BuiltIn 91 
					                                                      OpMemberDecorate %91 2 BuiltIn 91 
					                                                      OpDecorate %91 Block 
					                                                      OpDecorate vs_TEXCOORD6 Location 98 
					                                                      OpDecorate vs_TEXCOORD0 Location 105 
					                                                      OpDecorate %106 Location 106 
					                                                      OpDecorate vs_TEXCOORD1 Location 118 
					                                                      OpDecorate %125 Location 125 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate vs_TEXCOORD2 Location 245 
					                                                      OpDecorate vs_TEXCOORD3 Location 249 
					                                                      OpDecorate %271 Location 271 
					                                                      OpDecorate %272 Location 272 
					                                                      OpDecorate vs_TEXCOORD4 Location 274 
					                                                      OpDecorate vs_TEXCOORD8 Location 277 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %7 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                               Private f32_4* %62 = OpVariable Private 
					                                          u32 %89 = OpConstant 1 
					                                              %90 = OpTypeArray %6 %89 
					                                              %91 = OpTypeStruct %7 %6 %90 
					                                              %92 = OpTypePointer Output %91 
					         Output struct {f32_4; f32; f32[1];}* %93 = OpVariable Output 
					                                              %95 = OpTypePointer Output %7 
					                                              %97 = OpTypePointer Output %6 
					                         Output f32* vs_TEXCOORD6 = OpVariable Output 
					                                          u32 %99 = OpConstant 2 
					                                             %100 = OpTypePointer Private %6 
					                                             %103 = OpTypeVector %6 2 
					                                             %104 = OpTypePointer Output %103 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                Input f32_4* %106 = OpVariable Input 
					                                         i32 %109 = OpConstant 4 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                         u32 %119 = OpConstant 0 
					                                         u32 %122 = OpConstant 3 
					                                             %124 = OpTypePointer Input %50 
					                                Input f32_3* %125 = OpVariable Input 
					                                Input f32_4* %161 = OpVariable Input 
					                                             %209 = OpTypePointer Private %50 
					                              Private f32_3* %210 = OpVariable Private 
					                                             %224 = OpTypePointer Input %6 
					                                             %227 = OpTypePointer Uniform %6 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                               Output f32_4* %271 = OpVariable Output 
					                                Input f32_4* %272 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
					                                         f32 %275 = OpConstant 3,674022E-40 
					                                       f32_4 %276 = OpConstantComposite %275 %275 %275 %275 
					                       Output f32_4* vs_TEXCOORD8 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %51 = OpAccessChain %21 %23 %46 
					                                        f32_4 %52 = OpLoad %51 
					                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
					                                        f32_4 %54 = OpLoad %11 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 3 3 3 
					                                        f32_3 %56 = OpFMul %53 %55 
					                                        f32_4 %57 = OpLoad %9 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
					                                        f32_3 %59 = OpFAdd %56 %58 
					                                        f32_4 %60 = OpLoad %9 
					                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
					                                                      OpStore %9 %61 
					                                        f32_4 %63 = OpLoad %44 
					                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
					                               Uniform f32_4* %65 = OpAccessChain %21 %46 %24 
					                                        f32_4 %66 = OpLoad %65 
					                                        f32_4 %67 = OpFMul %64 %66 
					                                                      OpStore %62 %67 
					                               Uniform f32_4* %68 = OpAccessChain %21 %46 %23 
					                                        f32_4 %69 = OpLoad %68 
					                                        f32_4 %70 = OpLoad %44 
					                                        f32_4 %71 = OpVectorShuffle %70 %70 0 0 0 0 
					                                        f32_4 %72 = OpFMul %69 %71 
					                                        f32_4 %73 = OpLoad %62 
					                                        f32_4 %74 = OpFAdd %72 %73 
					                                                      OpStore %62 %74 
					                               Uniform f32_4* %75 = OpAccessChain %21 %46 %36 
					                                        f32_4 %76 = OpLoad %75 
					                                        f32_4 %77 = OpLoad %44 
					                                        f32_4 %78 = OpVectorShuffle %77 %77 2 2 2 2 
					                                        f32_4 %79 = OpFMul %76 %78 
					                                        f32_4 %80 = OpLoad %62 
					                                        f32_4 %81 = OpFAdd %79 %80 
					                                                      OpStore %62 %81 
					                               Uniform f32_4* %82 = OpAccessChain %21 %46 %46 
					                                        f32_4 %83 = OpLoad %82 
					                                        f32_4 %84 = OpLoad %44 
					                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
					                                        f32_4 %86 = OpFMul %83 %85 
					                                        f32_4 %87 = OpLoad %62 
					                                        f32_4 %88 = OpFAdd %86 %87 
					                                                      OpStore %44 %88 
					                                        f32_4 %94 = OpLoad %44 
					                                Output f32_4* %96 = OpAccessChain %93 %23 
					                                                      OpStore %96 %94 
					                                Private f32* %101 = OpAccessChain %44 %99 
					                                         f32 %102 = OpLoad %101 
					                                                      OpStore vs_TEXCOORD6 %102 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
					                              Uniform f32_4* %110 = OpAccessChain %21 %109 
					                                       f32_4 %111 = OpLoad %110 
					                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
					                                       f32_2 %113 = OpFMul %108 %112 
					                              Uniform f32_4* %114 = OpAccessChain %21 %109 
					                                       f32_4 %115 = OpLoad %114 
					                                       f32_2 %116 = OpVectorShuffle %115 %115 2 3 
					                                       f32_2 %117 = OpFAdd %113 %116 
					                                                      OpStore vs_TEXCOORD0 %117 
					                                Private f32* %120 = OpAccessChain %9 %119 
					                                         f32 %121 = OpLoad %120 
					                                 Output f32* %123 = OpAccessChain vs_TEXCOORD1 %122 
					                                                      OpStore %123 %121 
					                                       f32_3 %126 = OpLoad %125 
					                              Uniform f32_4* %127 = OpAccessChain %21 %24 %23 
					                                       f32_4 %128 = OpLoad %127 
					                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
					                                         f32 %130 = OpDot %126 %129 
					                                Private f32* %131 = OpAccessChain %44 %89 
					                                                      OpStore %131 %130 
					                                       f32_3 %132 = OpLoad %125 
					                              Uniform f32_4* %133 = OpAccessChain %21 %24 %24 
					                                       f32_4 %134 = OpLoad %133 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %132 %135 
					                                Private f32* %137 = OpAccessChain %44 %99 
					                                                      OpStore %137 %136 
					                                       f32_3 %138 = OpLoad %125 
					                              Uniform f32_4* %139 = OpAccessChain %21 %24 %36 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %44 %119 
					                                                      OpStore %143 %142 
					                                       f32_4 %144 = OpLoad %44 
					                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
					                                       f32_4 %146 = OpLoad %44 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %145 %147 
					                                Private f32* %149 = OpAccessChain %9 %119 
					                                                      OpStore %149 %148 
					                                Private f32* %150 = OpAccessChain %9 %119 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpExtInst %1 32 %151 
					                                Private f32* %153 = OpAccessChain %9 %119 
					                                                      OpStore %153 %152 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 0 0 
					                                       f32_4 %156 = OpLoad %44 
					                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
					                                       f32_3 %158 = OpFMul %155 %157 
					                                       f32_4 %159 = OpLoad %44 
					                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
					                                                      OpStore %44 %160 
					                                       f32_4 %162 = OpLoad %161 
					                                       f32_3 %163 = OpVectorShuffle %162 %162 1 1 1 
					                              Uniform f32_4* %164 = OpAccessChain %21 %23 %24 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 1 2 0 
					                                       f32_3 %167 = OpFMul %163 %166 
					                                       f32_4 %168 = OpLoad %62 
					                                       f32_4 %169 = OpVectorShuffle %168 %167 4 5 6 3 
					                                                      OpStore %62 %169 
					                              Uniform f32_4* %170 = OpAccessChain %21 %23 %23 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 1 2 0 
					                                       f32_4 %173 = OpLoad %161 
					                                       f32_3 %174 = OpVectorShuffle %173 %173 0 0 0 
					                                       f32_3 %175 = OpFMul %172 %174 
					                                       f32_4 %176 = OpLoad %62 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_3 %178 = OpFAdd %175 %177 
					                                       f32_4 %179 = OpLoad %62 
					                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
					                                                      OpStore %62 %180 
					                              Uniform f32_4* %181 = OpAccessChain %21 %23 %36 
					                                       f32_4 %182 = OpLoad %181 
					                                       f32_3 %183 = OpVectorShuffle %182 %182 1 2 0 
					                                       f32_4 %184 = OpLoad %161 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 2 2 2 
					                                       f32_3 %186 = OpFMul %183 %185 
					                                       f32_4 %187 = OpLoad %62 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                       f32_3 %189 = OpFAdd %186 %188 
					                                       f32_4 %190 = OpLoad %62 
					                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
					                                                      OpStore %62 %191 
					                                       f32_4 %192 = OpLoad %62 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                       f32_4 %194 = OpLoad %62 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                         f32 %196 = OpDot %193 %195 
					                                Private f32* %197 = OpAccessChain %9 %119 
					                                                      OpStore %197 %196 
					                                Private f32* %198 = OpAccessChain %9 %119 
					                                         f32 %199 = OpLoad %198 
					                                         f32 %200 = OpExtInst %1 32 %199 
					                                Private f32* %201 = OpAccessChain %9 %119 
					                                                      OpStore %201 %200 
					                                       f32_4 %202 = OpLoad %9 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 0 0 
					                                       f32_4 %204 = OpLoad %62 
					                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
					                                       f32_3 %206 = OpFMul %203 %205 
					                                       f32_4 %207 = OpLoad %62 
					                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
					                                                      OpStore %62 %208 
					                                       f32_4 %211 = OpLoad %44 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                       f32_4 %213 = OpLoad %62 
					                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
					                                       f32_3 %215 = OpFMul %212 %214 
					                                                      OpStore %210 %215 
					                                       f32_4 %216 = OpLoad %44 
					                                       f32_3 %217 = OpVectorShuffle %216 %216 2 0 1 
					                                       f32_4 %218 = OpLoad %62 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 1 2 0 
					                                       f32_3 %220 = OpFMul %217 %219 
					                                       f32_3 %221 = OpLoad %210 
					                                       f32_3 %222 = OpFNegate %221 
					                                       f32_3 %223 = OpFAdd %220 %222 
					                                                      OpStore %210 %223 
					                                  Input f32* %225 = OpAccessChain %161 %122 
					                                         f32 %226 = OpLoad %225 
					                                Uniform f32* %228 = OpAccessChain %21 %36 %122 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFMul %226 %229 
					                                Private f32* %231 = OpAccessChain %9 %119 
					                                                      OpStore %231 %230 
					                                       f32_4 %232 = OpLoad %9 
					                                       f32_3 %233 = OpVectorShuffle %232 %232 0 0 0 
					                                       f32_3 %234 = OpLoad %210 
					                                       f32_3 %235 = OpFMul %233 %234 
					                                                      OpStore %210 %235 
					                                Private f32* %236 = OpAccessChain %210 %119 
					                                         f32 %237 = OpLoad %236 
					                                 Output f32* %238 = OpAccessChain vs_TEXCOORD1 %89 
					                                                      OpStore %238 %237 
					                                Private f32* %239 = OpAccessChain %62 %99 
					                                         f32 %240 = OpLoad %239 
					                                 Output f32* %241 = OpAccessChain vs_TEXCOORD1 %119 
					                                                      OpStore %241 %240 
					                                Private f32* %242 = OpAccessChain %44 %89 
					                                         f32 %243 = OpLoad %242 
					                                 Output f32* %244 = OpAccessChain vs_TEXCOORD1 %99 
					                                                      OpStore %244 %243 
					                                Private f32* %246 = OpAccessChain %62 %119 
					                                         f32 %247 = OpLoad %246 
					                                 Output f32* %248 = OpAccessChain vs_TEXCOORD2 %119 
					                                                      OpStore %248 %247 
					                                Private f32* %250 = OpAccessChain %62 %89 
					                                         f32 %251 = OpLoad %250 
					                                 Output f32* %252 = OpAccessChain vs_TEXCOORD3 %119 
					                                                      OpStore %252 %251 
					                                Private f32* %253 = OpAccessChain %44 %99 
					                                         f32 %254 = OpLoad %253 
					                                 Output f32* %255 = OpAccessChain vs_TEXCOORD2 %99 
					                                                      OpStore %255 %254 
					                                Private f32* %256 = OpAccessChain %44 %119 
					                                         f32 %257 = OpLoad %256 
					                                 Output f32* %258 = OpAccessChain vs_TEXCOORD3 %99 
					                                                      OpStore %258 %257 
					                                Private f32* %259 = OpAccessChain %9 %89 
					                                         f32 %260 = OpLoad %259 
					                                 Output f32* %261 = OpAccessChain vs_TEXCOORD2 %122 
					                                                      OpStore %261 %260 
					                                Private f32* %262 = OpAccessChain %9 %99 
					                                         f32 %263 = OpLoad %262 
					                                 Output f32* %264 = OpAccessChain vs_TEXCOORD3 %122 
					                                                      OpStore %264 %263 
					                                Private f32* %265 = OpAccessChain %210 %89 
					                                         f32 %266 = OpLoad %265 
					                                 Output f32* %267 = OpAccessChain vs_TEXCOORD2 %89 
					                                                      OpStore %267 %266 
					                                Private f32* %268 = OpAccessChain %210 %99 
					                                         f32 %269 = OpLoad %268 
					                                 Output f32* %270 = OpAccessChain vs_TEXCOORD3 %89 
					                                                      OpStore %270 %269 
					                                       f32_4 %273 = OpLoad %272 
					                                                      OpStore %271 %273 
					                                                      OpStore vs_TEXCOORD4 %276 
					                                                      OpStore vs_TEXCOORD8 %276 
					                                 Output f32* %278 = OpAccessChain %93 %23 %89 
					                                         f32 %279 = OpLoad %278 
					                                         f32 %280 = OpFNegate %279 
					                                 Output f32* %281 = OpAccessChain %93 %23 %89 
					                                                      OpStore %281 %280 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 765
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %68 %79 %126 %722 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate vs_TEXCOORD1 Location 12 
					                                                      OpDecorate vs_TEXCOORD2 Location 21 
					                                                      OpDecorate vs_TEXCOORD3 Location 26 
					                                                      OpMemberDecorate %34 0 Offset 34 
					                                                      OpMemberDecorate %34 1 Offset 34 
					                                                      OpMemberDecorate %34 2 Offset 34 
					                                                      OpMemberDecorate %34 3 Offset 34 
					                                                      OpMemberDecorate %34 4 Offset 34 
					                                                      OpMemberDecorate %34 5 Offset 34 
					                                                      OpMemberDecorate %34 6 Offset 34 
					                                                      OpMemberDecorate %34 7 Offset 34 
					                                                      OpMemberDecorate %34 8 Offset 34 
					                                                      OpMemberDecorate %34 9 Offset 34 
					                                                      OpMemberDecorate %34 10 Offset 34 
					                                                      OpMemberDecorate %34 11 Offset 34 
					                                                      OpMemberDecorate %34 12 Offset 34 
					                                                      OpMemberDecorate %34 13 Offset 34 
					                                                      OpMemberDecorate %34 14 Offset 34 
					                                                      OpDecorate %34 Block 
					                                                      OpDecorate %36 DescriptorSet 36 
					                                                      OpDecorate %36 Binding 36 
					                                                      OpDecorate %58 DescriptorSet 58 
					                                                      OpDecorate %58 Binding 58 
					                                                      OpDecorate %62 DescriptorSet 62 
					                                                      OpDecorate %62 Binding 62 
					                                                      OpDecorate vs_TEXCOORD0 Location 68 
					                                                      OpDecorate %79 Location 79 
					                                                      OpDecorate %86 DescriptorSet 86 
					                                                      OpDecorate %86 Binding 86 
					                                                      OpDecorate %88 DescriptorSet 88 
					                                                      OpDecorate %88 Binding 88 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %311 DescriptorSet 311 
					                                                      OpDecorate %311 Binding 311 
					                                                      OpDecorate %313 DescriptorSet 313 
					                                                      OpDecorate %313 Binding 313 
					                                                      OpDecorate %464 DescriptorSet 464 
					                                                      OpDecorate %464 Binding 464 
					                                                      OpDecorate vs_TEXCOORD6 Location 722 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                              %13 = OpTypeInt 32 0 
					                                          u32 %14 = OpConstant 3 
					                                              %15 = OpTypePointer Input %6 
					                                          u32 %18 = OpConstant 0 
					                                              %19 = OpTypePointer Private %6 
					                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %24 = OpConstant 1 
					                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                          u32 %29 = OpConstant 2 
					                               Private f32_3* %31 = OpVariable Private 
					                                              %34 = OpTypeStruct %7 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
					                                              %35 = OpTypePointer Uniform %34 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %36 = OpVariable Uniform 
					                                              %37 = OpTypeInt 32 1 
					                                          i32 %38 = OpConstant 0 
					                                              %39 = OpTypePointer Uniform %7 
					                                 Private f32* %43 = OpVariable Private 
					                               Private f32_3* %49 = OpVariable Private 
					                                              %54 = OpTypePointer Private %10 
					                               Private f32_4* %55 = OpVariable Private 
					                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %57 = OpTypePointer UniformConstant %56 
					         UniformConstant read_only Texture2D* %58 = OpVariable UniformConstant 
					                                              %60 = OpTypeSampler 
					                                              %61 = OpTypePointer UniformConstant %60 
					                     UniformConstant sampler* %62 = OpVariable UniformConstant 
					                                              %64 = OpTypeSampledImage %56 
					                                              %66 = OpTypeVector %6 2 
					                                              %67 = OpTypePointer Input %66 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                          i32 %72 = OpConstant 14 
					                                              %73 = OpTypePointer Uniform %10 
					                                 Input f32_4* %79 = OpVariable Input 
					                               Private f32_3* %85 = OpVariable Private 
					         UniformConstant read_only Texture2D* %86 = OpVariable UniformConstant 
					                     UniformConstant sampler* %88 = OpVariable UniformConstant 
					                                         f32 %102 = OpConstant 3,674022E-40 
					                                       f32_2 %103 = OpConstantComposite %102 %102 
					                                         f32 %105 = OpConstant 3,674022E-40 
					                                       f32_2 %106 = OpConstantComposite %105 %105 
					                                Private f32* %110 = OpVariable Private 
					                                         f32 %117 = OpConstant 3,674022E-40 
					                                             %125 = OpTypePointer Output %10 
					                               Output f32_4* %126 = OpVariable Output 
					                                             %132 = OpTypePointer Output %6 
					                              Private f32_4* %134 = OpVariable Private 
					                                             %179 = OpTypeBool 
					                                             %180 = OpTypePointer Private %179 
					                               Private bool* %181 = OpVariable Private 
					                                         f32 %182 = OpConstant 3,674022E-40 
					                                         i32 %183 = OpConstant 7 
					                                             %184 = OpTypePointer Uniform %6 
					                              Private f32_4* %198 = OpVariable Private 
					                              Private f32_3* %206 = OpVariable Private 
					                                         i32 %209 = OpConstant 5 
					                              Private f32_3* %218 = OpVariable Private 
					                                         i32 %221 = OpConstant 6 
					                                             %230 = OpTypeVector %179 3 
					                                             %231 = OpTypePointer Private %230 
					                             Private bool_3* %232 = OpVariable Private 
					                                       f32_4 %233 = OpConstantComposite %182 %182 %182 %182 
					                                             %236 = OpTypeVector %179 4 
					                                             %239 = OpTypePointer Function %7 
					                                             %244 = OpTypePointer Function %6 
					                                             %309 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %310 = OpTypePointer UniformConstant %309 
					      UniformConstant read_only TextureCube* %311 = OpVariable UniformConstant 
					                    UniformConstant sampler* %313 = OpVariable UniformConstant 
					                                             %315 = OpTypeSampledImage %309 
					                                         f32 %319 = OpConstant 3,674022E-40 
					                                         i32 %324 = OpConstant 8 
					                               Private bool* %347 = OpVariable Private 
					                                         f32 %350 = OpConstant 3,674022E-40 
					                                         i32 %355 = OpConstant 11 
					                                Private f32* %362 = OpVariable Private 
					                              Private f32_3* %375 = OpVariable Private 
					                                         i32 %378 = OpConstant 9 
					                              Private f32_3* %386 = OpVariable Private 
					                                         i32 %389 = OpConstant 10 
					                             Private bool_3* %397 = OpVariable Private 
					      UniformConstant read_only TextureCube* %464 = OpVariable UniformConstant 
					                                         i32 %475 = OpConstant 12 
					                                         f32 %528 = OpConstant 3,674022E-40 
					                                       f32_3 %529 = OpConstantComposite %528 %528 %528 
					                                         i32 %535 = OpConstant 2 
					                                         f32 %544 = OpConstant 3,674022E-40 
					                              Private f32_3* %572 = OpVariable Private 
					                                         f32 %581 = OpConstant 3,674022E-40 
					                                Private f32* %584 = OpVariable Private 
					                              Private f32_3* %612 = OpVariable Private 
					                                         f32 %653 = OpConstant 3,674022E-40 
					                                         f32 %655 = OpConstant 3,674022E-40 
					                                         f32 %662 = OpConstant 3,674022E-40 
					                                         i32 %666 = OpConstant 13 
					                                         f32 %697 = OpConstant 3,674022E-40 
					                                       f32_3 %709 = OpConstantComposite %655 %655 %655 
					                                         f32 %713 = OpConstant 3,674022E-40 
					                          Input f32* vs_TEXCOORD6 = OpVariable Input 
					                                         i32 %724 = OpConstant 1 
					                                         i32 %738 = OpConstant 4 
					                                         i32 %748 = OpConstant 3 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %240 = OpVariable Function 
					                               Function f32* %245 = OpVariable Function 
					                               Function f32* %257 = OpVariable Function 
					                               Function f32* %269 = OpVariable Function 
					                             Function f32_3* %402 = OpVariable Function 
					                               Function f32* %406 = OpVariable Function 
					                               Function f32* %418 = OpVariable Function 
					                               Function f32* %430 = OpVariable Function 
					                                   Input f32* %16 = OpAccessChain vs_TEXCOORD1 %14 
					                                          f32 %17 = OpLoad %16 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %17 
					                                   Input f32* %22 = OpAccessChain vs_TEXCOORD2 %14 
					                                          f32 %23 = OpLoad %22 
					                                 Private f32* %25 = OpAccessChain %9 %24 
					                                                      OpStore %25 %23 
					                                   Input f32* %27 = OpAccessChain vs_TEXCOORD3 %14 
					                                          f32 %28 = OpLoad %27 
					                                 Private f32* %30 = OpAccessChain %9 %29 
					                                                      OpStore %30 %28 
					                                        f32_3 %32 = OpLoad %9 
					                                        f32_3 %33 = OpFNegate %32 
					                               Uniform f32_3* %40 = OpAccessChain %36 %38 
					                                        f32_3 %41 = OpLoad %40 
					                                        f32_3 %42 = OpFAdd %33 %41 
					                                                      OpStore %31 %42 
					                                        f32_3 %44 = OpLoad %31 
					                                        f32_3 %45 = OpLoad %31 
					                                          f32 %46 = OpDot %44 %45 
					                                                      OpStore %43 %46 
					                                          f32 %47 = OpLoad %43 
					                                          f32 %48 = OpExtInst %1 32 %47 
					                                                      OpStore %43 %48 
					                                          f32 %50 = OpLoad %43 
					                                        f32_3 %51 = OpCompositeConstruct %50 %50 %50 
					                                        f32_3 %52 = OpLoad %31 
					                                        f32_3 %53 = OpFMul %51 %52 
					                                                      OpStore %49 %53 
					                          read_only Texture2D %59 = OpLoad %58 
					                                      sampler %63 = OpLoad %62 
					                   read_only Texture2DSampled %65 = OpSampledImage %59 %63 
					                                        f32_2 %69 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %70 = OpImageSampleImplicitLod %65 %69 
					                                                      OpStore %55 %70 
					                                        f32_4 %71 = OpLoad %55 
					                               Uniform f32_4* %74 = OpAccessChain %36 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpFMul %71 %75 
					                                                      OpStore %55 %76 
					                                        f32_4 %77 = OpLoad %55 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %78 %81 
					                                        f32_4 %83 = OpLoad %55 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %55 %84 
					                          read_only Texture2D %87 = OpLoad %86 
					                                      sampler %89 = OpLoad %88 
					                   read_only Texture2DSampled %90 = OpSampledImage %87 %89 
					                                        f32_2 %91 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %92 = OpImageSampleImplicitLod %90 %91 
					                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 3 
					                                                      OpStore %85 %93 
					                                 Private f32* %94 = OpAccessChain %85 %29 
					                                          f32 %95 = OpLoad %94 
					                                 Private f32* %96 = OpAccessChain %85 %18 
					                                          f32 %97 = OpLoad %96 
					                                          f32 %98 = OpFMul %95 %97 
					                                 Private f32* %99 = OpAccessChain %85 %18 
					                                                      OpStore %99 %98 
					                                       f32_3 %100 = OpLoad %85 
					                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
					                                       f32_2 %104 = OpFMul %101 %103 
					                                       f32_2 %107 = OpFAdd %104 %106 
					                                       f32_3 %108 = OpLoad %85 
					                                       f32_3 %109 = OpVectorShuffle %108 %107 3 4 2 
					                                                      OpStore %85 %109 
					                                       f32_3 %111 = OpLoad %85 
					                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
					                                       f32_3 %113 = OpLoad %85 
					                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
					                                         f32 %115 = OpDot %112 %114 
					                                                      OpStore %110 %115 
					                                         f32 %116 = OpLoad %110 
					                                         f32 %118 = OpExtInst %1 37 %116 %117 
					                                                      OpStore %110 %118 
					                                         f32 %119 = OpLoad %110 
					                                         f32 %120 = OpFNegate %119 
					                                         f32 %121 = OpFAdd %120 %117 
					                                                      OpStore %110 %121 
					                                         f32 %122 = OpLoad %110 
					                                         f32 %123 = OpExtInst %1 31 %122 
					                                Private f32* %124 = OpAccessChain %85 %29 
					                                                      OpStore %124 %123 
					                                Private f32* %127 = OpAccessChain %55 %14 
					                                         f32 %128 = OpLoad %127 
					                                  Input f32* %129 = OpAccessChain %79 %14 
					                                         f32 %130 = OpLoad %129 
					                                         f32 %131 = OpFMul %128 %130 
					                                 Output f32* %133 = OpAccessChain %126 %14 
					                                                      OpStore %133 %131 
					                                       f32_4 %135 = OpLoad vs_TEXCOORD1 
					                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
					                                       f32_3 %137 = OpLoad %85 
					                                         f32 %138 = OpDot %136 %137 
					                                Private f32* %139 = OpAccessChain %134 %18 
					                                                      OpStore %139 %138 
					                                       f32_4 %140 = OpLoad vs_TEXCOORD2 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                       f32_3 %142 = OpLoad %85 
					                                         f32 %143 = OpDot %141 %142 
					                                Private f32* %144 = OpAccessChain %134 %24 
					                                                      OpStore %144 %143 
					                                       f32_4 %145 = OpLoad vs_TEXCOORD3 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                       f32_3 %147 = OpLoad %85 
					                                         f32 %148 = OpDot %146 %147 
					                                Private f32* %149 = OpAccessChain %134 %29 
					                                                      OpStore %149 %148 
					                                       f32_4 %150 = OpLoad %134 
					                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
					                                       f32_4 %152 = OpLoad %134 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                         f32 %154 = OpDot %151 %153 
					                                                      OpStore %110 %154 
					                                         f32 %155 = OpLoad %110 
					                                         f32 %156 = OpExtInst %1 32 %155 
					                                                      OpStore %110 %156 
					                                         f32 %157 = OpLoad %110 
					                                       f32_3 %158 = OpCompositeConstruct %157 %157 %157 
					                                       f32_4 %159 = OpLoad %134 
					                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
					                                       f32_3 %161 = OpFMul %158 %160 
					                                                      OpStore %85 %161 
					                                       f32_3 %162 = OpLoad %49 
					                                       f32_3 %163 = OpFNegate %162 
					                                       f32_3 %164 = OpLoad %85 
					                                         f32 %165 = OpDot %163 %164 
					                                                      OpStore %110 %165 
					                                         f32 %166 = OpLoad %110 
					                                         f32 %167 = OpLoad %110 
					                                         f32 %168 = OpFAdd %166 %167 
					                                                      OpStore %110 %168 
					                                       f32_3 %169 = OpLoad %85 
					                                         f32 %170 = OpLoad %110 
					                                       f32_3 %171 = OpCompositeConstruct %170 %170 %170 
					                                       f32_3 %172 = OpFNegate %171 
					                                       f32_3 %173 = OpFMul %169 %172 
					                                       f32_3 %174 = OpLoad %49 
					                                       f32_3 %175 = OpFNegate %174 
					                                       f32_3 %176 = OpFAdd %173 %175 
					                                       f32_4 %177 = OpLoad %134 
					                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
					                                                      OpStore %134 %178 
					                                Uniform f32* %185 = OpAccessChain %36 %183 %14 
					                                         f32 %186 = OpLoad %185 
					                                        bool %187 = OpFOrdLessThan %182 %186 
					                                                      OpStore %181 %187 
					                                        bool %188 = OpLoad %181 
					                                                      OpSelectionMerge %190 None 
					                                                      OpBranchConditional %188 %189 %304 
					                                             %189 = OpLabel 
					                                       f32_4 %191 = OpLoad %134 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
					                                       f32_4 %193 = OpLoad %134 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                         f32 %195 = OpDot %192 %194 
					                                                      OpStore %110 %195 
					                                         f32 %196 = OpLoad %110 
					                                         f32 %197 = OpExtInst %1 32 %196 
					                                                      OpStore %110 %197 
					                                         f32 %199 = OpLoad %110 
					                                       f32_3 %200 = OpCompositeConstruct %199 %199 %199 
					                                       f32_4 %201 = OpLoad %134 
					                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
					                                       f32_3 %203 = OpFMul %200 %202 
					                                       f32_4 %204 = OpLoad %198 
					                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
					                                                      OpStore %198 %205 
					                                       f32_3 %207 = OpLoad %9 
					                                       f32_3 %208 = OpFNegate %207 
					                              Uniform f32_4* %210 = OpAccessChain %36 %209 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                       f32_3 %213 = OpFAdd %208 %212 
					                                                      OpStore %206 %213 
					                                       f32_3 %214 = OpLoad %206 
					                                       f32_4 %215 = OpLoad %198 
					                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
					                                       f32_3 %217 = OpFDiv %214 %216 
					                                                      OpStore %206 %217 
					                                       f32_3 %219 = OpLoad %9 
					                                       f32_3 %220 = OpFNegate %219 
					                              Uniform f32_4* %222 = OpAccessChain %36 %221 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
					                                       f32_3 %225 = OpFAdd %220 %224 
					                                                      OpStore %218 %225 
					                                       f32_3 %226 = OpLoad %218 
					                                       f32_4 %227 = OpLoad %198 
					                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
					                                       f32_3 %229 = OpFDiv %226 %228 
					                                                      OpStore %218 %229 
					                                       f32_4 %234 = OpLoad %198 
					                                       f32_4 %235 = OpVectorShuffle %234 %234 0 1 2 0 
					                                      bool_4 %237 = OpFOrdLessThan %233 %235 
					                                      bool_3 %238 = OpVectorShuffle %237 %237 0 1 2 
					                                                      OpStore %232 %238 
					                                       f32_3 %241 = OpLoad %206 
					                                                      OpStore %240 %241 
					                               Private bool* %242 = OpAccessChain %232 %18 
					                                        bool %243 = OpLoad %242 
					                                                      OpSelectionMerge %247 None 
					                                                      OpBranchConditional %243 %246 %250 
					                                             %246 = OpLabel 
					                                Private f32* %248 = OpAccessChain %206 %18 
					                                         f32 %249 = OpLoad %248 
					                                                      OpStore %245 %249 
					                                                      OpBranch %247 
					                                             %250 = OpLabel 
					                                Private f32* %251 = OpAccessChain %218 %18 
					                                         f32 %252 = OpLoad %251 
					                                                      OpStore %245 %252 
					                                                      OpBranch %247 
					                                             %247 = OpLabel 
					                                         f32 %253 = OpLoad %245 
					                               Function f32* %254 = OpAccessChain %240 %18 
					                                                      OpStore %254 %253 
					                               Private bool* %255 = OpAccessChain %232 %24 
					                                        bool %256 = OpLoad %255 
					                                                      OpSelectionMerge %259 None 
					                                                      OpBranchConditional %256 %258 %262 
					                                             %258 = OpLabel 
					                                Private f32* %260 = OpAccessChain %206 %24 
					                                         f32 %261 = OpLoad %260 
					                                                      OpStore %257 %261 
					                                                      OpBranch %259 
					                                             %262 = OpLabel 
					                                Private f32* %263 = OpAccessChain %218 %24 
					                                         f32 %264 = OpLoad %263 
					                                                      OpStore %257 %264 
					                                                      OpBranch %259 
					                                             %259 = OpLabel 
					                                         f32 %265 = OpLoad %257 
					                               Function f32* %266 = OpAccessChain %240 %24 
					                                                      OpStore %266 %265 
					                               Private bool* %267 = OpAccessChain %232 %29 
					                                        bool %268 = OpLoad %267 
					                                                      OpSelectionMerge %271 None 
					                                                      OpBranchConditional %268 %270 %274 
					                                             %270 = OpLabel 
					                                Private f32* %272 = OpAccessChain %206 %29 
					                                         f32 %273 = OpLoad %272 
					                                                      OpStore %269 %273 
					                                                      OpBranch %271 
					                                             %274 = OpLabel 
					                                Private f32* %275 = OpAccessChain %218 %29 
					                                         f32 %276 = OpLoad %275 
					                                                      OpStore %269 %276 
					                                                      OpBranch %271 
					                                             %271 = OpLabel 
					                                         f32 %277 = OpLoad %269 
					                               Function f32* %278 = OpAccessChain %240 %29 
					                                                      OpStore %278 %277 
					                                       f32_3 %279 = OpLoad %240 
					                                                      OpStore %206 %279 
					                                Private f32* %280 = OpAccessChain %206 %24 
					                                         f32 %281 = OpLoad %280 
					                                Private f32* %282 = OpAccessChain %206 %18 
					                                         f32 %283 = OpLoad %282 
					                                         f32 %284 = OpExtInst %1 37 %281 %283 
					                                                      OpStore %110 %284 
					                                Private f32* %285 = OpAccessChain %206 %29 
					                                         f32 %286 = OpLoad %285 
					                                         f32 %287 = OpLoad %110 
					                                         f32 %288 = OpExtInst %1 37 %286 %287 
					                                                      OpStore %110 %288 
					                                       f32_3 %289 = OpLoad %9 
					                              Uniform f32_4* %290 = OpAccessChain %36 %183 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFNegate %292 
					                                       f32_3 %294 = OpFAdd %289 %293 
					                                                      OpStore %206 %294 
					                                       f32_4 %295 = OpLoad %198 
					                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
					                                         f32 %297 = OpLoad %110 
					                                       f32_3 %298 = OpCompositeConstruct %297 %297 %297 
					                                       f32_3 %299 = OpFMul %296 %298 
					                                       f32_3 %300 = OpLoad %206 
					                                       f32_3 %301 = OpFAdd %299 %300 
					                                       f32_4 %302 = OpLoad %198 
					                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
					                                                      OpStore %198 %303 
					                                                      OpBranch %190 
					                                             %304 = OpLabel 
					                                       f32_4 %305 = OpLoad %134 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
					                                       f32_4 %307 = OpLoad %198 
					                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
					                                                      OpStore %198 %308 
					                                                      OpBranch %190 
					                                             %190 = OpLabel 
					                       read_only TextureCube %312 = OpLoad %311 
					                                     sampler %314 = OpLoad %313 
					                read_only TextureCubeSampled %316 = OpSampledImage %312 %314 
					                                       f32_4 %317 = OpLoad %198 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
					                                       f32_4 %320 = OpImageSampleExplicitLod %316 %318 Lod %10 
					                                                      OpStore %198 %320 
					                                Private f32* %321 = OpAccessChain %198 %14 
					                                         f32 %322 = OpLoad %321 
					                                         f32 %323 = OpFAdd %322 %105 
					                                                      OpStore %110 %323 
					                                Uniform f32* %325 = OpAccessChain %36 %324 %14 
					                                         f32 %326 = OpLoad %325 
					                                         f32 %327 = OpLoad %110 
					                                         f32 %328 = OpFMul %326 %327 
					                                         f32 %329 = OpFAdd %328 %117 
					                                                      OpStore %110 %329 
					                                         f32 %330 = OpLoad %110 
					                                         f32 %331 = OpExtInst %1 30 %330 
					                                                      OpStore %110 %331 
					                                         f32 %332 = OpLoad %110 
					                                Uniform f32* %333 = OpAccessChain %36 %324 %24 
					                                         f32 %334 = OpLoad %333 
					                                         f32 %335 = OpFMul %332 %334 
					                                                      OpStore %110 %335 
					                                         f32 %336 = OpLoad %110 
					                                         f32 %337 = OpExtInst %1 29 %336 
					                                                      OpStore %110 %337 
					                                         f32 %338 = OpLoad %110 
					                                Uniform f32* %339 = OpAccessChain %36 %324 %18 
					                                         f32 %340 = OpLoad %339 
					                                         f32 %341 = OpFMul %338 %340 
					                                                      OpStore %110 %341 
					                                       f32_4 %342 = OpLoad %198 
					                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
					                                         f32 %344 = OpLoad %110 
					                                       f32_3 %345 = OpCompositeConstruct %344 %344 %344 
					                                       f32_3 %346 = OpFMul %343 %345 
					                                                      OpStore %206 %346 
					                                Uniform f32* %348 = OpAccessChain %36 %221 %14 
					                                         f32 %349 = OpLoad %348 
					                                        bool %351 = OpFOrdLessThan %349 %350 
					                                                      OpStore %347 %351 
					                                        bool %352 = OpLoad %347 
					                                                      OpSelectionMerge %354 None 
					                                                      OpBranchConditional %352 %353 %354 
					                                             %353 = OpLabel 
					                                Uniform f32* %356 = OpAccessChain %36 %355 %14 
					                                         f32 %357 = OpLoad %356 
					                                        bool %358 = OpFOrdLessThan %182 %357 
					                                                      OpStore %347 %358 
					                                        bool %359 = OpLoad %347 
					                                                      OpSelectionMerge %361 None 
					                                                      OpBranchConditional %359 %360 %361 
					                                             %360 = OpLabel 
					                                       f32_4 %363 = OpLoad %134 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                       f32_4 %365 = OpLoad %134 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
					                                         f32 %367 = OpDot %364 %366 
					                                                      OpStore %362 %367 
					                                         f32 %368 = OpLoad %362 
					                                         f32 %369 = OpExtInst %1 32 %368 
					                                                      OpStore %362 %369 
					                                         f32 %370 = OpLoad %362 
					                                       f32_3 %371 = OpCompositeConstruct %370 %370 %370 
					                                       f32_4 %372 = OpLoad %134 
					                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
					                                       f32_3 %374 = OpFMul %371 %373 
					                                                      OpStore %218 %374 
					                                       f32_3 %376 = OpLoad %9 
					                                       f32_3 %377 = OpFNegate %376 
					                              Uniform f32_4* %379 = OpAccessChain %36 %378 
					                                       f32_4 %380 = OpLoad %379 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
					                                       f32_3 %382 = OpFAdd %377 %381 
					                                                      OpStore %375 %382 
					                                       f32_3 %383 = OpLoad %375 
					                                       f32_3 %384 = OpLoad %218 
					                                       f32_3 %385 = OpFDiv %383 %384 
					                                                      OpStore %375 %385 
					                                       f32_3 %387 = OpLoad %9 
					                                       f32_3 %388 = OpFNegate %387 
					                              Uniform f32_4* %390 = OpAccessChain %36 %389 
					                                       f32_4 %391 = OpLoad %390 
					                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
					                                       f32_3 %393 = OpFAdd %388 %392 
					                                                      OpStore %386 %393 
					                                       f32_3 %394 = OpLoad %386 
					                                       f32_3 %395 = OpLoad %218 
					                                       f32_3 %396 = OpFDiv %394 %395 
					                                                      OpStore %386 %396 
					                                       f32_3 %398 = OpLoad %218 
					                                       f32_4 %399 = OpVectorShuffle %398 %398 0 1 2 0 
					                                      bool_4 %400 = OpFOrdLessThan %233 %399 
					                                      bool_3 %401 = OpVectorShuffle %400 %400 0 1 2 
					                                                      OpStore %397 %401 
					                                       f32_3 %403 = OpLoad %375 
					                                                      OpStore %402 %403 
					                               Private bool* %404 = OpAccessChain %397 %18 
					                                        bool %405 = OpLoad %404 
					                                                      OpSelectionMerge %408 None 
					                                                      OpBranchConditional %405 %407 %411 
					                                             %407 = OpLabel 
					                                Private f32* %409 = OpAccessChain %375 %18 
					                                         f32 %410 = OpLoad %409 
					                                                      OpStore %406 %410 
					                                                      OpBranch %408 
					                                             %411 = OpLabel 
					                                Private f32* %412 = OpAccessChain %386 %18 
					                                         f32 %413 = OpLoad %412 
					                                                      OpStore %406 %413 
					                                                      OpBranch %408 
					                                             %408 = OpLabel 
					                                         f32 %414 = OpLoad %406 
					                               Function f32* %415 = OpAccessChain %402 %18 
					                                                      OpStore %415 %414 
					                               Private bool* %416 = OpAccessChain %397 %24 
					                                        bool %417 = OpLoad %416 
					                                                      OpSelectionMerge %420 None 
					                                                      OpBranchConditional %417 %419 %423 
					                                             %419 = OpLabel 
					                                Private f32* %421 = OpAccessChain %375 %24 
					                                         f32 %422 = OpLoad %421 
					                                                      OpStore %418 %422 
					                                                      OpBranch %420 
					                                             %423 = OpLabel 
					                                Private f32* %424 = OpAccessChain %386 %24 
					                                         f32 %425 = OpLoad %424 
					                                                      OpStore %418 %425 
					                                                      OpBranch %420 
					                                             %420 = OpLabel 
					                                         f32 %426 = OpLoad %418 
					                               Function f32* %427 = OpAccessChain %402 %24 
					                                                      OpStore %427 %426 
					                               Private bool* %428 = OpAccessChain %397 %29 
					                                        bool %429 = OpLoad %428 
					                                                      OpSelectionMerge %432 None 
					                                                      OpBranchConditional %429 %431 %435 
					                                             %431 = OpLabel 
					                                Private f32* %433 = OpAccessChain %375 %29 
					                                         f32 %434 = OpLoad %433 
					                                                      OpStore %430 %434 
					                                                      OpBranch %432 
					                                             %435 = OpLabel 
					                                Private f32* %436 = OpAccessChain %386 %29 
					                                         f32 %437 = OpLoad %436 
					                                                      OpStore %430 %437 
					                                                      OpBranch %432 
					                                             %432 = OpLabel 
					                                         f32 %438 = OpLoad %430 
					                               Function f32* %439 = OpAccessChain %402 %29 
					                                                      OpStore %439 %438 
					                                       f32_3 %440 = OpLoad %402 
					                                                      OpStore %375 %440 
					                                Private f32* %441 = OpAccessChain %375 %24 
					                                         f32 %442 = OpLoad %441 
					                                Private f32* %443 = OpAccessChain %375 %18 
					                                         f32 %444 = OpLoad %443 
					                                         f32 %445 = OpExtInst %1 37 %442 %444 
					                                                      OpStore %362 %445 
					                                Private f32* %446 = OpAccessChain %375 %29 
					                                         f32 %447 = OpLoad %446 
					                                         f32 %448 = OpLoad %362 
					                                         f32 %449 = OpExtInst %1 37 %447 %448 
					                                                      OpStore %362 %449 
					                                       f32_3 %450 = OpLoad %9 
					                              Uniform f32_4* %451 = OpAccessChain %36 %355 
					                                       f32_4 %452 = OpLoad %451 
					                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
					                                       f32_3 %454 = OpFNegate %453 
					                                       f32_3 %455 = OpFAdd %450 %454 
					                                                      OpStore %9 %455 
					                                       f32_3 %456 = OpLoad %218 
					                                         f32 %457 = OpLoad %362 
					                                       f32_3 %458 = OpCompositeConstruct %457 %457 %457 
					                                       f32_3 %459 = OpFMul %456 %458 
					                                       f32_3 %460 = OpLoad %9 
					                                       f32_3 %461 = OpFAdd %459 %460 
					                                       f32_4 %462 = OpLoad %134 
					                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
					                                                      OpStore %134 %463 
					                                                      OpBranch %361 
					                                             %361 = OpLabel 
					                       read_only TextureCube %465 = OpLoad %464 
					                                     sampler %466 = OpLoad %313 
					                read_only TextureCubeSampled %467 = OpSampledImage %465 %466 
					                                       f32_4 %468 = OpLoad %134 
					                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
					                                       f32_4 %470 = OpImageSampleExplicitLod %467 %469 Lod %10 
					                                                      OpStore %134 %470 
					                                Private f32* %471 = OpAccessChain %134 %14 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFAdd %472 %105 
					                                Private f32* %474 = OpAccessChain %9 %18 
					                                                      OpStore %474 %473 
					                                Uniform f32* %476 = OpAccessChain %36 %475 %14 
					                                         f32 %477 = OpLoad %476 
					                                Private f32* %478 = OpAccessChain %9 %18 
					                                         f32 %479 = OpLoad %478 
					                                         f32 %480 = OpFMul %477 %479 
					                                         f32 %481 = OpFAdd %480 %117 
					                                Private f32* %482 = OpAccessChain %9 %18 
					                                                      OpStore %482 %481 
					                                Private f32* %483 = OpAccessChain %9 %18 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpExtInst %1 30 %484 
					                                Private f32* %486 = OpAccessChain %9 %18 
					                                                      OpStore %486 %485 
					                                Private f32* %487 = OpAccessChain %9 %18 
					                                         f32 %488 = OpLoad %487 
					                                Uniform f32* %489 = OpAccessChain %36 %475 %24 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFMul %488 %490 
					                                Private f32* %492 = OpAccessChain %9 %18 
					                                                      OpStore %492 %491 
					                                Private f32* %493 = OpAccessChain %9 %18 
					                                         f32 %494 = OpLoad %493 
					                                         f32 %495 = OpExtInst %1 29 %494 
					                                Private f32* %496 = OpAccessChain %9 %18 
					                                                      OpStore %496 %495 
					                                Private f32* %497 = OpAccessChain %9 %18 
					                                         f32 %498 = OpLoad %497 
					                                Uniform f32* %499 = OpAccessChain %36 %475 %18 
					                                         f32 %500 = OpLoad %499 
					                                         f32 %501 = OpFMul %498 %500 
					                                Private f32* %502 = OpAccessChain %9 %18 
					                                                      OpStore %502 %501 
					                                       f32_4 %503 = OpLoad %134 
					                                       f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
					                                       f32_3 %505 = OpLoad %9 
					                                       f32_3 %506 = OpVectorShuffle %505 %505 0 0 0 
					                                       f32_3 %507 = OpFMul %504 %506 
					                                                      OpStore %9 %507 
					                                         f32 %508 = OpLoad %110 
					                                       f32_3 %509 = OpCompositeConstruct %508 %508 %508 
					                                       f32_4 %510 = OpLoad %198 
					                                       f32_3 %511 = OpVectorShuffle %510 %510 0 1 2 
					                                       f32_3 %512 = OpFMul %509 %511 
					                                       f32_3 %513 = OpLoad %9 
					                                       f32_3 %514 = OpFNegate %513 
					                                       f32_3 %515 = OpFAdd %512 %514 
					                                       f32_4 %516 = OpLoad %134 
					                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
					                                                      OpStore %134 %517 
					                              Uniform f32_4* %518 = OpAccessChain %36 %221 
					                                       f32_4 %519 = OpLoad %518 
					                                       f32_3 %520 = OpVectorShuffle %519 %519 3 3 3 
					                                       f32_4 %521 = OpLoad %134 
					                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
					                                       f32_3 %523 = OpFMul %520 %522 
					                                       f32_3 %524 = OpLoad %9 
					                                       f32_3 %525 = OpFAdd %523 %524 
					                                                      OpStore %206 %525 
					                                                      OpBranch %354 
					                                             %354 = OpLabel 
					                                       f32_4 %526 = OpLoad %55 
					                                       f32_3 %527 = OpVectorShuffle %526 %526 0 1 2 
					                                       f32_3 %530 = OpFMul %527 %529 
					                                                      OpStore %9 %530 
					                                       f32_3 %531 = OpLoad %31 
					                                         f32 %532 = OpLoad %43 
					                                       f32_3 %533 = OpCompositeConstruct %532 %532 %532 
					                                       f32_3 %534 = OpFMul %531 %533 
					                              Uniform f32_4* %536 = OpAccessChain %36 %535 
					                                       f32_4 %537 = OpLoad %536 
					                                       f32_3 %538 = OpVectorShuffle %537 %537 0 1 2 
					                                       f32_3 %539 = OpFAdd %534 %538 
					                                                      OpStore %31 %539 
					                                       f32_3 %540 = OpLoad %31 
					                                       f32_3 %541 = OpLoad %31 
					                                         f32 %542 = OpDot %540 %541 
					                                                      OpStore %43 %542 
					                                         f32 %543 = OpLoad %43 
					                                         f32 %545 = OpExtInst %1 40 %543 %544 
					                                                      OpStore %43 %545 
					                                         f32 %546 = OpLoad %43 
					                                         f32 %547 = OpExtInst %1 32 %546 
					                                                      OpStore %43 %547 
					                                         f32 %548 = OpLoad %43 
					                                       f32_3 %549 = OpCompositeConstruct %548 %548 %548 
					                                       f32_3 %550 = OpLoad %31 
					                                       f32_3 %551 = OpFMul %549 %550 
					                                                      OpStore %31 %551 
					                                       f32_3 %552 = OpLoad %85 
					                                       f32_3 %553 = OpLoad %49 
					                                         f32 %554 = OpDot %552 %553 
					                                                      OpStore %43 %554 
					                                       f32_3 %555 = OpLoad %85 
					                              Uniform f32_4* %556 = OpAccessChain %36 %535 
					                                       f32_4 %557 = OpLoad %556 
					                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
					                                         f32 %559 = OpDot %555 %558 
					                                                      OpStore %110 %559 
					                                         f32 %560 = OpLoad %110 
					                                         f32 %561 = OpExtInst %1 43 %560 %182 %117 
					                                                      OpStore %110 %561 
					                              Uniform f32_4* %562 = OpAccessChain %36 %535 
					                                       f32_4 %563 = OpLoad %562 
					                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
					                                       f32_3 %565 = OpLoad %31 
					                                         f32 %566 = OpDot %564 %565 
					                                Private f32* %567 = OpAccessChain %31 %18 
					                                                      OpStore %567 %566 
					                                Private f32* %568 = OpAccessChain %31 %18 
					                                         f32 %569 = OpLoad %568 
					                                         f32 %570 = OpExtInst %1 43 %569 %182 %117 
					                                Private f32* %571 = OpAccessChain %31 %18 
					                                                      OpStore %571 %570 
					                                       f32_3 %573 = OpLoad %31 
					                                       f32_2 %574 = OpVectorShuffle %573 %573 0 0 
					                                       f32_3 %575 = OpLoad %31 
					                                       f32_2 %576 = OpVectorShuffle %575 %575 0 0 
					                                         f32 %577 = OpDot %574 %576 
					                                Private f32* %578 = OpAccessChain %572 %18 
					                                                      OpStore %578 %577 
					                                Private f32* %579 = OpAccessChain %572 %18 
					                                         f32 %580 = OpLoad %579 
					                                         f32 %582 = OpFAdd %580 %581 
					                                Private f32* %583 = OpAccessChain %572 %18 
					                                                      OpStore %583 %582 
					                                         f32 %585 = OpLoad %110 
					                                         f32 %586 = OpFNegate %585 
					                                         f32 %587 = OpFAdd %586 %117 
					                                                      OpStore %584 %587 
					                                         f32 %588 = OpLoad %584 
					                                         f32 %589 = OpLoad %584 
					                                         f32 %590 = OpFMul %588 %589 
					                                Private f32* %591 = OpAccessChain %49 %18 
					                                                      OpStore %591 %590 
					                                Private f32* %592 = OpAccessChain %49 %18 
					                                         f32 %593 = OpLoad %592 
					                                Private f32* %594 = OpAccessChain %49 %18 
					                                         f32 %595 = OpLoad %594 
					                                         f32 %596 = OpFMul %593 %595 
					                                Private f32* %597 = OpAccessChain %49 %18 
					                                                      OpStore %597 %596 
					                                         f32 %598 = OpLoad %584 
					                                Private f32* %599 = OpAccessChain %49 %18 
					                                         f32 %600 = OpLoad %599 
					                                         f32 %601 = OpFMul %598 %600 
					                                                      OpStore %584 %601 
					                                Private f32* %602 = OpAccessChain %572 %18 
					                                         f32 %603 = OpLoad %602 
					                                         f32 %604 = OpLoad %584 
					                                         f32 %605 = OpFMul %603 %604 
					                                         f32 %606 = OpFAdd %605 %117 
					                                                      OpStore %584 %606 
					                                         f32 %607 = OpLoad %43 
					                                         f32 %608 = OpExtInst %1 4 %607 
					                                         f32 %609 = OpFNegate %608 
					                                         f32 %610 = OpFAdd %609 %117 
					                                Private f32* %611 = OpAccessChain %49 %18 
					                                                      OpStore %611 %610 
					                                Private f32* %613 = OpAccessChain %49 %18 
					                                         f32 %614 = OpLoad %613 
					                                Private f32* %615 = OpAccessChain %49 %18 
					                                         f32 %616 = OpLoad %615 
					                                         f32 %617 = OpFMul %614 %616 
					                                Private f32* %618 = OpAccessChain %612 %18 
					                                                      OpStore %618 %617 
					                                Private f32* %619 = OpAccessChain %612 %18 
					                                         f32 %620 = OpLoad %619 
					                                Private f32* %621 = OpAccessChain %612 %18 
					                                         f32 %622 = OpLoad %621 
					                                         f32 %623 = OpFMul %620 %622 
					                                Private f32* %624 = OpAccessChain %612 %18 
					                                                      OpStore %624 %623 
					                                Private f32* %625 = OpAccessChain %49 %18 
					                                         f32 %626 = OpLoad %625 
					                                Private f32* %627 = OpAccessChain %612 %18 
					                                         f32 %628 = OpLoad %627 
					                                         f32 %629 = OpFMul %626 %628 
					                                Private f32* %630 = OpAccessChain %49 %18 
					                                                      OpStore %630 %629 
					                                Private f32* %631 = OpAccessChain %572 %18 
					                                         f32 %632 = OpLoad %631 
					                                Private f32* %633 = OpAccessChain %49 %18 
					                                         f32 %634 = OpLoad %633 
					                                         f32 %635 = OpFMul %632 %634 
					                                         f32 %636 = OpFAdd %635 %117 
					                                Private f32* %637 = OpAccessChain %572 %18 
					                                                      OpStore %637 %636 
					                                Private f32* %638 = OpAccessChain %572 %18 
					                                         f32 %639 = OpLoad %638 
					                                         f32 %640 = OpLoad %584 
					                                         f32 %641 = OpFMul %639 %640 
					                                Private f32* %642 = OpAccessChain %572 %18 
					                                                      OpStore %642 %641 
					                                         f32 %643 = OpLoad %110 
					                                Private f32* %644 = OpAccessChain %572 %18 
					                                         f32 %645 = OpLoad %644 
					                                         f32 %646 = OpFMul %643 %645 
					                                Private f32* %647 = OpAccessChain %572 %18 
					                                                      OpStore %647 %646 
					                                         f32 %648 = OpLoad %43 
					                                         f32 %649 = OpExtInst %1 4 %648 
					                                         f32 %650 = OpLoad %110 
					                                         f32 %651 = OpFAdd %649 %650 
					                                                      OpStore %43 %651 
					                                         f32 %652 = OpLoad %43 
					                                         f32 %654 = OpFAdd %652 %653 
					                                                      OpStore %43 %654 
					                                         f32 %656 = OpLoad %43 
					                                         f32 %657 = OpFDiv %655 %656 
					                                                      OpStore %43 %657 
					                                         f32 %658 = OpLoad %110 
					                                         f32 %659 = OpLoad %43 
					                                         f32 %660 = OpFMul %658 %659 
					                                                      OpStore %43 %660 
					                                         f32 %661 = OpLoad %43 
					                                         f32 %663 = OpFMul %661 %662 
					                                                      OpStore %43 %663 
					                                       f32_3 %664 = OpLoad %572 
					                                       f32_3 %665 = OpVectorShuffle %664 %664 0 0 0 
					                              Uniform f32_4* %667 = OpAccessChain %36 %666 
					                                       f32_4 %668 = OpLoad %667 
					                                       f32_3 %669 = OpVectorShuffle %668 %668 0 1 2 
					                                       f32_3 %670 = OpFMul %665 %669 
					                                                      OpStore %572 %670 
					                                         f32 %671 = OpLoad %43 
					                                       f32_3 %672 = OpCompositeConstruct %671 %671 %671 
					                              Uniform f32_4* %673 = OpAccessChain %36 %666 
					                                       f32_4 %674 = OpLoad %673 
					                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 2 
					                                       f32_3 %676 = OpFMul %672 %675 
					                                                      OpStore %612 %676 
					                                Private f32* %677 = OpAccessChain %31 %18 
					                                         f32 %678 = OpLoad %677 
					                                         f32 %679 = OpFNegate %678 
					                                         f32 %680 = OpFAdd %679 %117 
					                                                      OpStore %43 %680 
					                                         f32 %681 = OpLoad %43 
					                                         f32 %682 = OpLoad %43 
					                                         f32 %683 = OpFMul %681 %682 
					                                Private f32* %684 = OpAccessChain %31 %18 
					                                                      OpStore %684 %683 
					                                Private f32* %685 = OpAccessChain %31 %18 
					                                         f32 %686 = OpLoad %685 
					                                Private f32* %687 = OpAccessChain %31 %18 
					                                         f32 %688 = OpLoad %687 
					                                         f32 %689 = OpFMul %686 %688 
					                                Private f32* %690 = OpAccessChain %31 %18 
					                                                      OpStore %690 %689 
					                                         f32 %691 = OpLoad %43 
					                                Private f32* %692 = OpAccessChain %31 %18 
					                                         f32 %693 = OpLoad %692 
					                                         f32 %694 = OpFMul %691 %693 
					                                                      OpStore %43 %694 
					                                         f32 %695 = OpLoad %43 
					                                         f32 %696 = OpFMul %695 %528 
					                                         f32 %698 = OpFAdd %696 %697 
					                                                      OpStore %43 %698 
					                                         f32 %699 = OpLoad %43 
					                                       f32_3 %700 = OpCompositeConstruct %699 %699 %699 
					                                       f32_3 %701 = OpLoad %612 
					                                       f32_3 %702 = OpFMul %700 %701 
					                                                      OpStore %612 %702 
					                                       f32_3 %703 = OpLoad %9 
					                                       f32_3 %704 = OpLoad %572 
					                                       f32_3 %705 = OpFMul %703 %704 
					                                       f32_3 %706 = OpLoad %612 
					                                       f32_3 %707 = OpFAdd %705 %706 
					                                                      OpStore %9 %707 
					                                       f32_3 %708 = OpLoad %206 
					                                       f32_3 %710 = OpFMul %708 %709 
					                                                      OpStore %31 %710 
					                                Private f32* %711 = OpAccessChain %49 %18 
					                                         f32 %712 = OpLoad %711 
					                                         f32 %714 = OpFMul %712 %713 
					                                         f32 %715 = OpFAdd %714 %697 
					                                                      OpStore %43 %715 
					                                       f32_3 %716 = OpLoad %31 
					                                         f32 %717 = OpLoad %43 
					                                       f32_3 %718 = OpCompositeConstruct %717 %717 %717 
					                                       f32_3 %719 = OpFMul %716 %718 
					                                       f32_3 %720 = OpLoad %9 
					                                       f32_3 %721 = OpFAdd %719 %720 
					                                                      OpStore %9 %721 
					                                         f32 %723 = OpLoad vs_TEXCOORD6 
					                                Uniform f32* %725 = OpAccessChain %36 %724 %24 
					                                         f32 %726 = OpLoad %725 
					                                         f32 %727 = OpFDiv %723 %726 
					                                                      OpStore %43 %727 
					                                         f32 %728 = OpLoad %43 
					                                         f32 %729 = OpFNegate %728 
					                                         f32 %730 = OpFAdd %729 %117 
					                                                      OpStore %43 %730 
					                                         f32 %731 = OpLoad %43 
					                                Uniform f32* %732 = OpAccessChain %36 %724 %29 
					                                         f32 %733 = OpLoad %732 
					                                         f32 %734 = OpFMul %731 %733 
					                                                      OpStore %43 %734 
					                                         f32 %735 = OpLoad %43 
					                                         f32 %736 = OpExtInst %1 40 %735 %182 
					                                                      OpStore %43 %736 
					                                         f32 %737 = OpLoad %43 
					                                Uniform f32* %739 = OpAccessChain %36 %738 %29 
					                                         f32 %740 = OpLoad %739 
					                                         f32 %741 = OpFMul %737 %740 
					                                Uniform f32* %742 = OpAccessChain %36 %738 %14 
					                                         f32 %743 = OpLoad %742 
					                                         f32 %744 = OpFAdd %741 %743 
					                                                      OpStore %43 %744 
					                                         f32 %745 = OpLoad %43 
					                                         f32 %746 = OpExtInst %1 43 %745 %182 %117 
					                                                      OpStore %43 %746 
					                                       f32_3 %747 = OpLoad %9 
					                              Uniform f32_4* %749 = OpAccessChain %36 %748 
					                                       f32_4 %750 = OpLoad %749 
					                                       f32_3 %751 = OpVectorShuffle %750 %750 0 1 2 
					                                       f32_3 %752 = OpFNegate %751 
					                                       f32_3 %753 = OpFAdd %747 %752 
					                                                      OpStore %9 %753 
					                                         f32 %754 = OpLoad %43 
					                                       f32_3 %755 = OpCompositeConstruct %754 %754 %754 
					                                       f32_3 %756 = OpLoad %9 
					                                       f32_3 %757 = OpFMul %755 %756 
					                              Uniform f32_4* %758 = OpAccessChain %36 %748 
					                                       f32_4 %759 = OpLoad %758 
					                                       f32_3 %760 = OpVectorShuffle %759 %759 0 1 2 
					                                       f32_3 %761 = OpFAdd %757 %760 
					                                       f32_4 %762 = OpLoad %126 
					                                       f32_4 %763 = OpVectorShuffle %762 %761 4 5 6 3 
					                                                      OpStore %126 %763 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_SHBr;
					uniform 	vec4 unity_SHBg;
					uniform 	vec4 unity_SHBb;
					uniform 	vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_SHAr;
					uniform 	vec4 unity_SHAg;
					uniform 	vec4 unity_SHAb;
					uniform 	vec4 unity_FogColor;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	vec4 unity_SpecCube1_HDR;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					float u_xlat27;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat2.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat4 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat4.z = sqrt(u_xlat40);
					    SV_Target0.w = u_xlat3.w * vs_COLOR0.w;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat4.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					    u_xlat40 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat40 = u_xlat40 + u_xlat40;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat40)) + (-u_xlat2.xyz);
					    u_xlat4.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat4);
					    u_xlat6.y = dot(unity_SHAg, u_xlat4);
					    u_xlat6.z = dot(unity_SHAb, u_xlat4);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat7.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat40 = min(u_xlat8.z, u_xlat40);
					        u_xlat8.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat5.xyz;
					    }
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, 6.0);
					    u_xlat40 = u_xlat7.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat9.xyz = vec3(u_xlat41) * u_xlat5.xyz;
					            u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat41 = min(u_xlat10.z, u_xlat41);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat41) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, 6.0);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat40) * u_xlat7.xyz + (-u_xlat0.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat39 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat40 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat14.x = u_xlat14.x + -0.5;
					    u_xlat27 = (-u_xlat40) + 1.0;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat14.x * u_xlat27 + 1.0;
					    u_xlat2.x = -abs(u_xlat39) + 1.0;
					    u_xlat15.x = u_xlat2.x * u_xlat2.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat2.x = u_xlat2.x * u_xlat15.x;
					    u_xlat14.x = u_xlat14.x * u_xlat2.x + 1.0;
					    u_xlat14.x = u_xlat14.x * u_xlat27;
					    u_xlat14.x = u_xlat40 * u_xlat14.x;
					    u_xlat39 = abs(u_xlat39) + u_xlat40;
					    u_xlat39 = u_xlat39 + 9.99999975e-06;
					    u_xlat39 = 0.5 / u_xlat39;
					    u_xlat39 = u_xlat39 * 0.999999881;
					    u_xlat39 = u_xlat40 * u_xlat39;
					    u_xlat14.xyz = _LightColor0.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat15.xyz = vec3(u_xlat39) * _LightColor0.xyz;
					    u_xlat39 = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat39 * 0.959999979 + 0.0399999991;
					    u_xlat15.xyz = vec3(u_xlat39) * u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.xyz + u_xlat15.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat39 = u_xlat2.x * 2.23517418e-08 + 0.0399999991;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    u_xlat39 = vs_TEXCOORD6 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 331
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %95 %100 %107 %108 %120 %126 %178 %247 %251 %273 %274 %276 %315 %325 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD8 "vs_TEXCOORD8" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpMemberDecorate %19 4 Offset 19 
					                                                      OpMemberDecorate %19 5 Offset 19 
					                                                      OpMemberDecorate %19 6 Offset 19 
					                                                      OpMemberDecorate %19 7 Offset 19 
					                                                      OpMemberDecorate %19 8 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpMemberDecorate %93 0 BuiltIn 93 
					                                                      OpMemberDecorate %93 1 BuiltIn 93 
					                                                      OpMemberDecorate %93 2 BuiltIn 93 
					                                                      OpDecorate %93 Block 
					                                                      OpDecorate vs_TEXCOORD6 Location 100 
					                                                      OpDecorate vs_TEXCOORD0 Location 107 
					                                                      OpDecorate %108 Location 108 
					                                                      OpDecorate vs_TEXCOORD1 Location 120 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %178 Location 178 
					                                                      OpDecorate vs_TEXCOORD2 Location 247 
					                                                      OpDecorate vs_TEXCOORD3 Location 251 
					                                                      OpDecorate %273 Location 273 
					                                                      OpDecorate %274 Location 274 
					                                                      OpDecorate vs_TEXCOORD4 Location 276 
					                                                      OpDecorate vs_TEXCOORD5 Location 315 
					                                                      OpDecorate vs_TEXCOORD8 Location 325 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %7 %7 %7 %7 %16 %17 %7 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 4 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %29 = OpConstant 0 
					                                          i32 %37 = OpConstant 2 
					                               Private f32_4* %45 = OpVariable Private 
					                                          i32 %47 = OpConstant 3 
					                                              %51 = OpTypeVector %6 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %91 = OpConstant 1 
					                                              %92 = OpTypeArray %6 %91 
					                                              %93 = OpTypeStruct %7 %6 %92 
					                                              %94 = OpTypePointer Output %93 
					         Output struct {f32_4; f32; f32[1];}* %95 = OpVariable Output 
					                                              %97 = OpTypePointer Output %7 
					                                              %99 = OpTypePointer Output %6 
					                         Output f32* vs_TEXCOORD6 = OpVariable Output 
					                                         u32 %101 = OpConstant 2 
					                                             %102 = OpTypePointer Private %6 
					                                             %105 = OpTypeVector %6 2 
					                                             %106 = OpTypePointer Output %105 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                Input f32_4* %108 = OpVariable Input 
					                                         i32 %111 = OpConstant 8 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                         u32 %121 = OpConstant 0 
					                                         u32 %124 = OpConstant 3 
					                                Input f32_4* %126 = OpVariable Input 
					                                             %177 = OpTypePointer Input %51 
					                                Input f32_3* %178 = OpVariable Input 
					                                         i32 %180 = OpConstant 5 
					                                             %213 = OpTypePointer Private %51 
					                              Private f32_3* %214 = OpVariable Private 
					                                             %228 = OpTypePointer Input %6 
					                                         i32 %231 = OpConstant 6 
					                                             %232 = OpTypePointer Uniform %6 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                               Output f32_4* %273 = OpVariable Output 
					                                Input f32_4* %274 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
					                                         f32 %277 = OpConstant 3,674022E-40 
					                                       f32_4 %278 = OpConstantComposite %277 %277 %277 %277 
					                                             %314 = OpTypePointer Output %51 
					                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD8 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
					                                        f32_4 %31 = OpLoad %30 
					                                        f32_4 %32 = OpLoad %11 
					                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
					                                        f32_4 %34 = OpFMul %31 %33 
					                                        f32_4 %35 = OpLoad %9 
					                                        f32_4 %36 = OpFAdd %34 %35 
					                                                      OpStore %9 %36 
					                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_4 %40 = OpLoad %11 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
					                                        f32_4 %42 = OpFMul %39 %41 
					                                        f32_4 %43 = OpLoad %9 
					                                        f32_4 %44 = OpFAdd %42 %43 
					                                                      OpStore %9 %44 
					                                        f32_4 %46 = OpLoad %9 
					                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpFAdd %46 %49 
					                                                      OpStore %45 %50 
					                               Uniform f32_4* %52 = OpAccessChain %21 %23 %47 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %45 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %21 %66 %24 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %21 %66 %29 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %45 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %21 %66 %37 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %45 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %84 = OpAccessChain %21 %66 %47 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpLoad %45 
					                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
					                                        f32_4 %88 = OpFMul %85 %87 
					                                        f32_4 %89 = OpLoad %63 
					                                        f32_4 %90 = OpFAdd %88 %89 
					                                                      OpStore %45 %90 
					                                        f32_4 %96 = OpLoad %45 
					                                Output f32_4* %98 = OpAccessChain %95 %29 
					                                                      OpStore %98 %96 
					                                Private f32* %103 = OpAccessChain %45 %101 
					                                         f32 %104 = OpLoad %103 
					                                                      OpStore vs_TEXCOORD6 %104 
					                                       f32_4 %109 = OpLoad %108 
					                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
					                              Uniform f32_4* %112 = OpAccessChain %21 %111 
					                                       f32_4 %113 = OpLoad %112 
					                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
					                                       f32_2 %115 = OpFMul %110 %114 
					                              Uniform f32_4* %116 = OpAccessChain %21 %111 
					                                       f32_4 %117 = OpLoad %116 
					                                       f32_2 %118 = OpVectorShuffle %117 %117 2 3 
					                                       f32_2 %119 = OpFAdd %115 %118 
					                                                      OpStore vs_TEXCOORD0 %119 
					                                Private f32* %122 = OpAccessChain %9 %121 
					                                         f32 %123 = OpLoad %122 
					                                 Output f32* %125 = OpAccessChain vs_TEXCOORD1 %124 
					                                                      OpStore %125 %123 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 1 1 1 
					                              Uniform f32_4* %129 = OpAccessChain %21 %23 %24 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 1 2 0 
					                                       f32_3 %132 = OpFMul %128 %131 
					                                       f32_4 %133 = OpLoad %45 
					                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
					                                                      OpStore %45 %134 
					                              Uniform f32_4* %135 = OpAccessChain %21 %23 %29 
					                                       f32_4 %136 = OpLoad %135 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 1 2 0 
					                                       f32_4 %138 = OpLoad %126 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 0 0 
					                                       f32_3 %140 = OpFMul %137 %139 
					                                       f32_4 %141 = OpLoad %45 
					                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
					                                       f32_3 %143 = OpFAdd %140 %142 
					                                       f32_4 %144 = OpLoad %45 
					                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 6 3 
					                                                      OpStore %45 %145 
					                              Uniform f32_4* %146 = OpAccessChain %21 %23 %37 
					                                       f32_4 %147 = OpLoad %146 
					                                       f32_3 %148 = OpVectorShuffle %147 %147 1 2 0 
					                                       f32_4 %149 = OpLoad %126 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 2 2 2 
					                                       f32_3 %151 = OpFMul %148 %150 
					                                       f32_4 %152 = OpLoad %45 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_3 %154 = OpFAdd %151 %153 
					                                       f32_4 %155 = OpLoad %45 
					                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
					                                                      OpStore %45 %156 
					                                       f32_4 %157 = OpLoad %45 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                       f32_4 %159 = OpLoad %45 
					                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
					                                         f32 %161 = OpDot %158 %160 
					                                Private f32* %162 = OpAccessChain %9 %121 
					                                                      OpStore %162 %161 
					                                Private f32* %163 = OpAccessChain %9 %121 
					                                         f32 %164 = OpLoad %163 
					                                         f32 %165 = OpExtInst %1 32 %164 
					                                Private f32* %166 = OpAccessChain %9 %121 
					                                                      OpStore %166 %165 
					                                       f32_4 %167 = OpLoad %9 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 0 0 
					                                       f32_4 %169 = OpLoad %45 
					                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
					                                       f32_3 %171 = OpFMul %168 %170 
					                                       f32_4 %172 = OpLoad %45 
					                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
					                                                      OpStore %45 %173 
					                                Private f32* %174 = OpAccessChain %45 %101 
					                                         f32 %175 = OpLoad %174 
					                                 Output f32* %176 = OpAccessChain vs_TEXCOORD1 %121 
					                                                      OpStore %176 %175 
					                                       f32_3 %179 = OpLoad %178 
					                              Uniform f32_4* %181 = OpAccessChain %21 %180 %29 
					                                       f32_4 %182 = OpLoad %181 
					                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
					                                         f32 %184 = OpDot %179 %183 
					                                Private f32* %185 = OpAccessChain %63 %121 
					                                                      OpStore %185 %184 
					                                       f32_3 %186 = OpLoad %178 
					                              Uniform f32_4* %187 = OpAccessChain %21 %180 %24 
					                                       f32_4 %188 = OpLoad %187 
					                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
					                                         f32 %190 = OpDot %186 %189 
					                                Private f32* %191 = OpAccessChain %63 %91 
					                                                      OpStore %191 %190 
					                                       f32_3 %192 = OpLoad %178 
					                              Uniform f32_4* %193 = OpAccessChain %21 %180 %37 
					                                       f32_4 %194 = OpLoad %193 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                         f32 %196 = OpDot %192 %195 
					                                Private f32* %197 = OpAccessChain %63 %101 
					                                                      OpStore %197 %196 
					                                       f32_4 %198 = OpLoad %63 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                       f32_4 %200 = OpLoad %63 
					                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
					                                         f32 %202 = OpDot %199 %201 
					                                Private f32* %203 = OpAccessChain %9 %121 
					                                                      OpStore %203 %202 
					                                Private f32* %204 = OpAccessChain %9 %121 
					                                         f32 %205 = OpLoad %204 
					                                         f32 %206 = OpExtInst %1 32 %205 
					                                Private f32* %207 = OpAccessChain %9 %121 
					                                                      OpStore %207 %206 
					                                       f32_4 %208 = OpLoad %9 
					                                       f32_4 %209 = OpVectorShuffle %208 %208 0 0 0 0 
					                                       f32_4 %210 = OpLoad %63 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 0 1 2 2 
					                                       f32_4 %212 = OpFMul %209 %211 
					                                                      OpStore %63 %212 
					                                       f32_4 %215 = OpLoad %45 
					                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
					                                       f32_4 %217 = OpLoad %63 
					                                       f32_3 %218 = OpVectorShuffle %217 %217 3 0 1 
					                                       f32_3 %219 = OpFMul %216 %218 
					                                                      OpStore %214 %219 
					                                       f32_4 %220 = OpLoad %63 
					                                       f32_3 %221 = OpVectorShuffle %220 %220 1 3 0 
					                                       f32_4 %222 = OpLoad %45 
					                                       f32_3 %223 = OpVectorShuffle %222 %222 1 2 0 
					                                       f32_3 %224 = OpFMul %221 %223 
					                                       f32_3 %225 = OpLoad %214 
					                                       f32_3 %226 = OpFNegate %225 
					                                       f32_3 %227 = OpFAdd %224 %226 
					                                                      OpStore %214 %227 
					                                  Input f32* %229 = OpAccessChain %126 %124 
					                                         f32 %230 = OpLoad %229 
					                                Uniform f32* %233 = OpAccessChain %21 %231 %124 
					                                         f32 %234 = OpLoad %233 
					                                         f32 %235 = OpFMul %230 %234 
					                                Private f32* %236 = OpAccessChain %9 %121 
					                                                      OpStore %236 %235 
					                                       f32_4 %237 = OpLoad %9 
					                                       f32_3 %238 = OpVectorShuffle %237 %237 0 0 0 
					                                       f32_3 %239 = OpLoad %214 
					                                       f32_3 %240 = OpFMul %238 %239 
					                                                      OpStore %214 %240 
					                                Private f32* %241 = OpAccessChain %214 %121 
					                                         f32 %242 = OpLoad %241 
					                                 Output f32* %243 = OpAccessChain vs_TEXCOORD1 %91 
					                                                      OpStore %243 %242 
					                                Private f32* %244 = OpAccessChain %63 %121 
					                                         f32 %245 = OpLoad %244 
					                                 Output f32* %246 = OpAccessChain vs_TEXCOORD1 %101 
					                                                      OpStore %246 %245 
					                                Private f32* %248 = OpAccessChain %45 %121 
					                                         f32 %249 = OpLoad %248 
					                                 Output f32* %250 = OpAccessChain vs_TEXCOORD2 %121 
					                                                      OpStore %250 %249 
					                                Private f32* %252 = OpAccessChain %45 %91 
					                                         f32 %253 = OpLoad %252 
					                                 Output f32* %254 = OpAccessChain vs_TEXCOORD3 %121 
					                                                      OpStore %254 %253 
					                                Private f32* %255 = OpAccessChain %9 %91 
					                                         f32 %256 = OpLoad %255 
					                                 Output f32* %257 = OpAccessChain vs_TEXCOORD2 %124 
					                                                      OpStore %257 %256 
					                                Private f32* %258 = OpAccessChain %9 %101 
					                                         f32 %259 = OpLoad %258 
					                                 Output f32* %260 = OpAccessChain vs_TEXCOORD3 %124 
					                                                      OpStore %260 %259 
					                                Private f32* %261 = OpAccessChain %214 %91 
					                                         f32 %262 = OpLoad %261 
					                                 Output f32* %263 = OpAccessChain vs_TEXCOORD2 %91 
					                                                      OpStore %263 %262 
					                                Private f32* %264 = OpAccessChain %214 %101 
					                                         f32 %265 = OpLoad %264 
					                                 Output f32* %266 = OpAccessChain vs_TEXCOORD3 %91 
					                                                      OpStore %266 %265 
					                                Private f32* %267 = OpAccessChain %63 %91 
					                                         f32 %268 = OpLoad %267 
					                                 Output f32* %269 = OpAccessChain vs_TEXCOORD2 %101 
					                                                      OpStore %269 %268 
					                                Private f32* %270 = OpAccessChain %63 %124 
					                                         f32 %271 = OpLoad %270 
					                                 Output f32* %272 = OpAccessChain vs_TEXCOORD3 %101 
					                                                      OpStore %272 %271 
					                                       f32_4 %275 = OpLoad %274 
					                                                      OpStore %273 %275 
					                                                      OpStore vs_TEXCOORD4 %278 
					                                Private f32* %279 = OpAccessChain %63 %91 
					                                         f32 %280 = OpLoad %279 
					                                Private f32* %281 = OpAccessChain %63 %91 
					                                         f32 %282 = OpLoad %281 
					                                         f32 %283 = OpFMul %280 %282 
					                                Private f32* %284 = OpAccessChain %9 %121 
					                                                      OpStore %284 %283 
					                                Private f32* %285 = OpAccessChain %63 %121 
					                                         f32 %286 = OpLoad %285 
					                                Private f32* %287 = OpAccessChain %63 %121 
					                                         f32 %288 = OpLoad %287 
					                                         f32 %289 = OpFMul %286 %288 
					                                Private f32* %290 = OpAccessChain %9 %121 
					                                         f32 %291 = OpLoad %290 
					                                         f32 %292 = OpFNegate %291 
					                                         f32 %293 = OpFAdd %289 %292 
					                                Private f32* %294 = OpAccessChain %9 %121 
					                                                      OpStore %294 %293 
					                                       f32_4 %295 = OpLoad %63 
					                                       f32_4 %296 = OpVectorShuffle %295 %295 1 3 2 0 
					                                       f32_4 %297 = OpLoad %63 
					                                       f32_4 %298 = OpFMul %296 %297 
					                                                      OpStore %45 %298 
					                              Uniform f32_4* %299 = OpAccessChain %21 %29 
					                                       f32_4 %300 = OpLoad %299 
					                                       f32_4 %301 = OpLoad %45 
					                                         f32 %302 = OpDot %300 %301 
					                                Private f32* %303 = OpAccessChain %63 %121 
					                                                      OpStore %303 %302 
					                              Uniform f32_4* %304 = OpAccessChain %21 %24 
					                                       f32_4 %305 = OpLoad %304 
					                                       f32_4 %306 = OpLoad %45 
					                                         f32 %307 = OpDot %305 %306 
					                                Private f32* %308 = OpAccessChain %63 %91 
					                                                      OpStore %308 %307 
					                              Uniform f32_4* %309 = OpAccessChain %21 %37 
					                                       f32_4 %310 = OpLoad %309 
					                                       f32_4 %311 = OpLoad %45 
					                                         f32 %312 = OpDot %310 %311 
					                                Private f32* %313 = OpAccessChain %63 %101 
					                                                      OpStore %313 %312 
					                              Uniform f32_4* %316 = OpAccessChain %21 %47 
					                                       f32_4 %317 = OpLoad %316 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
					                                       f32_4 %319 = OpLoad %9 
					                                       f32_3 %320 = OpVectorShuffle %319 %319 0 0 0 
					                                       f32_3 %321 = OpFMul %318 %320 
					                                       f32_4 %322 = OpLoad %63 
					                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
					                                       f32_3 %324 = OpFAdd %321 %323 
					                                                      OpStore vs_TEXCOORD5 %324 
					                                                      OpStore vs_TEXCOORD8 %278 
					                                 Output f32* %326 = OpAccessChain %95 %29 %91 
					                                         f32 %327 = OpLoad %326 
					                                         f32 %328 = OpFNegate %327 
					                                 Output f32* %329 = OpAccessChain %95 %29 %91 
					                                                      OpStore %329 %328 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 806
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %68 %79 %128 %210 %763 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate vs_TEXCOORD1 Location 12 
					                                                      OpDecorate vs_TEXCOORD2 Location 21 
					                                                      OpDecorate vs_TEXCOORD3 Location 26 
					                                                      OpMemberDecorate %34 0 Offset 34 
					                                                      OpMemberDecorate %34 1 Offset 34 
					                                                      OpMemberDecorate %34 2 Offset 34 
					                                                      OpMemberDecorate %34 3 Offset 34 
					                                                      OpMemberDecorate %34 4 Offset 34 
					                                                      OpMemberDecorate %34 5 Offset 34 
					                                                      OpMemberDecorate %34 6 Offset 34 
					                                                      OpMemberDecorate %34 7 Offset 34 
					                                                      OpMemberDecorate %34 8 Offset 34 
					                                                      OpMemberDecorate %34 9 Offset 34 
					                                                      OpMemberDecorate %34 10 Offset 34 
					                                                      OpMemberDecorate %34 11 Offset 34 
					                                                      OpMemberDecorate %34 12 Offset 34 
					                                                      OpMemberDecorate %34 13 Offset 34 
					                                                      OpMemberDecorate %34 14 Offset 34 
					                                                      OpMemberDecorate %34 15 Offset 34 
					                                                      OpMemberDecorate %34 16 Offset 34 
					                                                      OpMemberDecorate %34 17 Offset 34 
					                                                      OpDecorate %34 Block 
					                                                      OpDecorate %36 DescriptorSet 36 
					                                                      OpDecorate %36 Binding 36 
					                                                      OpDecorate %58 DescriptorSet 58 
					                                                      OpDecorate %58 Binding 58 
					                                                      OpDecorate %62 DescriptorSet 62 
					                                                      OpDecorate %62 Binding 62 
					                                                      OpDecorate vs_TEXCOORD0 Location 68 
					                                                      OpDecorate %79 Location 79 
					                                                      OpDecorate %86 DescriptorSet 86 
					                                                      OpDecorate %86 Binding 86 
					                                                      OpDecorate %88 DescriptorSet 88 
					                                                      OpDecorate %88 Binding 88 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate vs_TEXCOORD5 Location 210 
					                                                      OpDecorate %348 DescriptorSet 348 
					                                                      OpDecorate %348 Binding 348 
					                                                      OpDecorate %350 DescriptorSet 350 
					                                                      OpDecorate %350 Binding 350 
					                                                      OpDecorate %501 DescriptorSet 501 
					                                                      OpDecorate %501 Binding 501 
					                                                      OpDecorate vs_TEXCOORD6 Location 763 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                              %13 = OpTypeInt 32 0 
					                                          u32 %14 = OpConstant 3 
					                                              %15 = OpTypePointer Input %6 
					                                          u32 %18 = OpConstant 0 
					                                              %19 = OpTypePointer Private %6 
					                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %24 = OpConstant 1 
					                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                          u32 %29 = OpConstant 2 
					                               Private f32_3* %31 = OpVariable Private 
					                                              %34 = OpTypeStruct %7 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
					                                              %35 = OpTypePointer Uniform %34 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %36 = OpVariable Uniform 
					                                              %37 = OpTypeInt 32 1 
					                                          i32 %38 = OpConstant 0 
					                                              %39 = OpTypePointer Uniform %7 
					                                 Private f32* %43 = OpVariable Private 
					                               Private f32_3* %49 = OpVariable Private 
					                                              %54 = OpTypePointer Private %10 
					                               Private f32_4* %55 = OpVariable Private 
					                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %57 = OpTypePointer UniformConstant %56 
					         UniformConstant read_only Texture2D* %58 = OpVariable UniformConstant 
					                                              %60 = OpTypeSampler 
					                                              %61 = OpTypePointer UniformConstant %60 
					                     UniformConstant sampler* %62 = OpVariable UniformConstant 
					                                              %64 = OpTypeSampledImage %56 
					                                              %66 = OpTypeVector %6 2 
					                                              %67 = OpTypePointer Input %66 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                          i32 %72 = OpConstant 17 
					                                              %73 = OpTypePointer Uniform %10 
					                                 Input f32_4* %79 = OpVariable Input 
					                               Private f32_4* %85 = OpVariable Private 
					         UniformConstant read_only Texture2D* %86 = OpVariable UniformConstant 
					                     UniformConstant sampler* %88 = OpVariable UniformConstant 
					                                         f32 %104 = OpConstant 3,674022E-40 
					                                       f32_2 %105 = OpConstantComposite %104 %104 
					                                         f32 %107 = OpConstant 3,674022E-40 
					                                       f32_2 %108 = OpConstantComposite %107 %107 
					                                Private f32* %112 = OpVariable Private 
					                                         f32 %119 = OpConstant 3,674022E-40 
					                                             %127 = OpTypePointer Output %10 
					                               Output f32_4* %128 = OpVariable Output 
					                                             %134 = OpTypePointer Output %6 
					                              Private f32_4* %136 = OpVariable Private 
					                              Private f32_3* %189 = OpVariable Private 
					                                         i32 %190 = OpConstant 3 
					                                         i32 %196 = OpConstant 4 
					                                         i32 %202 = OpConstant 5 
					                                             %209 = OpTypePointer Input %7 
					                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
					                                         f32 %214 = OpConstant 3,674022E-40 
					                                       f32_3 %215 = OpConstantComposite %214 %214 %214 
					                                             %217 = OpTypeBool 
					                                             %218 = OpTypePointer Private %217 
					                               Private bool* %219 = OpVariable Private 
					                                         i32 %220 = OpConstant 10 
					                                             %221 = OpTypePointer Uniform %6 
					                              Private f32_4* %235 = OpVariable Private 
					                              Private f32_3* %243 = OpVariable Private 
					                                         i32 %246 = OpConstant 8 
					                              Private f32_3* %255 = OpVariable Private 
					                                         i32 %258 = OpConstant 9 
					                                             %267 = OpTypeVector %217 3 
					                                             %268 = OpTypePointer Private %267 
					                             Private bool_3* %269 = OpVariable Private 
					                                       f32_4 %270 = OpConstantComposite %214 %214 %214 %214 
					                                             %273 = OpTypeVector %217 4 
					                                             %276 = OpTypePointer Function %7 
					                                             %281 = OpTypePointer Function %6 
					                                             %346 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %347 = OpTypePointer UniformConstant %346 
					      UniformConstant read_only TextureCube* %348 = OpVariable UniformConstant 
					                    UniformConstant sampler* %350 = OpVariable UniformConstant 
					                                             %352 = OpTypeSampledImage %346 
					                                         f32 %356 = OpConstant 3,674022E-40 
					                                         i32 %361 = OpConstant 11 
					                               Private bool* %384 = OpVariable Private 
					                                         f32 %387 = OpConstant 3,674022E-40 
					                                         i32 %392 = OpConstant 14 
					                                Private f32* %399 = OpVariable Private 
					                              Private f32_3* %412 = OpVariable Private 
					                                         i32 %415 = OpConstant 12 
					                              Private f32_3* %423 = OpVariable Private 
					                                         i32 %426 = OpConstant 13 
					                             Private bool_3* %434 = OpVariable Private 
					      UniformConstant read_only TextureCube* %501 = OpVariable UniformConstant 
					                                         i32 %512 = OpConstant 15 
					                                         f32 %565 = OpConstant 3,674022E-40 
					                                       f32_3 %566 = OpConstantComposite %565 %565 %565 
					                                         i32 %572 = OpConstant 2 
					                                         f32 %581 = OpConstant 3,674022E-40 
					                              Private f32_3* %611 = OpVariable Private 
					                                         f32 %620 = OpConstant 3,674022E-40 
					                                Private f32* %623 = OpVariable Private 
					                              Private f32_3* %651 = OpVariable Private 
					                                         f32 %692 = OpConstant 3,674022E-40 
					                                         f32 %694 = OpConstant 3,674022E-40 
					                                         f32 %701 = OpConstant 3,674022E-40 
					                                         i32 %703 = OpConstant 16 
					                                         f32 %738 = OpConstant 3,674022E-40 
					                                       f32_3 %750 = OpConstantComposite %694 %694 %694 
					                                         f32 %754 = OpConstant 3,674022E-40 
					                          Input f32* vs_TEXCOORD6 = OpVariable Input 
					                                         i32 %765 = OpConstant 1 
					                                         i32 %779 = OpConstant 7 
					                                         i32 %789 = OpConstant 6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %277 = OpVariable Function 
					                               Function f32* %282 = OpVariable Function 
					                               Function f32* %294 = OpVariable Function 
					                               Function f32* %306 = OpVariable Function 
					                             Function f32_3* %439 = OpVariable Function 
					                               Function f32* %443 = OpVariable Function 
					                               Function f32* %455 = OpVariable Function 
					                               Function f32* %467 = OpVariable Function 
					                                   Input f32* %16 = OpAccessChain vs_TEXCOORD1 %14 
					                                          f32 %17 = OpLoad %16 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %17 
					                                   Input f32* %22 = OpAccessChain vs_TEXCOORD2 %14 
					                                          f32 %23 = OpLoad %22 
					                                 Private f32* %25 = OpAccessChain %9 %24 
					                                                      OpStore %25 %23 
					                                   Input f32* %27 = OpAccessChain vs_TEXCOORD3 %14 
					                                          f32 %28 = OpLoad %27 
					                                 Private f32* %30 = OpAccessChain %9 %29 
					                                                      OpStore %30 %28 
					                                        f32_3 %32 = OpLoad %9 
					                                        f32_3 %33 = OpFNegate %32 
					                               Uniform f32_3* %40 = OpAccessChain %36 %38 
					                                        f32_3 %41 = OpLoad %40 
					                                        f32_3 %42 = OpFAdd %33 %41 
					                                                      OpStore %31 %42 
					                                        f32_3 %44 = OpLoad %31 
					                                        f32_3 %45 = OpLoad %31 
					                                          f32 %46 = OpDot %44 %45 
					                                                      OpStore %43 %46 
					                                          f32 %47 = OpLoad %43 
					                                          f32 %48 = OpExtInst %1 32 %47 
					                                                      OpStore %43 %48 
					                                          f32 %50 = OpLoad %43 
					                                        f32_3 %51 = OpCompositeConstruct %50 %50 %50 
					                                        f32_3 %52 = OpLoad %31 
					                                        f32_3 %53 = OpFMul %51 %52 
					                                                      OpStore %49 %53 
					                          read_only Texture2D %59 = OpLoad %58 
					                                      sampler %63 = OpLoad %62 
					                   read_only Texture2DSampled %65 = OpSampledImage %59 %63 
					                                        f32_2 %69 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %70 = OpImageSampleImplicitLod %65 %69 
					                                                      OpStore %55 %70 
					                                        f32_4 %71 = OpLoad %55 
					                               Uniform f32_4* %74 = OpAccessChain %36 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpFMul %71 %75 
					                                                      OpStore %55 %76 
					                                        f32_4 %77 = OpLoad %55 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %78 %81 
					                                        f32_4 %83 = OpLoad %55 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %55 %84 
					                          read_only Texture2D %87 = OpLoad %86 
					                                      sampler %89 = OpLoad %88 
					                   read_only Texture2DSampled %90 = OpSampledImage %87 %89 
					                                        f32_2 %91 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %92 = OpImageSampleImplicitLod %90 %91 
					                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 3 
					                                        f32_4 %94 = OpLoad %85 
					                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
					                                                      OpStore %85 %95 
					                                 Private f32* %96 = OpAccessChain %85 %29 
					                                          f32 %97 = OpLoad %96 
					                                 Private f32* %98 = OpAccessChain %85 %18 
					                                          f32 %99 = OpLoad %98 
					                                         f32 %100 = OpFMul %97 %99 
					                                Private f32* %101 = OpAccessChain %85 %18 
					                                                      OpStore %101 %100 
					                                       f32_4 %102 = OpLoad %85 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %106 = OpFMul %103 %105 
					                                       f32_2 %109 = OpFAdd %106 %108 
					                                       f32_4 %110 = OpLoad %85 
					                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
					                                                      OpStore %85 %111 
					                                       f32_4 %113 = OpLoad %85 
					                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
					                                       f32_4 %115 = OpLoad %85 
					                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
					                                         f32 %117 = OpDot %114 %116 
					                                                      OpStore %112 %117 
					                                         f32 %118 = OpLoad %112 
					                                         f32 %120 = OpExtInst %1 37 %118 %119 
					                                                      OpStore %112 %120 
					                                         f32 %121 = OpLoad %112 
					                                         f32 %122 = OpFNegate %121 
					                                         f32 %123 = OpFAdd %122 %119 
					                                                      OpStore %112 %123 
					                                         f32 %124 = OpLoad %112 
					                                         f32 %125 = OpExtInst %1 31 %124 
					                                Private f32* %126 = OpAccessChain %85 %29 
					                                                      OpStore %126 %125 
					                                Private f32* %129 = OpAccessChain %55 %14 
					                                         f32 %130 = OpLoad %129 
					                                  Input f32* %131 = OpAccessChain %79 %14 
					                                         f32 %132 = OpLoad %131 
					                                         f32 %133 = OpFMul %130 %132 
					                                 Output f32* %135 = OpAccessChain %128 %14 
					                                                      OpStore %135 %133 
					                                       f32_4 %137 = OpLoad vs_TEXCOORD1 
					                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
					                                       f32_4 %139 = OpLoad %85 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                         f32 %141 = OpDot %138 %140 
					                                Private f32* %142 = OpAccessChain %136 %18 
					                                                      OpStore %142 %141 
					                                       f32_4 %143 = OpLoad vs_TEXCOORD2 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
					                                       f32_4 %145 = OpLoad %85 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                         f32 %147 = OpDot %144 %146 
					                                Private f32* %148 = OpAccessChain %136 %24 
					                                                      OpStore %148 %147 
					                                       f32_4 %149 = OpLoad vs_TEXCOORD3 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_4 %151 = OpLoad %85 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
					                                         f32 %153 = OpDot %150 %152 
					                                Private f32* %154 = OpAccessChain %136 %29 
					                                                      OpStore %154 %153 
					                                       f32_4 %155 = OpLoad %136 
					                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
					                                       f32_4 %157 = OpLoad %136 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                         f32 %159 = OpDot %156 %158 
					                                                      OpStore %112 %159 
					                                         f32 %160 = OpLoad %112 
					                                         f32 %161 = OpExtInst %1 32 %160 
					                                                      OpStore %112 %161 
					                                         f32 %162 = OpLoad %112 
					                                       f32_3 %163 = OpCompositeConstruct %162 %162 %162 
					                                       f32_4 %164 = OpLoad %136 
					                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
					                                       f32_3 %166 = OpFMul %163 %165 
					                                       f32_4 %167 = OpLoad %85 
					                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
					                                                      OpStore %85 %168 
					                                       f32_3 %169 = OpLoad %49 
					                                       f32_3 %170 = OpFNegate %169 
					                                       f32_4 %171 = OpLoad %85 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %170 %172 
					                                                      OpStore %112 %173 
					                                         f32 %174 = OpLoad %112 
					                                         f32 %175 = OpLoad %112 
					                                         f32 %176 = OpFAdd %174 %175 
					                                                      OpStore %112 %176 
					                                       f32_4 %177 = OpLoad %85 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpLoad %112 
					                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
					                                       f32_3 %181 = OpFNegate %180 
					                                       f32_3 %182 = OpFMul %178 %181 
					                                       f32_3 %183 = OpLoad %49 
					                                       f32_3 %184 = OpFNegate %183 
					                                       f32_3 %185 = OpFAdd %182 %184 
					                                       f32_4 %186 = OpLoad %136 
					                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
					                                                      OpStore %136 %187 
					                                Private f32* %188 = OpAccessChain %85 %14 
					                                                      OpStore %188 %119 
					                              Uniform f32_4* %191 = OpAccessChain %36 %190 
					                                       f32_4 %192 = OpLoad %191 
					                                       f32_4 %193 = OpLoad %85 
					                                         f32 %194 = OpDot %192 %193 
					                                Private f32* %195 = OpAccessChain %189 %18 
					                                                      OpStore %195 %194 
					                              Uniform f32_4* %197 = OpAccessChain %36 %196 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_4 %199 = OpLoad %85 
					                                         f32 %200 = OpDot %198 %199 
					                                Private f32* %201 = OpAccessChain %189 %24 
					                                                      OpStore %201 %200 
					                              Uniform f32_4* %203 = OpAccessChain %36 %202 
					                                       f32_4 %204 = OpLoad %203 
					                                       f32_4 %205 = OpLoad %85 
					                                         f32 %206 = OpDot %204 %205 
					                                Private f32* %207 = OpAccessChain %189 %29 
					                                                      OpStore %207 %206 
					                                       f32_3 %208 = OpLoad %189 
					                                       f32_3 %211 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %212 = OpFAdd %208 %211 
					                                                      OpStore %189 %212 
					                                       f32_3 %213 = OpLoad %189 
					                                       f32_3 %216 = OpExtInst %1 40 %213 %215 
					                                                      OpStore %189 %216 
					                                Uniform f32* %222 = OpAccessChain %36 %220 %14 
					                                         f32 %223 = OpLoad %222 
					                                        bool %224 = OpFOrdLessThan %214 %223 
					                                                      OpStore %219 %224 
					                                        bool %225 = OpLoad %219 
					                                                      OpSelectionMerge %227 None 
					                                                      OpBranchConditional %225 %226 %341 
					                                             %226 = OpLabel 
					                                       f32_4 %228 = OpLoad %136 
					                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
					                                       f32_4 %230 = OpLoad %136 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                         f32 %232 = OpDot %229 %231 
					                                                      OpStore %112 %232 
					                                         f32 %233 = OpLoad %112 
					                                         f32 %234 = OpExtInst %1 32 %233 
					                                                      OpStore %112 %234 
					                                         f32 %236 = OpLoad %112 
					                                       f32_3 %237 = OpCompositeConstruct %236 %236 %236 
					                                       f32_4 %238 = OpLoad %136 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                       f32_3 %240 = OpFMul %237 %239 
					                                       f32_4 %241 = OpLoad %235 
					                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
					                                                      OpStore %235 %242 
					                                       f32_3 %244 = OpLoad %9 
					                                       f32_3 %245 = OpFNegate %244 
					                              Uniform f32_4* %247 = OpAccessChain %36 %246 
					                                       f32_4 %248 = OpLoad %247 
					                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
					                                       f32_3 %250 = OpFAdd %245 %249 
					                                                      OpStore %243 %250 
					                                       f32_3 %251 = OpLoad %243 
					                                       f32_4 %252 = OpLoad %235 
					                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
					                                       f32_3 %254 = OpFDiv %251 %253 
					                                                      OpStore %243 %254 
					                                       f32_3 %256 = OpLoad %9 
					                                       f32_3 %257 = OpFNegate %256 
					                              Uniform f32_4* %259 = OpAccessChain %36 %258 
					                                       f32_4 %260 = OpLoad %259 
					                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
					                                       f32_3 %262 = OpFAdd %257 %261 
					                                                      OpStore %255 %262 
					                                       f32_3 %263 = OpLoad %255 
					                                       f32_4 %264 = OpLoad %235 
					                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
					                                       f32_3 %266 = OpFDiv %263 %265 
					                                                      OpStore %255 %266 
					                                       f32_4 %271 = OpLoad %235 
					                                       f32_4 %272 = OpVectorShuffle %271 %271 0 1 2 0 
					                                      bool_4 %274 = OpFOrdLessThan %270 %272 
					                                      bool_3 %275 = OpVectorShuffle %274 %274 0 1 2 
					                                                      OpStore %269 %275 
					                                       f32_3 %278 = OpLoad %243 
					                                                      OpStore %277 %278 
					                               Private bool* %279 = OpAccessChain %269 %18 
					                                        bool %280 = OpLoad %279 
					                                                      OpSelectionMerge %284 None 
					                                                      OpBranchConditional %280 %283 %287 
					                                             %283 = OpLabel 
					                                Private f32* %285 = OpAccessChain %243 %18 
					                                         f32 %286 = OpLoad %285 
					                                                      OpStore %282 %286 
					                                                      OpBranch %284 
					                                             %287 = OpLabel 
					                                Private f32* %288 = OpAccessChain %255 %18 
					                                         f32 %289 = OpLoad %288 
					                                                      OpStore %282 %289 
					                                                      OpBranch %284 
					                                             %284 = OpLabel 
					                                         f32 %290 = OpLoad %282 
					                               Function f32* %291 = OpAccessChain %277 %18 
					                                                      OpStore %291 %290 
					                               Private bool* %292 = OpAccessChain %269 %24 
					                                        bool %293 = OpLoad %292 
					                                                      OpSelectionMerge %296 None 
					                                                      OpBranchConditional %293 %295 %299 
					                                             %295 = OpLabel 
					                                Private f32* %297 = OpAccessChain %243 %24 
					                                         f32 %298 = OpLoad %297 
					                                                      OpStore %294 %298 
					                                                      OpBranch %296 
					                                             %299 = OpLabel 
					                                Private f32* %300 = OpAccessChain %255 %24 
					                                         f32 %301 = OpLoad %300 
					                                                      OpStore %294 %301 
					                                                      OpBranch %296 
					                                             %296 = OpLabel 
					                                         f32 %302 = OpLoad %294 
					                               Function f32* %303 = OpAccessChain %277 %24 
					                                                      OpStore %303 %302 
					                               Private bool* %304 = OpAccessChain %269 %29 
					                                        bool %305 = OpLoad %304 
					                                                      OpSelectionMerge %308 None 
					                                                      OpBranchConditional %305 %307 %311 
					                                             %307 = OpLabel 
					                                Private f32* %309 = OpAccessChain %243 %29 
					                                         f32 %310 = OpLoad %309 
					                                                      OpStore %306 %310 
					                                                      OpBranch %308 
					                                             %311 = OpLabel 
					                                Private f32* %312 = OpAccessChain %255 %29 
					                                         f32 %313 = OpLoad %312 
					                                                      OpStore %306 %313 
					                                                      OpBranch %308 
					                                             %308 = OpLabel 
					                                         f32 %314 = OpLoad %306 
					                               Function f32* %315 = OpAccessChain %277 %29 
					                                                      OpStore %315 %314 
					                                       f32_3 %316 = OpLoad %277 
					                                                      OpStore %243 %316 
					                                Private f32* %317 = OpAccessChain %243 %24 
					                                         f32 %318 = OpLoad %317 
					                                Private f32* %319 = OpAccessChain %243 %18 
					                                         f32 %320 = OpLoad %319 
					                                         f32 %321 = OpExtInst %1 37 %318 %320 
					                                                      OpStore %112 %321 
					                                Private f32* %322 = OpAccessChain %243 %29 
					                                         f32 %323 = OpLoad %322 
					                                         f32 %324 = OpLoad %112 
					                                         f32 %325 = OpExtInst %1 37 %323 %324 
					                                                      OpStore %112 %325 
					                                       f32_3 %326 = OpLoad %9 
					                              Uniform f32_4* %327 = OpAccessChain %36 %220 
					                                       f32_4 %328 = OpLoad %327 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_3 %330 = OpFNegate %329 
					                                       f32_3 %331 = OpFAdd %326 %330 
					                                                      OpStore %243 %331 
					                                       f32_4 %332 = OpLoad %235 
					                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
					                                         f32 %334 = OpLoad %112 
					                                       f32_3 %335 = OpCompositeConstruct %334 %334 %334 
					                                       f32_3 %336 = OpFMul %333 %335 
					                                       f32_3 %337 = OpLoad %243 
					                                       f32_3 %338 = OpFAdd %336 %337 
					                                       f32_4 %339 = OpLoad %235 
					                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
					                                                      OpStore %235 %340 
					                                                      OpBranch %227 
					                                             %341 = OpLabel 
					                                       f32_4 %342 = OpLoad %136 
					                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
					                                       f32_4 %344 = OpLoad %235 
					                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 6 3 
					                                                      OpStore %235 %345 
					                                                      OpBranch %227 
					                                             %227 = OpLabel 
					                       read_only TextureCube %349 = OpLoad %348 
					                                     sampler %351 = OpLoad %350 
					                read_only TextureCubeSampled %353 = OpSampledImage %349 %351 
					                                       f32_4 %354 = OpLoad %235 
					                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
					                                       f32_4 %357 = OpImageSampleExplicitLod %353 %355 Lod %10 
					                                                      OpStore %235 %357 
					                                Private f32* %358 = OpAccessChain %235 %14 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFAdd %359 %107 
					                                                      OpStore %112 %360 
					                                Uniform f32* %362 = OpAccessChain %36 %361 %14 
					                                         f32 %363 = OpLoad %362 
					                                         f32 %364 = OpLoad %112 
					                                         f32 %365 = OpFMul %363 %364 
					                                         f32 %366 = OpFAdd %365 %119 
					                                                      OpStore %112 %366 
					                                         f32 %367 = OpLoad %112 
					                                         f32 %368 = OpExtInst %1 30 %367 
					                                                      OpStore %112 %368 
					                                         f32 %369 = OpLoad %112 
					                                Uniform f32* %370 = OpAccessChain %36 %361 %24 
					                                         f32 %371 = OpLoad %370 
					                                         f32 %372 = OpFMul %369 %371 
					                                                      OpStore %112 %372 
					                                         f32 %373 = OpLoad %112 
					                                         f32 %374 = OpExtInst %1 29 %373 
					                                                      OpStore %112 %374 
					                                         f32 %375 = OpLoad %112 
					                                Uniform f32* %376 = OpAccessChain %36 %361 %18 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                                      OpStore %112 %378 
					                                       f32_4 %379 = OpLoad %235 
					                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
					                                         f32 %381 = OpLoad %112 
					                                       f32_3 %382 = OpCompositeConstruct %381 %381 %381 
					                                       f32_3 %383 = OpFMul %380 %382 
					                                                      OpStore %243 %383 
					                                Uniform f32* %385 = OpAccessChain %36 %258 %14 
					                                         f32 %386 = OpLoad %385 
					                                        bool %388 = OpFOrdLessThan %386 %387 
					                                                      OpStore %384 %388 
					                                        bool %389 = OpLoad %384 
					                                                      OpSelectionMerge %391 None 
					                                                      OpBranchConditional %389 %390 %391 
					                                             %390 = OpLabel 
					                                Uniform f32* %393 = OpAccessChain %36 %392 %14 
					                                         f32 %394 = OpLoad %393 
					                                        bool %395 = OpFOrdLessThan %214 %394 
					                                                      OpStore %384 %395 
					                                        bool %396 = OpLoad %384 
					                                                      OpSelectionMerge %398 None 
					                                                      OpBranchConditional %396 %397 %398 
					                                             %397 = OpLabel 
					                                       f32_4 %400 = OpLoad %136 
					                                       f32_3 %401 = OpVectorShuffle %400 %400 0 1 2 
					                                       f32_4 %402 = OpLoad %136 
					                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
					                                         f32 %404 = OpDot %401 %403 
					                                                      OpStore %399 %404 
					                                         f32 %405 = OpLoad %399 
					                                         f32 %406 = OpExtInst %1 32 %405 
					                                                      OpStore %399 %406 
					                                         f32 %407 = OpLoad %399 
					                                       f32_3 %408 = OpCompositeConstruct %407 %407 %407 
					                                       f32_4 %409 = OpLoad %136 
					                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
					                                       f32_3 %411 = OpFMul %408 %410 
					                                                      OpStore %255 %411 
					                                       f32_3 %413 = OpLoad %9 
					                                       f32_3 %414 = OpFNegate %413 
					                              Uniform f32_4* %416 = OpAccessChain %36 %415 
					                                       f32_4 %417 = OpLoad %416 
					                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
					                                       f32_3 %419 = OpFAdd %414 %418 
					                                                      OpStore %412 %419 
					                                       f32_3 %420 = OpLoad %412 
					                                       f32_3 %421 = OpLoad %255 
					                                       f32_3 %422 = OpFDiv %420 %421 
					                                                      OpStore %412 %422 
					                                       f32_3 %424 = OpLoad %9 
					                                       f32_3 %425 = OpFNegate %424 
					                              Uniform f32_4* %427 = OpAccessChain %36 %426 
					                                       f32_4 %428 = OpLoad %427 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFAdd %425 %429 
					                                                      OpStore %423 %430 
					                                       f32_3 %431 = OpLoad %423 
					                                       f32_3 %432 = OpLoad %255 
					                                       f32_3 %433 = OpFDiv %431 %432 
					                                                      OpStore %423 %433 
					                                       f32_3 %435 = OpLoad %255 
					                                       f32_4 %436 = OpVectorShuffle %435 %435 0 1 2 0 
					                                      bool_4 %437 = OpFOrdLessThan %270 %436 
					                                      bool_3 %438 = OpVectorShuffle %437 %437 0 1 2 
					                                                      OpStore %434 %438 
					                                       f32_3 %440 = OpLoad %412 
					                                                      OpStore %439 %440 
					                               Private bool* %441 = OpAccessChain %434 %18 
					                                        bool %442 = OpLoad %441 
					                                                      OpSelectionMerge %445 None 
					                                                      OpBranchConditional %442 %444 %448 
					                                             %444 = OpLabel 
					                                Private f32* %446 = OpAccessChain %412 %18 
					                                         f32 %447 = OpLoad %446 
					                                                      OpStore %443 %447 
					                                                      OpBranch %445 
					                                             %448 = OpLabel 
					                                Private f32* %449 = OpAccessChain %423 %18 
					                                         f32 %450 = OpLoad %449 
					                                                      OpStore %443 %450 
					                                                      OpBranch %445 
					                                             %445 = OpLabel 
					                                         f32 %451 = OpLoad %443 
					                               Function f32* %452 = OpAccessChain %439 %18 
					                                                      OpStore %452 %451 
					                               Private bool* %453 = OpAccessChain %434 %24 
					                                        bool %454 = OpLoad %453 
					                                                      OpSelectionMerge %457 None 
					                                                      OpBranchConditional %454 %456 %460 
					                                             %456 = OpLabel 
					                                Private f32* %458 = OpAccessChain %412 %24 
					                                         f32 %459 = OpLoad %458 
					                                                      OpStore %455 %459 
					                                                      OpBranch %457 
					                                             %460 = OpLabel 
					                                Private f32* %461 = OpAccessChain %423 %24 
					                                         f32 %462 = OpLoad %461 
					                                                      OpStore %455 %462 
					                                                      OpBranch %457 
					                                             %457 = OpLabel 
					                                         f32 %463 = OpLoad %455 
					                               Function f32* %464 = OpAccessChain %439 %24 
					                                                      OpStore %464 %463 
					                               Private bool* %465 = OpAccessChain %434 %29 
					                                        bool %466 = OpLoad %465 
					                                                      OpSelectionMerge %469 None 
					                                                      OpBranchConditional %466 %468 %472 
					                                             %468 = OpLabel 
					                                Private f32* %470 = OpAccessChain %412 %29 
					                                         f32 %471 = OpLoad %470 
					                                                      OpStore %467 %471 
					                                                      OpBranch %469 
					                                             %472 = OpLabel 
					                                Private f32* %473 = OpAccessChain %423 %29 
					                                         f32 %474 = OpLoad %473 
					                                                      OpStore %467 %474 
					                                                      OpBranch %469 
					                                             %469 = OpLabel 
					                                         f32 %475 = OpLoad %467 
					                               Function f32* %476 = OpAccessChain %439 %29 
					                                                      OpStore %476 %475 
					                                       f32_3 %477 = OpLoad %439 
					                                                      OpStore %412 %477 
					                                Private f32* %478 = OpAccessChain %412 %24 
					                                         f32 %479 = OpLoad %478 
					                                Private f32* %480 = OpAccessChain %412 %18 
					                                         f32 %481 = OpLoad %480 
					                                         f32 %482 = OpExtInst %1 37 %479 %481 
					                                                      OpStore %399 %482 
					                                Private f32* %483 = OpAccessChain %412 %29 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpLoad %399 
					                                         f32 %486 = OpExtInst %1 37 %484 %485 
					                                                      OpStore %399 %486 
					                                       f32_3 %487 = OpLoad %9 
					                              Uniform f32_4* %488 = OpAccessChain %36 %392 
					                                       f32_4 %489 = OpLoad %488 
					                                       f32_3 %490 = OpVectorShuffle %489 %489 0 1 2 
					                                       f32_3 %491 = OpFNegate %490 
					                                       f32_3 %492 = OpFAdd %487 %491 
					                                                      OpStore %9 %492 
					                                       f32_3 %493 = OpLoad %255 
					                                         f32 %494 = OpLoad %399 
					                                       f32_3 %495 = OpCompositeConstruct %494 %494 %494 
					                                       f32_3 %496 = OpFMul %493 %495 
					                                       f32_3 %497 = OpLoad %9 
					                                       f32_3 %498 = OpFAdd %496 %497 
					                                       f32_4 %499 = OpLoad %136 
					                                       f32_4 %500 = OpVectorShuffle %499 %498 4 5 6 3 
					                                                      OpStore %136 %500 
					                                                      OpBranch %398 
					                                             %398 = OpLabel 
					                       read_only TextureCube %502 = OpLoad %501 
					                                     sampler %503 = OpLoad %350 
					                read_only TextureCubeSampled %504 = OpSampledImage %502 %503 
					                                       f32_4 %505 = OpLoad %136 
					                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
					                                       f32_4 %507 = OpImageSampleExplicitLod %504 %506 Lod %10 
					                                                      OpStore %136 %507 
					                                Private f32* %508 = OpAccessChain %136 %14 
					                                         f32 %509 = OpLoad %508 
					                                         f32 %510 = OpFAdd %509 %107 
					                                Private f32* %511 = OpAccessChain %9 %18 
					                                                      OpStore %511 %510 
					                                Uniform f32* %513 = OpAccessChain %36 %512 %14 
					                                         f32 %514 = OpLoad %513 
					                                Private f32* %515 = OpAccessChain %9 %18 
					                                         f32 %516 = OpLoad %515 
					                                         f32 %517 = OpFMul %514 %516 
					                                         f32 %518 = OpFAdd %517 %119 
					                                Private f32* %519 = OpAccessChain %9 %18 
					                                                      OpStore %519 %518 
					                                Private f32* %520 = OpAccessChain %9 %18 
					                                         f32 %521 = OpLoad %520 
					                                         f32 %522 = OpExtInst %1 30 %521 
					                                Private f32* %523 = OpAccessChain %9 %18 
					                                                      OpStore %523 %522 
					                                Private f32* %524 = OpAccessChain %9 %18 
					                                         f32 %525 = OpLoad %524 
					                                Uniform f32* %526 = OpAccessChain %36 %512 %24 
					                                         f32 %527 = OpLoad %526 
					                                         f32 %528 = OpFMul %525 %527 
					                                Private f32* %529 = OpAccessChain %9 %18 
					                                                      OpStore %529 %528 
					                                Private f32* %530 = OpAccessChain %9 %18 
					                                         f32 %531 = OpLoad %530 
					                                         f32 %532 = OpExtInst %1 29 %531 
					                                Private f32* %533 = OpAccessChain %9 %18 
					                                                      OpStore %533 %532 
					                                Private f32* %534 = OpAccessChain %9 %18 
					                                         f32 %535 = OpLoad %534 
					                                Uniform f32* %536 = OpAccessChain %36 %512 %18 
					                                         f32 %537 = OpLoad %536 
					                                         f32 %538 = OpFMul %535 %537 
					                                Private f32* %539 = OpAccessChain %9 %18 
					                                                      OpStore %539 %538 
					                                       f32_4 %540 = OpLoad %136 
					                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
					                                       f32_3 %542 = OpLoad %9 
					                                       f32_3 %543 = OpVectorShuffle %542 %542 0 0 0 
					                                       f32_3 %544 = OpFMul %541 %543 
					                                                      OpStore %9 %544 
					                                         f32 %545 = OpLoad %112 
					                                       f32_3 %546 = OpCompositeConstruct %545 %545 %545 
					                                       f32_4 %547 = OpLoad %235 
					                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
					                                       f32_3 %549 = OpFMul %546 %548 
					                                       f32_3 %550 = OpLoad %9 
					                                       f32_3 %551 = OpFNegate %550 
					                                       f32_3 %552 = OpFAdd %549 %551 
					                                       f32_4 %553 = OpLoad %136 
					                                       f32_4 %554 = OpVectorShuffle %553 %552 4 5 6 3 
					                                                      OpStore %136 %554 
					                              Uniform f32_4* %555 = OpAccessChain %36 %258 
					                                       f32_4 %556 = OpLoad %555 
					                                       f32_3 %557 = OpVectorShuffle %556 %556 3 3 3 
					                                       f32_4 %558 = OpLoad %136 
					                                       f32_3 %559 = OpVectorShuffle %558 %558 0 1 2 
					                                       f32_3 %560 = OpFMul %557 %559 
					                                       f32_3 %561 = OpLoad %9 
					                                       f32_3 %562 = OpFAdd %560 %561 
					                                                      OpStore %243 %562 
					                                                      OpBranch %391 
					                                             %391 = OpLabel 
					                                       f32_4 %563 = OpLoad %55 
					                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
					                                       f32_3 %567 = OpFMul %564 %566 
					                                                      OpStore %9 %567 
					                                       f32_3 %568 = OpLoad %31 
					                                         f32 %569 = OpLoad %43 
					                                       f32_3 %570 = OpCompositeConstruct %569 %569 %569 
					                                       f32_3 %571 = OpFMul %568 %570 
					                              Uniform f32_4* %573 = OpAccessChain %36 %572 
					                                       f32_4 %574 = OpLoad %573 
					                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
					                                       f32_3 %576 = OpFAdd %571 %575 
					                                                      OpStore %31 %576 
					                                       f32_3 %577 = OpLoad %31 
					                                       f32_3 %578 = OpLoad %31 
					                                         f32 %579 = OpDot %577 %578 
					                                                      OpStore %43 %579 
					                                         f32 %580 = OpLoad %43 
					                                         f32 %582 = OpExtInst %1 40 %580 %581 
					                                                      OpStore %43 %582 
					                                         f32 %583 = OpLoad %43 
					                                         f32 %584 = OpExtInst %1 32 %583 
					                                                      OpStore %43 %584 
					                                         f32 %585 = OpLoad %43 
					                                       f32_3 %586 = OpCompositeConstruct %585 %585 %585 
					                                       f32_3 %587 = OpLoad %31 
					                                       f32_3 %588 = OpFMul %586 %587 
					                                                      OpStore %31 %588 
					                                       f32_4 %589 = OpLoad %85 
					                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
					                                       f32_3 %591 = OpLoad %49 
					                                         f32 %592 = OpDot %590 %591 
					                                                      OpStore %43 %592 
					                                       f32_4 %593 = OpLoad %85 
					                                       f32_3 %594 = OpVectorShuffle %593 %593 0 1 2 
					                              Uniform f32_4* %595 = OpAccessChain %36 %572 
					                                       f32_4 %596 = OpLoad %595 
					                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
					                                         f32 %598 = OpDot %594 %597 
					                                                      OpStore %112 %598 
					                                         f32 %599 = OpLoad %112 
					                                         f32 %600 = OpExtInst %1 43 %599 %214 %119 
					                                                      OpStore %112 %600 
					                              Uniform f32_4* %601 = OpAccessChain %36 %572 
					                                       f32_4 %602 = OpLoad %601 
					                                       f32_3 %603 = OpVectorShuffle %602 %602 0 1 2 
					                                       f32_3 %604 = OpLoad %31 
					                                         f32 %605 = OpDot %603 %604 
					                                Private f32* %606 = OpAccessChain %31 %18 
					                                                      OpStore %606 %605 
					                                Private f32* %607 = OpAccessChain %31 %18 
					                                         f32 %608 = OpLoad %607 
					                                         f32 %609 = OpExtInst %1 43 %608 %214 %119 
					                                Private f32* %610 = OpAccessChain %31 %18 
					                                                      OpStore %610 %609 
					                                       f32_3 %612 = OpLoad %31 
					                                       f32_2 %613 = OpVectorShuffle %612 %612 0 0 
					                                       f32_3 %614 = OpLoad %31 
					                                       f32_2 %615 = OpVectorShuffle %614 %614 0 0 
					                                         f32 %616 = OpDot %613 %615 
					                                Private f32* %617 = OpAccessChain %611 %18 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %611 %18 
					                                         f32 %619 = OpLoad %618 
					                                         f32 %621 = OpFAdd %619 %620 
					                                Private f32* %622 = OpAccessChain %611 %18 
					                                                      OpStore %622 %621 
					                                         f32 %624 = OpLoad %112 
					                                         f32 %625 = OpFNegate %624 
					                                         f32 %626 = OpFAdd %625 %119 
					                                                      OpStore %623 %626 
					                                         f32 %627 = OpLoad %623 
					                                         f32 %628 = OpLoad %623 
					                                         f32 %629 = OpFMul %627 %628 
					                                Private f32* %630 = OpAccessChain %49 %18 
					                                                      OpStore %630 %629 
					                                Private f32* %631 = OpAccessChain %49 %18 
					                                         f32 %632 = OpLoad %631 
					                                Private f32* %633 = OpAccessChain %49 %18 
					                                         f32 %634 = OpLoad %633 
					                                         f32 %635 = OpFMul %632 %634 
					                                Private f32* %636 = OpAccessChain %49 %18 
					                                                      OpStore %636 %635 
					                                         f32 %637 = OpLoad %623 
					                                Private f32* %638 = OpAccessChain %49 %18 
					                                         f32 %639 = OpLoad %638 
					                                         f32 %640 = OpFMul %637 %639 
					                                                      OpStore %623 %640 
					                                Private f32* %641 = OpAccessChain %611 %18 
					                                         f32 %642 = OpLoad %641 
					                                         f32 %643 = OpLoad %623 
					                                         f32 %644 = OpFMul %642 %643 
					                                         f32 %645 = OpFAdd %644 %119 
					                                                      OpStore %623 %645 
					                                         f32 %646 = OpLoad %43 
					                                         f32 %647 = OpExtInst %1 4 %646 
					                                         f32 %648 = OpFNegate %647 
					                                         f32 %649 = OpFAdd %648 %119 
					                                Private f32* %650 = OpAccessChain %49 %18 
					                                                      OpStore %650 %649 
					                                Private f32* %652 = OpAccessChain %49 %18 
					                                         f32 %653 = OpLoad %652 
					                                Private f32* %654 = OpAccessChain %49 %18 
					                                         f32 %655 = OpLoad %654 
					                                         f32 %656 = OpFMul %653 %655 
					                                Private f32* %657 = OpAccessChain %651 %18 
					                                                      OpStore %657 %656 
					                                Private f32* %658 = OpAccessChain %651 %18 
					                                         f32 %659 = OpLoad %658 
					                                Private f32* %660 = OpAccessChain %651 %18 
					                                         f32 %661 = OpLoad %660 
					                                         f32 %662 = OpFMul %659 %661 
					                                Private f32* %663 = OpAccessChain %651 %18 
					                                                      OpStore %663 %662 
					                                Private f32* %664 = OpAccessChain %49 %18 
					                                         f32 %665 = OpLoad %664 
					                                Private f32* %666 = OpAccessChain %651 %18 
					                                         f32 %667 = OpLoad %666 
					                                         f32 %668 = OpFMul %665 %667 
					                                Private f32* %669 = OpAccessChain %49 %18 
					                                                      OpStore %669 %668 
					                                Private f32* %670 = OpAccessChain %611 %18 
					                                         f32 %671 = OpLoad %670 
					                                Private f32* %672 = OpAccessChain %49 %18 
					                                         f32 %673 = OpLoad %672 
					                                         f32 %674 = OpFMul %671 %673 
					                                         f32 %675 = OpFAdd %674 %119 
					                                Private f32* %676 = OpAccessChain %611 %18 
					                                                      OpStore %676 %675 
					                                Private f32* %677 = OpAccessChain %611 %18 
					                                         f32 %678 = OpLoad %677 
					                                         f32 %679 = OpLoad %623 
					                                         f32 %680 = OpFMul %678 %679 
					                                Private f32* %681 = OpAccessChain %611 %18 
					                                                      OpStore %681 %680 
					                                         f32 %682 = OpLoad %112 
					                                Private f32* %683 = OpAccessChain %611 %18 
					                                         f32 %684 = OpLoad %683 
					                                         f32 %685 = OpFMul %682 %684 
					                                Private f32* %686 = OpAccessChain %611 %18 
					                                                      OpStore %686 %685 
					                                         f32 %687 = OpLoad %43 
					                                         f32 %688 = OpExtInst %1 4 %687 
					                                         f32 %689 = OpLoad %112 
					                                         f32 %690 = OpFAdd %688 %689 
					                                                      OpStore %43 %690 
					                                         f32 %691 = OpLoad %43 
					                                         f32 %693 = OpFAdd %691 %692 
					                                                      OpStore %43 %693 
					                                         f32 %695 = OpLoad %43 
					                                         f32 %696 = OpFDiv %694 %695 
					                                                      OpStore %43 %696 
					                                         f32 %697 = OpLoad %112 
					                                         f32 %698 = OpLoad %43 
					                                         f32 %699 = OpFMul %697 %698 
					                                                      OpStore %43 %699 
					                                         f32 %700 = OpLoad %43 
					                                         f32 %702 = OpFMul %700 %701 
					                                                      OpStore %43 %702 
					                              Uniform f32_4* %704 = OpAccessChain %36 %703 
					                                       f32_4 %705 = OpLoad %704 
					                                       f32_3 %706 = OpVectorShuffle %705 %705 0 1 2 
					                                       f32_3 %707 = OpLoad %611 
					                                       f32_3 %708 = OpVectorShuffle %707 %707 0 0 0 
					                                       f32_3 %709 = OpFMul %706 %708 
					                                       f32_3 %710 = OpLoad %189 
					                                       f32_3 %711 = OpFAdd %709 %710 
					                                                      OpStore %611 %711 
					                                         f32 %712 = OpLoad %43 
					                                       f32_3 %713 = OpCompositeConstruct %712 %712 %712 
					                              Uniform f32_4* %714 = OpAccessChain %36 %703 
					                                       f32_4 %715 = OpLoad %714 
					                                       f32_3 %716 = OpVectorShuffle %715 %715 0 1 2 
					                                       f32_3 %717 = OpFMul %713 %716 
					                                                      OpStore %651 %717 
					                                Private f32* %718 = OpAccessChain %31 %18 
					                                         f32 %719 = OpLoad %718 
					                                         f32 %720 = OpFNegate %719 
					                                         f32 %721 = OpFAdd %720 %119 
					                                                      OpStore %43 %721 
					                                         f32 %722 = OpLoad %43 
					                                         f32 %723 = OpLoad %43 
					                                         f32 %724 = OpFMul %722 %723 
					                                Private f32* %725 = OpAccessChain %31 %18 
					                                                      OpStore %725 %724 
					                                Private f32* %726 = OpAccessChain %31 %18 
					                                         f32 %727 = OpLoad %726 
					                                Private f32* %728 = OpAccessChain %31 %18 
					                                         f32 %729 = OpLoad %728 
					                                         f32 %730 = OpFMul %727 %729 
					                                Private f32* %731 = OpAccessChain %31 %18 
					                                                      OpStore %731 %730 
					                                         f32 %732 = OpLoad %43 
					                                Private f32* %733 = OpAccessChain %31 %18 
					                                         f32 %734 = OpLoad %733 
					                                         f32 %735 = OpFMul %732 %734 
					                                                      OpStore %43 %735 
					                                         f32 %736 = OpLoad %43 
					                                         f32 %737 = OpFMul %736 %565 
					                                         f32 %739 = OpFAdd %737 %738 
					                                                      OpStore %43 %739 
					                                         f32 %740 = OpLoad %43 
					                                       f32_3 %741 = OpCompositeConstruct %740 %740 %740 
					                                       f32_3 %742 = OpLoad %651 
					                                       f32_3 %743 = OpFMul %741 %742 
					                                                      OpStore %651 %743 
					                                       f32_3 %744 = OpLoad %9 
					                                       f32_3 %745 = OpLoad %611 
					                                       f32_3 %746 = OpFMul %744 %745 
					                                       f32_3 %747 = OpLoad %651 
					                                       f32_3 %748 = OpFAdd %746 %747 
					                                                      OpStore %9 %748 
					                                       f32_3 %749 = OpLoad %243 
					                                       f32_3 %751 = OpFMul %749 %750 
					                                                      OpStore %31 %751 
					                                Private f32* %752 = OpAccessChain %49 %18 
					                                         f32 %753 = OpLoad %752 
					                                         f32 %755 = OpFMul %753 %754 
					                                         f32 %756 = OpFAdd %755 %738 
					                                                      OpStore %43 %756 
					                                       f32_3 %757 = OpLoad %31 
					                                         f32 %758 = OpLoad %43 
					                                       f32_3 %759 = OpCompositeConstruct %758 %758 %758 
					                                       f32_3 %760 = OpFMul %757 %759 
					                                       f32_3 %761 = OpLoad %9 
					                                       f32_3 %762 = OpFAdd %760 %761 
					                                                      OpStore %9 %762 
					                                         f32 %764 = OpLoad vs_TEXCOORD6 
					                                Uniform f32* %766 = OpAccessChain %36 %765 %24 
					                                         f32 %767 = OpLoad %766 
					                                         f32 %768 = OpFDiv %764 %767 
					                                                      OpStore %43 %768 
					                                         f32 %769 = OpLoad %43 
					                                         f32 %770 = OpFNegate %769 
					                                         f32 %771 = OpFAdd %770 %119 
					                                                      OpStore %43 %771 
					                                         f32 %772 = OpLoad %43 
					                                Uniform f32* %773 = OpAccessChain %36 %765 %29 
					                                         f32 %774 = OpLoad %773 
					                                         f32 %775 = OpFMul %772 %774 
					                                                      OpStore %43 %775 
					                                         f32 %776 = OpLoad %43 
					                                         f32 %777 = OpExtInst %1 40 %776 %214 
					                                                      OpStore %43 %777 
					                                         f32 %778 = OpLoad %43 
					                                Uniform f32* %780 = OpAccessChain %36 %779 %29 
					                                         f32 %781 = OpLoad %780 
					                                         f32 %782 = OpFMul %778 %781 
					                                Uniform f32* %783 = OpAccessChain %36 %779 %14 
					                                         f32 %784 = OpLoad %783 
					                                         f32 %785 = OpFAdd %782 %784 
					                                                      OpStore %43 %785 
					                                         f32 %786 = OpLoad %43 
					                                         f32 %787 = OpExtInst %1 43 %786 %214 %119 
					                                                      OpStore %43 %787 
					                                       f32_3 %788 = OpLoad %9 
					                              Uniform f32_4* %790 = OpAccessChain %36 %789 
					                                       f32_4 %791 = OpLoad %790 
					                                       f32_3 %792 = OpVectorShuffle %791 %791 0 1 2 
					                                       f32_3 %793 = OpFNegate %792 
					                                       f32_3 %794 = OpFAdd %788 %793 
					                                                      OpStore %9 %794 
					                                         f32 %795 = OpLoad %43 
					                                       f32_3 %796 = OpCompositeConstruct %795 %795 %795 
					                                       f32_3 %797 = OpLoad %9 
					                                       f32_3 %798 = OpFMul %796 %797 
					                              Uniform f32_4* %799 = OpAccessChain %36 %789 
					                                       f32_4 %800 = OpLoad %799 
					                                       f32_3 %801 = OpVectorShuffle %800 %800 0 1 2 
					                                       f32_3 %802 = OpFAdd %798 %801 
					                                       f32_4 %803 = OpLoad %128 
					                                       f32_4 %804 = OpVectorShuffle %803 %802 4 5 6 3 
					                                                      OpStore %128 %804 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	vec4 unity_4LightAtten0;
					uniform 	vec4 unity_LightColor[8];
					uniform 	vec4 unity_SHBr;
					uniform 	vec4 unity_SHBg;
					uniform 	vec4 unity_SHBb;
					uniform 	vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_SHAr;
					uniform 	vec4 unity_SHAg;
					uniform 	vec4 unity_SHAb;
					uniform 	vec4 unity_FogColor;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	vec4 unity_SpecCube1_HDR;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
					UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					float u_xlat27;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat2.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat4 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat4.z = sqrt(u_xlat40);
					    SV_Target0.w = u_xlat3.w * vs_COLOR0.w;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat4.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					    u_xlat40 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat40 = u_xlat40 + u_xlat40;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat40)) + (-u_xlat2.xyz);
					    u_xlat4.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat4);
					    u_xlat6.y = dot(unity_SHAg, u_xlat4);
					    u_xlat6.z = dot(unity_SHAb, u_xlat4);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat7.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat40 = min(u_xlat8.z, u_xlat40);
					        u_xlat8.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat5.xyz;
					    }
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, 6.0);
					    u_xlat40 = u_xlat7.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat9.xyz = vec3(u_xlat41) * u_xlat5.xyz;
					            u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat41 = min(u_xlat10.z, u_xlat41);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat41) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, 6.0);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat40) * u_xlat7.xyz + (-u_xlat0.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat39 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat40 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat14.x = u_xlat14.x + -0.5;
					    u_xlat27 = (-u_xlat40) + 1.0;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat14.x * u_xlat27 + 1.0;
					    u_xlat2.x = -abs(u_xlat39) + 1.0;
					    u_xlat15.x = u_xlat2.x * u_xlat2.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat2.x = u_xlat2.x * u_xlat15.x;
					    u_xlat14.x = u_xlat14.x * u_xlat2.x + 1.0;
					    u_xlat14.x = u_xlat14.x * u_xlat27;
					    u_xlat14.x = u_xlat40 * u_xlat14.x;
					    u_xlat39 = abs(u_xlat39) + u_xlat40;
					    u_xlat39 = u_xlat39 + 9.99999975e-06;
					    u_xlat39 = 0.5 / u_xlat39;
					    u_xlat39 = u_xlat39 * 0.999999881;
					    u_xlat39 = u_xlat40 * u_xlat39;
					    u_xlat14.xyz = _LightColor0.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat15.xyz = vec3(u_xlat39) * _LightColor0.xyz;
					    u_xlat39 = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat39 * 0.959999979 + 0.0399999991;
					    u_xlat15.xyz = vec3(u_xlat39) * u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.xyz + u_xlat15.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat39 = u_xlat2.x * 2.23517418e-08 + 0.0399999991;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    u_xlat39 = vs_TEXCOORD6 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 456
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %97 %102 %109 %110 %122 %168 %183 %251 %255 %277 %278 %280 %444 %450 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD8 "vs_TEXCOORD8" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpMemberDecorate %21 0 Offset 21 
					                                                      OpMemberDecorate %21 1 Offset 21 
					                                                      OpMemberDecorate %21 2 Offset 21 
					                                                      OpMemberDecorate %21 3 Offset 21 
					                                                      OpMemberDecorate %21 4 Offset 21 
					                                                      OpMemberDecorate %21 5 Offset 21 
					                                                      OpMemberDecorate %21 6 Offset 21 
					                                                      OpMemberDecorate %21 7 Offset 21 
					                                                      OpMemberDecorate %21 8 Offset 21 
					                                                      OpMemberDecorate %21 9 Offset 21 
					                                                      OpMemberDecorate %21 10 Offset 21 
					                                                      OpMemberDecorate %21 11 Offset 21 
					                                                      OpMemberDecorate %21 12 Offset 21 
					                                                      OpMemberDecorate %21 13 Offset 21 
					                                                      OpDecorate %21 Block 
					                                                      OpDecorate %23 DescriptorSet 23 
					                                                      OpDecorate %23 Binding 23 
					                                                      OpMemberDecorate %95 0 BuiltIn 95 
					                                                      OpMemberDecorate %95 1 BuiltIn 95 
					                                                      OpMemberDecorate %95 2 BuiltIn 95 
					                                                      OpDecorate %95 Block 
					                                                      OpDecorate vs_TEXCOORD6 Location 102 
					                                                      OpDecorate vs_TEXCOORD0 Location 109 
					                                                      OpDecorate %110 Location 110 
					                                                      OpDecorate %122 Location 122 
					                                                      OpDecorate vs_TEXCOORD1 Location 168 
					                                                      OpDecorate %183 Location 183 
					                                                      OpDecorate vs_TEXCOORD2 Location 251 
					                                                      OpDecorate vs_TEXCOORD3 Location 255 
					                                                      OpDecorate %277 Location 277 
					                                                      OpDecorate %278 Location 278 
					                                                      OpDecorate vs_TEXCOORD4 Location 280 
					                                                      OpDecorate vs_TEXCOORD5 Location 444 
					                                                      OpDecorate vs_TEXCOORD8 Location 450 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 8 
					                                              %16 = OpTypeArray %7 %15 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %7 %17 
					                                              %19 = OpTypeArray %7 %17 
					                                              %20 = OpTypeArray %7 %17 
					                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %18 %19 %7 %20 %7 
					                                              %22 = OpTypePointer Uniform %21 
					Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
					                                              %24 = OpTypeInt 32 1 
					                                          i32 %25 = OpConstant 9 
					                                          i32 %26 = OpConstant 1 
					                                              %27 = OpTypePointer Uniform %7 
					                                          i32 %31 = OpConstant 0 
					                                          i32 %39 = OpConstant 2 
					                               Private f32_4* %47 = OpVariable Private 
					                                          i32 %49 = OpConstant 3 
					                                              %53 = OpTypeVector %6 3 
					                               Private f32_4* %65 = OpVariable Private 
					                                          i32 %68 = OpConstant 12 
					                                          u32 %93 = OpConstant 1 
					                                              %94 = OpTypeArray %6 %93 
					                                              %95 = OpTypeStruct %7 %6 %94 
					                                              %96 = OpTypePointer Output %95 
					         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
					                                              %99 = OpTypePointer Output %7 
					                                             %101 = OpTypePointer Output %6 
					                         Output f32* vs_TEXCOORD6 = OpVariable Output 
					                                         u32 %103 = OpConstant 2 
					                                             %104 = OpTypePointer Private %6 
					                                             %107 = OpTypeVector %6 2 
					                                             %108 = OpTypePointer Output %107 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                Input f32_4* %110 = OpVariable Input 
					                                         i32 %113 = OpConstant 13 
					                                Input f32_4* %122 = OpVariable Input 
					                                Private f32* %153 = OpVariable Private 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                         u32 %171 = OpConstant 0 
					                                         u32 %173 = OpConstant 3 
					                                             %174 = OpTypePointer Input %6 
					                                         i32 %177 = OpConstant 11 
					                                             %178 = OpTypePointer Uniform %6 
					                                             %182 = OpTypePointer Input %53 
					                                Input f32_3* %183 = OpVariable Input 
					                                         i32 %185 = OpConstant 10 
					                                Private f32* %203 = OpVariable Private 
					                              Private f32_4* %216 = OpVariable Private 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                               Output f32_4* %277 = OpVariable Output 
					                                Input f32_4* %278 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
					                                         f32 %281 = OpConstant 3,674022E-40 
					                                       f32_4 %282 = OpConstantComposite %281 %281 %281 %281 
					                              Private f32_4* %301 = OpVariable Private 
					                                         f32 %332 = OpConstant 3,674022E-40 
					                                       f32_4 %333 = OpConstantComposite %332 %332 %332 %332 
					                                         f32 %341 = OpConstant 3,674022E-40 
					                                       f32_4 %342 = OpConstantComposite %341 %341 %341 %341 
					                                         i32 %356 = OpConstant 4 
					                                         i32 %413 = OpConstant 5 
					                                         i32 %419 = OpConstant 6 
					                                         i32 %425 = OpConstant 7 
					                                         i32 %431 = OpConstant 8 
					                                             %443 = OpTypePointer Output %53 
					                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD8 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
					                                        f32_4 %29 = OpLoad %28 
					                                        f32_4 %30 = OpFMul %13 %29 
					                                                      OpStore %9 %30 
					                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
					                                        f32_4 %33 = OpLoad %32 
					                                        f32_4 %34 = OpLoad %11 
					                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
					                                        f32_4 %36 = OpFMul %33 %35 
					                                        f32_4 %37 = OpLoad %9 
					                                        f32_4 %38 = OpFAdd %36 %37 
					                                                      OpStore %9 %38 
					                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
					                                        f32_4 %41 = OpLoad %40 
					                                        f32_4 %42 = OpLoad %11 
					                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
					                                        f32_4 %44 = OpFMul %41 %43 
					                                        f32_4 %45 = OpLoad %9 
					                                        f32_4 %46 = OpFAdd %44 %45 
					                                                      OpStore %9 %46 
					                                        f32_4 %48 = OpLoad %9 
					                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
					                                        f32_4 %51 = OpLoad %50 
					                                        f32_4 %52 = OpFAdd %48 %51 
					                                                      OpStore %47 %52 
					                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_4 %57 = OpLoad %11 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                                        f32_3 %59 = OpFMul %56 %58 
					                                        f32_4 %60 = OpLoad %9 
					                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                                        f32_3 %62 = OpFAdd %59 %61 
					                                        f32_4 %63 = OpLoad %9 
					                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                                      OpStore %9 %64 
					                                        f32_4 %66 = OpLoad %47 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
					                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
					                                        f32_4 %70 = OpLoad %69 
					                                        f32_4 %71 = OpFMul %67 %70 
					                                                      OpStore %65 %71 
					                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
					                                        f32_4 %73 = OpLoad %72 
					                                        f32_4 %74 = OpLoad %47 
					                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
					                                        f32_4 %76 = OpFMul %73 %75 
					                                        f32_4 %77 = OpLoad %65 
					                                        f32_4 %78 = OpFAdd %76 %77 
					                                                      OpStore %65 %78 
					                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_4 %81 = OpLoad %47 
					                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
					                                        f32_4 %83 = OpFMul %80 %82 
					                                        f32_4 %84 = OpLoad %65 
					                                        f32_4 %85 = OpFAdd %83 %84 
					                                                      OpStore %65 %85 
					                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %47 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %65 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                                      OpStore %47 %92 
					                                        f32_4 %98 = OpLoad %47 
					                               Output f32_4* %100 = OpAccessChain %97 %31 
					                                                      OpStore %100 %98 
					                                Private f32* %105 = OpAccessChain %47 %103 
					                                         f32 %106 = OpLoad %105 
					                                                      OpStore vs_TEXCOORD6 %106 
					                                       f32_4 %111 = OpLoad %110 
					                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
					                              Uniform f32_4* %114 = OpAccessChain %23 %113 
					                                       f32_4 %115 = OpLoad %114 
					                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
					                                       f32_2 %117 = OpFMul %112 %116 
					                              Uniform f32_4* %118 = OpAccessChain %23 %113 
					                                       f32_4 %119 = OpLoad %118 
					                                       f32_2 %120 = OpVectorShuffle %119 %119 2 3 
					                                       f32_2 %121 = OpFAdd %117 %120 
					                                                      OpStore vs_TEXCOORD0 %121 
					                                       f32_4 %123 = OpLoad %122 
					                                       f32_3 %124 = OpVectorShuffle %123 %123 1 1 1 
					                              Uniform f32_4* %125 = OpAccessChain %23 %25 %26 
					                                       f32_4 %126 = OpLoad %125 
					                                       f32_3 %127 = OpVectorShuffle %126 %126 1 2 0 
					                                       f32_3 %128 = OpFMul %124 %127 
					                                       f32_4 %129 = OpLoad %47 
					                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
					                                                      OpStore %47 %130 
					                              Uniform f32_4* %131 = OpAccessChain %23 %25 %31 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 1 2 0 
					                                       f32_4 %134 = OpLoad %122 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 0 0 
					                                       f32_3 %136 = OpFMul %133 %135 
					                                       f32_4 %137 = OpLoad %47 
					                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
					                                       f32_3 %139 = OpFAdd %136 %138 
					                                       f32_4 %140 = OpLoad %47 
					                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
					                                                      OpStore %47 %141 
					                              Uniform f32_4* %142 = OpAccessChain %23 %25 %39 
					                                       f32_4 %143 = OpLoad %142 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 1 2 0 
					                                       f32_4 %145 = OpLoad %122 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 2 2 2 
					                                       f32_3 %147 = OpFMul %144 %146 
					                                       f32_4 %148 = OpLoad %47 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
					                                       f32_3 %150 = OpFAdd %147 %149 
					                                       f32_4 %151 = OpLoad %47 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %47 %152 
					                                       f32_4 %154 = OpLoad %47 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                       f32_4 %156 = OpLoad %47 
					                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
					                                         f32 %158 = OpDot %155 %157 
					                                                      OpStore %153 %158 
					                                         f32 %159 = OpLoad %153 
					                                         f32 %160 = OpExtInst %1 32 %159 
					                                                      OpStore %153 %160 
					                                         f32 %161 = OpLoad %153 
					                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
					                                       f32_4 %163 = OpLoad %47 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFMul %162 %164 
					                                       f32_4 %166 = OpLoad %47 
					                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
					                                                      OpStore %47 %167 
					                                Private f32* %169 = OpAccessChain %47 %103 
					                                         f32 %170 = OpLoad %169 
					                                 Output f32* %172 = OpAccessChain vs_TEXCOORD1 %171 
					                                                      OpStore %172 %170 
					                                  Input f32* %175 = OpAccessChain %122 %173 
					                                         f32 %176 = OpLoad %175 
					                                Uniform f32* %179 = OpAccessChain %23 %177 %173 
					                                         f32 %180 = OpLoad %179 
					                                         f32 %181 = OpFMul %176 %180 
					                                                      OpStore %153 %181 
					                                       f32_3 %184 = OpLoad %183 
					                              Uniform f32_4* %186 = OpAccessChain %23 %185 %31 
					                                       f32_4 %187 = OpLoad %186 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                         f32 %189 = OpDot %184 %188 
					                                Private f32* %190 = OpAccessChain %65 %171 
					                                                      OpStore %190 %189 
					                                       f32_3 %191 = OpLoad %183 
					                              Uniform f32_4* %192 = OpAccessChain %23 %185 %26 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                         f32 %195 = OpDot %191 %194 
					                                Private f32* %196 = OpAccessChain %65 %93 
					                                                      OpStore %196 %195 
					                                       f32_3 %197 = OpLoad %183 
					                              Uniform f32_4* %198 = OpAccessChain %23 %185 %39 
					                                       f32_4 %199 = OpLoad %198 
					                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
					                                         f32 %201 = OpDot %197 %200 
					                                Private f32* %202 = OpAccessChain %65 %103 
					                                                      OpStore %202 %201 
					                                       f32_4 %204 = OpLoad %65 
					                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
					                                       f32_4 %206 = OpLoad %65 
					                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
					                                         f32 %208 = OpDot %205 %207 
					                                                      OpStore %203 %208 
					                                         f32 %209 = OpLoad %203 
					                                         f32 %210 = OpExtInst %1 32 %209 
					                                                      OpStore %203 %210 
					                                         f32 %211 = OpLoad %203 
					                                       f32_4 %212 = OpCompositeConstruct %211 %211 %211 %211 
					                                       f32_4 %213 = OpLoad %65 
					                                       f32_4 %214 = OpVectorShuffle %213 %213 0 1 2 2 
					                                       f32_4 %215 = OpFMul %212 %214 
					                                                      OpStore %65 %215 
					                                       f32_4 %217 = OpLoad %47 
					                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
					                                       f32_4 %219 = OpLoad %65 
					                                       f32_3 %220 = OpVectorShuffle %219 %219 3 0 1 
					                                       f32_3 %221 = OpFMul %218 %220 
					                                       f32_4 %222 = OpLoad %216 
					                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 6 3 
					                                                      OpStore %216 %223 
					                                       f32_4 %224 = OpLoad %65 
					                                       f32_3 %225 = OpVectorShuffle %224 %224 1 3 0 
					                                       f32_4 %226 = OpLoad %47 
					                                       f32_3 %227 = OpVectorShuffle %226 %226 1 2 0 
					                                       f32_3 %228 = OpFMul %225 %227 
					                                       f32_4 %229 = OpLoad %216 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
					                                       f32_3 %231 = OpFNegate %230 
					                                       f32_3 %232 = OpFAdd %228 %231 
					                                       f32_4 %233 = OpLoad %216 
					                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
					                                                      OpStore %216 %234 
					                                         f32 %235 = OpLoad %153 
					                                       f32_3 %236 = OpCompositeConstruct %235 %235 %235 
					                                       f32_4 %237 = OpLoad %216 
					                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
					                                       f32_3 %239 = OpFMul %236 %238 
					                                       f32_4 %240 = OpLoad %216 
					                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
					                                                      OpStore %216 %241 
					                                Private f32* %242 = OpAccessChain %216 %171 
					                                         f32 %243 = OpLoad %242 
					                                 Output f32* %244 = OpAccessChain vs_TEXCOORD1 %93 
					                                                      OpStore %244 %243 
					                                Private f32* %245 = OpAccessChain %9 %171 
					                                         f32 %246 = OpLoad %245 
					                                 Output f32* %247 = OpAccessChain vs_TEXCOORD1 %173 
					                                                      OpStore %247 %246 
					                                Private f32* %248 = OpAccessChain %65 %171 
					                                         f32 %249 = OpLoad %248 
					                                 Output f32* %250 = OpAccessChain vs_TEXCOORD1 %103 
					                                                      OpStore %250 %249 
					                                Private f32* %252 = OpAccessChain %47 %171 
					                                         f32 %253 = OpLoad %252 
					                                 Output f32* %254 = OpAccessChain vs_TEXCOORD2 %171 
					                                                      OpStore %254 %253 
					                                Private f32* %256 = OpAccessChain %47 %93 
					                                         f32 %257 = OpLoad %256 
					                                 Output f32* %258 = OpAccessChain vs_TEXCOORD3 %171 
					                                                      OpStore %258 %257 
					                                Private f32* %259 = OpAccessChain %216 %93 
					                                         f32 %260 = OpLoad %259 
					                                 Output f32* %261 = OpAccessChain vs_TEXCOORD2 %93 
					                                                      OpStore %261 %260 
					                                Private f32* %262 = OpAccessChain %216 %103 
					                                         f32 %263 = OpLoad %262 
					                                 Output f32* %264 = OpAccessChain vs_TEXCOORD3 %93 
					                                                      OpStore %264 %263 
					                                Private f32* %265 = OpAccessChain %9 %93 
					                                         f32 %266 = OpLoad %265 
					                                 Output f32* %267 = OpAccessChain vs_TEXCOORD2 %173 
					                                                      OpStore %267 %266 
					                                Private f32* %268 = OpAccessChain %65 %93 
					                                         f32 %269 = OpLoad %268 
					                                 Output f32* %270 = OpAccessChain vs_TEXCOORD2 %103 
					                                                      OpStore %270 %269 
					                                Private f32* %271 = OpAccessChain %9 %103 
					                                         f32 %272 = OpLoad %271 
					                                 Output f32* %273 = OpAccessChain vs_TEXCOORD3 %173 
					                                                      OpStore %273 %272 
					                                Private f32* %274 = OpAccessChain %65 %173 
					                                         f32 %275 = OpLoad %274 
					                                 Output f32* %276 = OpAccessChain vs_TEXCOORD3 %103 
					                                                      OpStore %276 %275 
					                                       f32_4 %279 = OpLoad %278 
					                                                      OpStore %277 %279 
					                                                      OpStore vs_TEXCOORD4 %282 
					                                       f32_4 %283 = OpLoad %9 
					                                       f32_4 %284 = OpVectorShuffle %283 %283 0 0 0 0 
					                                       f32_4 %285 = OpFNegate %284 
					                              Uniform f32_4* %286 = OpAccessChain %23 %31 
					                                       f32_4 %287 = OpLoad %286 
					                                       f32_4 %288 = OpFAdd %285 %287 
					                                                      OpStore %47 %288 
					                                       f32_4 %289 = OpLoad %9 
					                                       f32_4 %290 = OpVectorShuffle %289 %289 1 1 1 1 
					                                       f32_4 %291 = OpFNegate %290 
					                              Uniform f32_4* %292 = OpAccessChain %23 %26 
					                                       f32_4 %293 = OpLoad %292 
					                                       f32_4 %294 = OpFAdd %291 %293 
					                                                      OpStore %216 %294 
					                                       f32_4 %295 = OpLoad %9 
					                                       f32_4 %296 = OpVectorShuffle %295 %295 2 2 2 2 
					                                       f32_4 %297 = OpFNegate %296 
					                              Uniform f32_4* %298 = OpAccessChain %23 %39 
					                                       f32_4 %299 = OpLoad %298 
					                                       f32_4 %300 = OpFAdd %297 %299 
					                                                      OpStore %9 %300 
					                                       f32_4 %302 = OpLoad %65 
					                                       f32_4 %303 = OpVectorShuffle %302 %302 1 1 1 1 
					                                       f32_4 %304 = OpLoad %216 
					                                       f32_4 %305 = OpFMul %303 %304 
					                                                      OpStore %301 %305 
					                                       f32_4 %306 = OpLoad %216 
					                                       f32_4 %307 = OpLoad %216 
					                                       f32_4 %308 = OpFMul %306 %307 
					                                                      OpStore %216 %308 
					                                       f32_4 %309 = OpLoad %47 
					                                       f32_4 %310 = OpLoad %47 
					                                       f32_4 %311 = OpFMul %309 %310 
					                                       f32_4 %312 = OpLoad %216 
					                                       f32_4 %313 = OpFAdd %311 %312 
					                                                      OpStore %216 %313 
					                                       f32_4 %314 = OpLoad %47 
					                                       f32_4 %315 = OpLoad %65 
					                                       f32_4 %316 = OpVectorShuffle %315 %315 0 0 0 0 
					                                       f32_4 %317 = OpFMul %314 %316 
					                                       f32_4 %318 = OpLoad %301 
					                                       f32_4 %319 = OpFAdd %317 %318 
					                                                      OpStore %47 %319 
					                                       f32_4 %320 = OpLoad %9 
					                                       f32_4 %321 = OpLoad %65 
					                                       f32_4 %322 = OpVectorShuffle %321 %321 3 3 2 3 
					                                       f32_4 %323 = OpFMul %320 %322 
					                                       f32_4 %324 = OpLoad %47 
					                                       f32_4 %325 = OpFAdd %323 %324 
					                                                      OpStore %47 %325 
					                                       f32_4 %326 = OpLoad %9 
					                                       f32_4 %327 = OpLoad %9 
					                                       f32_4 %328 = OpFMul %326 %327 
					                                       f32_4 %329 = OpLoad %216 
					                                       f32_4 %330 = OpFAdd %328 %329 
					                                                      OpStore %9 %330 
					                                       f32_4 %331 = OpLoad %9 
					                                       f32_4 %334 = OpExtInst %1 40 %331 %333 
					                                                      OpStore %9 %334 
					                                       f32_4 %335 = OpLoad %9 
					                                       f32_4 %336 = OpExtInst %1 32 %335 
					                                                      OpStore %216 %336 
					                                       f32_4 %337 = OpLoad %9 
					                              Uniform f32_4* %338 = OpAccessChain %23 %49 
					                                       f32_4 %339 = OpLoad %338 
					                                       f32_4 %340 = OpFMul %337 %339 
					                                       f32_4 %343 = OpFAdd %340 %342 
					                                                      OpStore %9 %343 
					                                       f32_4 %344 = OpLoad %9 
					                                       f32_4 %345 = OpFDiv %342 %344 
					                                                      OpStore %9 %345 
					                                       f32_4 %346 = OpLoad %47 
					                                       f32_4 %347 = OpLoad %216 
					                                       f32_4 %348 = OpFMul %346 %347 
					                                                      OpStore %47 %348 
					                                       f32_4 %349 = OpLoad %47 
					                                       f32_4 %350 = OpExtInst %1 40 %349 %282 
					                                                      OpStore %47 %350 
					                                       f32_4 %351 = OpLoad %9 
					                                       f32_4 %352 = OpLoad %47 
					                                       f32_4 %353 = OpFMul %351 %352 
					                                                      OpStore %9 %353 
					                                       f32_4 %354 = OpLoad %9 
					                                       f32_3 %355 = OpVectorShuffle %354 %354 1 1 1 
					                              Uniform f32_4* %357 = OpAccessChain %23 %356 %26 
					                                       f32_4 %358 = OpLoad %357 
					                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
					                                       f32_3 %360 = OpFMul %355 %359 
					                                       f32_4 %361 = OpLoad %47 
					                                       f32_4 %362 = OpVectorShuffle %361 %360 4 5 6 3 
					                                                      OpStore %47 %362 
					                              Uniform f32_4* %363 = OpAccessChain %23 %356 %31 
					                                       f32_4 %364 = OpLoad %363 
					                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
					                                       f32_4 %366 = OpLoad %9 
					                                       f32_3 %367 = OpVectorShuffle %366 %366 0 0 0 
					                                       f32_3 %368 = OpFMul %365 %367 
					                                       f32_4 %369 = OpLoad %47 
					                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
					                                       f32_3 %371 = OpFAdd %368 %370 
					                                       f32_4 %372 = OpLoad %47 
					                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
					                                                      OpStore %47 %373 
					                              Uniform f32_4* %374 = OpAccessChain %23 %356 %39 
					                                       f32_4 %375 = OpLoad %374 
					                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
					                                       f32_4 %377 = OpLoad %9 
					                                       f32_3 %378 = OpVectorShuffle %377 %377 2 2 2 
					                                       f32_3 %379 = OpFMul %376 %378 
					                                       f32_4 %380 = OpLoad %47 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
					                                       f32_3 %382 = OpFAdd %379 %381 
					                                       f32_4 %383 = OpLoad %9 
					                                       f32_4 %384 = OpVectorShuffle %383 %382 4 5 6 3 
					                                                      OpStore %9 %384 
					                              Uniform f32_4* %385 = OpAccessChain %23 %356 %49 
					                                       f32_4 %386 = OpLoad %385 
					                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
					                                       f32_4 %388 = OpLoad %9 
					                                       f32_3 %389 = OpVectorShuffle %388 %388 3 3 3 
					                                       f32_3 %390 = OpFMul %387 %389 
					                                       f32_4 %391 = OpLoad %9 
					                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
					                                       f32_3 %393 = OpFAdd %390 %392 
					                                       f32_4 %394 = OpLoad %9 
					                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
					                                                      OpStore %9 %395 
					                                Private f32* %396 = OpAccessChain %65 %93 
					                                         f32 %397 = OpLoad %396 
					                                Private f32* %398 = OpAccessChain %65 %93 
					                                         f32 %399 = OpLoad %398 
					                                         f32 %400 = OpFMul %397 %399 
					                                                      OpStore %153 %400 
					                                Private f32* %401 = OpAccessChain %65 %171 
					                                         f32 %402 = OpLoad %401 
					                                Private f32* %403 = OpAccessChain %65 %171 
					                                         f32 %404 = OpLoad %403 
					                                         f32 %405 = OpFMul %402 %404 
					                                         f32 %406 = OpLoad %153 
					                                         f32 %407 = OpFNegate %406 
					                                         f32 %408 = OpFAdd %405 %407 
					                                                      OpStore %153 %408 
					                                       f32_4 %409 = OpLoad %65 
					                                       f32_4 %410 = OpVectorShuffle %409 %409 1 3 2 0 
					                                       f32_4 %411 = OpLoad %65 
					                                       f32_4 %412 = OpFMul %410 %411 
					                                                      OpStore %47 %412 
					                              Uniform f32_4* %414 = OpAccessChain %23 %413 
					                                       f32_4 %415 = OpLoad %414 
					                                       f32_4 %416 = OpLoad %47 
					                                         f32 %417 = OpDot %415 %416 
					                                Private f32* %418 = OpAccessChain %65 %171 
					                                                      OpStore %418 %417 
					                              Uniform f32_4* %420 = OpAccessChain %23 %419 
					                                       f32_4 %421 = OpLoad %420 
					                                       f32_4 %422 = OpLoad %47 
					                                         f32 %423 = OpDot %421 %422 
					                                Private f32* %424 = OpAccessChain %65 %93 
					                                                      OpStore %424 %423 
					                              Uniform f32_4* %426 = OpAccessChain %23 %425 
					                                       f32_4 %427 = OpLoad %426 
					                                       f32_4 %428 = OpLoad %47 
					                                         f32 %429 = OpDot %427 %428 
					                                Private f32* %430 = OpAccessChain %65 %103 
					                                                      OpStore %430 %429 
					                              Uniform f32_4* %432 = OpAccessChain %23 %431 
					                                       f32_4 %433 = OpLoad %432 
					                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
					                                         f32 %435 = OpLoad %153 
					                                       f32_3 %436 = OpCompositeConstruct %435 %435 %435 
					                                       f32_3 %437 = OpFMul %434 %436 
					                                       f32_4 %438 = OpLoad %65 
					                                       f32_3 %439 = OpVectorShuffle %438 %438 0 1 2 
					                                       f32_3 %440 = OpFAdd %437 %439 
					                                       f32_4 %441 = OpLoad %47 
					                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 6 3 
					                                                      OpStore %47 %442 
					                                       f32_4 %445 = OpLoad %9 
					                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
					                                       f32_4 %447 = OpLoad %47 
					                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
					                                       f32_3 %449 = OpFAdd %446 %448 
					                                                      OpStore vs_TEXCOORD5 %449 
					                                                      OpStore vs_TEXCOORD8 %282 
					                                 Output f32* %451 = OpAccessChain %97 %31 %93 
					                                         f32 %452 = OpLoad %451 
					                                         f32 %453 = OpFNegate %452 
					                                 Output f32* %454 = OpAccessChain %97 %31 %93 
					                                                      OpStore %454 %453 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 806
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %68 %79 %128 %210 %763 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate vs_TEXCOORD1 Location 12 
					                                                      OpDecorate vs_TEXCOORD2 Location 21 
					                                                      OpDecorate vs_TEXCOORD3 Location 26 
					                                                      OpMemberDecorate %34 0 Offset 34 
					                                                      OpMemberDecorate %34 1 Offset 34 
					                                                      OpMemberDecorate %34 2 Offset 34 
					                                                      OpMemberDecorate %34 3 Offset 34 
					                                                      OpMemberDecorate %34 4 Offset 34 
					                                                      OpMemberDecorate %34 5 Offset 34 
					                                                      OpMemberDecorate %34 6 Offset 34 
					                                                      OpMemberDecorate %34 7 Offset 34 
					                                                      OpMemberDecorate %34 8 Offset 34 
					                                                      OpMemberDecorate %34 9 Offset 34 
					                                                      OpMemberDecorate %34 10 Offset 34 
					                                                      OpMemberDecorate %34 11 Offset 34 
					                                                      OpMemberDecorate %34 12 Offset 34 
					                                                      OpMemberDecorate %34 13 Offset 34 
					                                                      OpMemberDecorate %34 14 Offset 34 
					                                                      OpMemberDecorate %34 15 Offset 34 
					                                                      OpMemberDecorate %34 16 Offset 34 
					                                                      OpMemberDecorate %34 17 Offset 34 
					                                                      OpDecorate %34 Block 
					                                                      OpDecorate %36 DescriptorSet 36 
					                                                      OpDecorate %36 Binding 36 
					                                                      OpDecorate %58 DescriptorSet 58 
					                                                      OpDecorate %58 Binding 58 
					                                                      OpDecorate %62 DescriptorSet 62 
					                                                      OpDecorate %62 Binding 62 
					                                                      OpDecorate vs_TEXCOORD0 Location 68 
					                                                      OpDecorate %79 Location 79 
					                                                      OpDecorate %86 DescriptorSet 86 
					                                                      OpDecorate %86 Binding 86 
					                                                      OpDecorate %88 DescriptorSet 88 
					                                                      OpDecorate %88 Binding 88 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate vs_TEXCOORD5 Location 210 
					                                                      OpDecorate %348 DescriptorSet 348 
					                                                      OpDecorate %348 Binding 348 
					                                                      OpDecorate %350 DescriptorSet 350 
					                                                      OpDecorate %350 Binding 350 
					                                                      OpDecorate %501 DescriptorSet 501 
					                                                      OpDecorate %501 Binding 501 
					                                                      OpDecorate vs_TEXCOORD6 Location 763 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                        Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                              %13 = OpTypeInt 32 0 
					                                          u32 %14 = OpConstant 3 
					                                              %15 = OpTypePointer Input %6 
					                                          u32 %18 = OpConstant 0 
					                                              %19 = OpTypePointer Private %6 
					                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %24 = OpConstant 1 
					                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                          u32 %29 = OpConstant 2 
					                               Private f32_3* %31 = OpVariable Private 
					                                              %34 = OpTypeStruct %7 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
					                                              %35 = OpTypePointer Uniform %34 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %36 = OpVariable Uniform 
					                                              %37 = OpTypeInt 32 1 
					                                          i32 %38 = OpConstant 0 
					                                              %39 = OpTypePointer Uniform %7 
					                                 Private f32* %43 = OpVariable Private 
					                               Private f32_3* %49 = OpVariable Private 
					                                              %54 = OpTypePointer Private %10 
					                               Private f32_4* %55 = OpVariable Private 
					                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %57 = OpTypePointer UniformConstant %56 
					         UniformConstant read_only Texture2D* %58 = OpVariable UniformConstant 
					                                              %60 = OpTypeSampler 
					                                              %61 = OpTypePointer UniformConstant %60 
					                     UniformConstant sampler* %62 = OpVariable UniformConstant 
					                                              %64 = OpTypeSampledImage %56 
					                                              %66 = OpTypeVector %6 2 
					                                              %67 = OpTypePointer Input %66 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                          i32 %72 = OpConstant 17 
					                                              %73 = OpTypePointer Uniform %10 
					                                 Input f32_4* %79 = OpVariable Input 
					                               Private f32_4* %85 = OpVariable Private 
					         UniformConstant read_only Texture2D* %86 = OpVariable UniformConstant 
					                     UniformConstant sampler* %88 = OpVariable UniformConstant 
					                                         f32 %104 = OpConstant 3,674022E-40 
					                                       f32_2 %105 = OpConstantComposite %104 %104 
					                                         f32 %107 = OpConstant 3,674022E-40 
					                                       f32_2 %108 = OpConstantComposite %107 %107 
					                                Private f32* %112 = OpVariable Private 
					                                         f32 %119 = OpConstant 3,674022E-40 
					                                             %127 = OpTypePointer Output %10 
					                               Output f32_4* %128 = OpVariable Output 
					                                             %134 = OpTypePointer Output %6 
					                              Private f32_4* %136 = OpVariable Private 
					                              Private f32_3* %189 = OpVariable Private 
					                                         i32 %190 = OpConstant 3 
					                                         i32 %196 = OpConstant 4 
					                                         i32 %202 = OpConstant 5 
					                                             %209 = OpTypePointer Input %7 
					                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
					                                         f32 %214 = OpConstant 3,674022E-40 
					                                       f32_3 %215 = OpConstantComposite %214 %214 %214 
					                                             %217 = OpTypeBool 
					                                             %218 = OpTypePointer Private %217 
					                               Private bool* %219 = OpVariable Private 
					                                         i32 %220 = OpConstant 10 
					                                             %221 = OpTypePointer Uniform %6 
					                              Private f32_4* %235 = OpVariable Private 
					                              Private f32_3* %243 = OpVariable Private 
					                                         i32 %246 = OpConstant 8 
					                              Private f32_3* %255 = OpVariable Private 
					                                         i32 %258 = OpConstant 9 
					                                             %267 = OpTypeVector %217 3 
					                                             %268 = OpTypePointer Private %267 
					                             Private bool_3* %269 = OpVariable Private 
					                                       f32_4 %270 = OpConstantComposite %214 %214 %214 %214 
					                                             %273 = OpTypeVector %217 4 
					                                             %276 = OpTypePointer Function %7 
					                                             %281 = OpTypePointer Function %6 
					                                             %346 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %347 = OpTypePointer UniformConstant %346 
					      UniformConstant read_only TextureCube* %348 = OpVariable UniformConstant 
					                    UniformConstant sampler* %350 = OpVariable UniformConstant 
					                                             %352 = OpTypeSampledImage %346 
					                                         f32 %356 = OpConstant 3,674022E-40 
					                                         i32 %361 = OpConstant 11 
					                               Private bool* %384 = OpVariable Private 
					                                         f32 %387 = OpConstant 3,674022E-40 
					                                         i32 %392 = OpConstant 14 
					                                Private f32* %399 = OpVariable Private 
					                              Private f32_3* %412 = OpVariable Private 
					                                         i32 %415 = OpConstant 12 
					                              Private f32_3* %423 = OpVariable Private 
					                                         i32 %426 = OpConstant 13 
					                             Private bool_3* %434 = OpVariable Private 
					      UniformConstant read_only TextureCube* %501 = OpVariable UniformConstant 
					                                         i32 %512 = OpConstant 15 
					                                         f32 %565 = OpConstant 3,674022E-40 
					                                       f32_3 %566 = OpConstantComposite %565 %565 %565 
					                                         i32 %572 = OpConstant 2 
					                                         f32 %581 = OpConstant 3,674022E-40 
					                              Private f32_3* %611 = OpVariable Private 
					                                         f32 %620 = OpConstant 3,674022E-40 
					                                Private f32* %623 = OpVariable Private 
					                              Private f32_3* %651 = OpVariable Private 
					                                         f32 %692 = OpConstant 3,674022E-40 
					                                         f32 %694 = OpConstant 3,674022E-40 
					                                         f32 %701 = OpConstant 3,674022E-40 
					                                         i32 %703 = OpConstant 16 
					                                         f32 %738 = OpConstant 3,674022E-40 
					                                       f32_3 %750 = OpConstantComposite %694 %694 %694 
					                                         f32 %754 = OpConstant 3,674022E-40 
					                          Input f32* vs_TEXCOORD6 = OpVariable Input 
					                                         i32 %765 = OpConstant 1 
					                                         i32 %779 = OpConstant 7 
					                                         i32 %789 = OpConstant 6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %277 = OpVariable Function 
					                               Function f32* %282 = OpVariable Function 
					                               Function f32* %294 = OpVariable Function 
					                               Function f32* %306 = OpVariable Function 
					                             Function f32_3* %439 = OpVariable Function 
					                               Function f32* %443 = OpVariable Function 
					                               Function f32* %455 = OpVariable Function 
					                               Function f32* %467 = OpVariable Function 
					                                   Input f32* %16 = OpAccessChain vs_TEXCOORD1 %14 
					                                          f32 %17 = OpLoad %16 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %17 
					                                   Input f32* %22 = OpAccessChain vs_TEXCOORD2 %14 
					                                          f32 %23 = OpLoad %22 
					                                 Private f32* %25 = OpAccessChain %9 %24 
					                                                      OpStore %25 %23 
					                                   Input f32* %27 = OpAccessChain vs_TEXCOORD3 %14 
					                                          f32 %28 = OpLoad %27 
					                                 Private f32* %30 = OpAccessChain %9 %29 
					                                                      OpStore %30 %28 
					                                        f32_3 %32 = OpLoad %9 
					                                        f32_3 %33 = OpFNegate %32 
					                               Uniform f32_3* %40 = OpAccessChain %36 %38 
					                                        f32_3 %41 = OpLoad %40 
					                                        f32_3 %42 = OpFAdd %33 %41 
					                                                      OpStore %31 %42 
					                                        f32_3 %44 = OpLoad %31 
					                                        f32_3 %45 = OpLoad %31 
					                                          f32 %46 = OpDot %44 %45 
					                                                      OpStore %43 %46 
					                                          f32 %47 = OpLoad %43 
					                                          f32 %48 = OpExtInst %1 32 %47 
					                                                      OpStore %43 %48 
					                                          f32 %50 = OpLoad %43 
					                                        f32_3 %51 = OpCompositeConstruct %50 %50 %50 
					                                        f32_3 %52 = OpLoad %31 
					                                        f32_3 %53 = OpFMul %51 %52 
					                                                      OpStore %49 %53 
					                          read_only Texture2D %59 = OpLoad %58 
					                                      sampler %63 = OpLoad %62 
					                   read_only Texture2DSampled %65 = OpSampledImage %59 %63 
					                                        f32_2 %69 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %70 = OpImageSampleImplicitLod %65 %69 
					                                                      OpStore %55 %70 
					                                        f32_4 %71 = OpLoad %55 
					                               Uniform f32_4* %74 = OpAccessChain %36 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpFMul %71 %75 
					                                                      OpStore %55 %76 
					                                        f32_4 %77 = OpLoad %55 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %78 %81 
					                                        f32_4 %83 = OpLoad %55 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %55 %84 
					                          read_only Texture2D %87 = OpLoad %86 
					                                      sampler %89 = OpLoad %88 
					                   read_only Texture2DSampled %90 = OpSampledImage %87 %89 
					                                        f32_2 %91 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %92 = OpImageSampleImplicitLod %90 %91 
					                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 3 
					                                        f32_4 %94 = OpLoad %85 
					                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
					                                                      OpStore %85 %95 
					                                 Private f32* %96 = OpAccessChain %85 %29 
					                                          f32 %97 = OpLoad %96 
					                                 Private f32* %98 = OpAccessChain %85 %18 
					                                          f32 %99 = OpLoad %98 
					                                         f32 %100 = OpFMul %97 %99 
					                                Private f32* %101 = OpAccessChain %85 %18 
					                                                      OpStore %101 %100 
					                                       f32_4 %102 = OpLoad %85 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %106 = OpFMul %103 %105 
					                                       f32_2 %109 = OpFAdd %106 %108 
					                                       f32_4 %110 = OpLoad %85 
					                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
					                                                      OpStore %85 %111 
					                                       f32_4 %113 = OpLoad %85 
					                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
					                                       f32_4 %115 = OpLoad %85 
					                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
					                                         f32 %117 = OpDot %114 %116 
					                                                      OpStore %112 %117 
					                                         f32 %118 = OpLoad %112 
					                                         f32 %120 = OpExtInst %1 37 %118 %119 
					                                                      OpStore %112 %120 
					                                         f32 %121 = OpLoad %112 
					                                         f32 %122 = OpFNegate %121 
					                                         f32 %123 = OpFAdd %122 %119 
					                                                      OpStore %112 %123 
					                                         f32 %124 = OpLoad %112 
					                                         f32 %125 = OpExtInst %1 31 %124 
					                                Private f32* %126 = OpAccessChain %85 %29 
					                                                      OpStore %126 %125 
					                                Private f32* %129 = OpAccessChain %55 %14 
					                                         f32 %130 = OpLoad %129 
					                                  Input f32* %131 = OpAccessChain %79 %14 
					                                         f32 %132 = OpLoad %131 
					                                         f32 %133 = OpFMul %130 %132 
					                                 Output f32* %135 = OpAccessChain %128 %14 
					                                                      OpStore %135 %133 
					                                       f32_4 %137 = OpLoad vs_TEXCOORD1 
					                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
					                                       f32_4 %139 = OpLoad %85 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                         f32 %141 = OpDot %138 %140 
					                                Private f32* %142 = OpAccessChain %136 %18 
					                                                      OpStore %142 %141 
					                                       f32_4 %143 = OpLoad vs_TEXCOORD2 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
					                                       f32_4 %145 = OpLoad %85 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                         f32 %147 = OpDot %144 %146 
					                                Private f32* %148 = OpAccessChain %136 %24 
					                                                      OpStore %148 %147 
					                                       f32_4 %149 = OpLoad vs_TEXCOORD3 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_4 %151 = OpLoad %85 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
					                                         f32 %153 = OpDot %150 %152 
					                                Private f32* %154 = OpAccessChain %136 %29 
					                                                      OpStore %154 %153 
					                                       f32_4 %155 = OpLoad %136 
					                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
					                                       f32_4 %157 = OpLoad %136 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                         f32 %159 = OpDot %156 %158 
					                                                      OpStore %112 %159 
					                                         f32 %160 = OpLoad %112 
					                                         f32 %161 = OpExtInst %1 32 %160 
					                                                      OpStore %112 %161 
					                                         f32 %162 = OpLoad %112 
					                                       f32_3 %163 = OpCompositeConstruct %162 %162 %162 
					                                       f32_4 %164 = OpLoad %136 
					                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
					                                       f32_3 %166 = OpFMul %163 %165 
					                                       f32_4 %167 = OpLoad %85 
					                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
					                                                      OpStore %85 %168 
					                                       f32_3 %169 = OpLoad %49 
					                                       f32_3 %170 = OpFNegate %169 
					                                       f32_4 %171 = OpLoad %85 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %170 %172 
					                                                      OpStore %112 %173 
					                                         f32 %174 = OpLoad %112 
					                                         f32 %175 = OpLoad %112 
					                                         f32 %176 = OpFAdd %174 %175 
					                                                      OpStore %112 %176 
					                                       f32_4 %177 = OpLoad %85 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpLoad %112 
					                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
					                                       f32_3 %181 = OpFNegate %180 
					                                       f32_3 %182 = OpFMul %178 %181 
					                                       f32_3 %183 = OpLoad %49 
					                                       f32_3 %184 = OpFNegate %183 
					                                       f32_3 %185 = OpFAdd %182 %184 
					                                       f32_4 %186 = OpLoad %136 
					                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
					                                                      OpStore %136 %187 
					                                Private f32* %188 = OpAccessChain %85 %14 
					                                                      OpStore %188 %119 
					                              Uniform f32_4* %191 = OpAccessChain %36 %190 
					                                       f32_4 %192 = OpLoad %191 
					                                       f32_4 %193 = OpLoad %85 
					                                         f32 %194 = OpDot %192 %193 
					                                Private f32* %195 = OpAccessChain %189 %18 
					                                                      OpStore %195 %194 
					                              Uniform f32_4* %197 = OpAccessChain %36 %196 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_4 %199 = OpLoad %85 
					                                         f32 %200 = OpDot %198 %199 
					                                Private f32* %201 = OpAccessChain %189 %24 
					                                                      OpStore %201 %200 
					                              Uniform f32_4* %203 = OpAccessChain %36 %202 
					                                       f32_4 %204 = OpLoad %203 
					                                       f32_4 %205 = OpLoad %85 
					                                         f32 %206 = OpDot %204 %205 
					                                Private f32* %207 = OpAccessChain %189 %29 
					                                                      OpStore %207 %206 
					                                       f32_3 %208 = OpLoad %189 
					                                       f32_3 %211 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %212 = OpFAdd %208 %211 
					                                                      OpStore %189 %212 
					                                       f32_3 %213 = OpLoad %189 
					                                       f32_3 %216 = OpExtInst %1 40 %213 %215 
					                                                      OpStore %189 %216 
					                                Uniform f32* %222 = OpAccessChain %36 %220 %14 
					                                         f32 %223 = OpLoad %222 
					                                        bool %224 = OpFOrdLessThan %214 %223 
					                                                      OpStore %219 %224 
					                                        bool %225 = OpLoad %219 
					                                                      OpSelectionMerge %227 None 
					                                                      OpBranchConditional %225 %226 %341 
					                                             %226 = OpLabel 
					                                       f32_4 %228 = OpLoad %136 
					                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
					                                       f32_4 %230 = OpLoad %136 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                         f32 %232 = OpDot %229 %231 
					                                                      OpStore %112 %232 
					                                         f32 %233 = OpLoad %112 
					                                         f32 %234 = OpExtInst %1 32 %233 
					                                                      OpStore %112 %234 
					                                         f32 %236 = OpLoad %112 
					                                       f32_3 %237 = OpCompositeConstruct %236 %236 %236 
					                                       f32_4 %238 = OpLoad %136 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                       f32_3 %240 = OpFMul %237 %239 
					                                       f32_4 %241 = OpLoad %235 
					                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
					                                                      OpStore %235 %242 
					                                       f32_3 %244 = OpLoad %9 
					                                       f32_3 %245 = OpFNegate %244 
					                              Uniform f32_4* %247 = OpAccessChain %36 %246 
					                                       f32_4 %248 = OpLoad %247 
					                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
					                                       f32_3 %250 = OpFAdd %245 %249 
					                                                      OpStore %243 %250 
					                                       f32_3 %251 = OpLoad %243 
					                                       f32_4 %252 = OpLoad %235 
					                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
					                                       f32_3 %254 = OpFDiv %251 %253 
					                                                      OpStore %243 %254 
					                                       f32_3 %256 = OpLoad %9 
					                                       f32_3 %257 = OpFNegate %256 
					                              Uniform f32_4* %259 = OpAccessChain %36 %258 
					                                       f32_4 %260 = OpLoad %259 
					                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
					                                       f32_3 %262 = OpFAdd %257 %261 
					                                                      OpStore %255 %262 
					                                       f32_3 %263 = OpLoad %255 
					                                       f32_4 %264 = OpLoad %235 
					                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
					                                       f32_3 %266 = OpFDiv %263 %265 
					                                                      OpStore %255 %266 
					                                       f32_4 %271 = OpLoad %235 
					                                       f32_4 %272 = OpVectorShuffle %271 %271 0 1 2 0 
					                                      bool_4 %274 = OpFOrdLessThan %270 %272 
					                                      bool_3 %275 = OpVectorShuffle %274 %274 0 1 2 
					                                                      OpStore %269 %275 
					                                       f32_3 %278 = OpLoad %243 
					                                                      OpStore %277 %278 
					                               Private bool* %279 = OpAccessChain %269 %18 
					                                        bool %280 = OpLoad %279 
					                                                      OpSelectionMerge %284 None 
					                                                      OpBranchConditional %280 %283 %287 
					                                             %283 = OpLabel 
					                                Private f32* %285 = OpAccessChain %243 %18 
					                                         f32 %286 = OpLoad %285 
					                                                      OpStore %282 %286 
					                                                      OpBranch %284 
					                                             %287 = OpLabel 
					                                Private f32* %288 = OpAccessChain %255 %18 
					                                         f32 %289 = OpLoad %288 
					                                                      OpStore %282 %289 
					                                                      OpBranch %284 
					                                             %284 = OpLabel 
					                                         f32 %290 = OpLoad %282 
					                               Function f32* %291 = OpAccessChain %277 %18 
					                                                      OpStore %291 %290 
					                               Private bool* %292 = OpAccessChain %269 %24 
					                                        bool %293 = OpLoad %292 
					                                                      OpSelectionMerge %296 None 
					                                                      OpBranchConditional %293 %295 %299 
					                                             %295 = OpLabel 
					                                Private f32* %297 = OpAccessChain %243 %24 
					                                         f32 %298 = OpLoad %297 
					                                                      OpStore %294 %298 
					                                                      OpBranch %296 
					                                             %299 = OpLabel 
					                                Private f32* %300 = OpAccessChain %255 %24 
					                                         f32 %301 = OpLoad %300 
					                                                      OpStore %294 %301 
					                                                      OpBranch %296 
					                                             %296 = OpLabel 
					                                         f32 %302 = OpLoad %294 
					                               Function f32* %303 = OpAccessChain %277 %24 
					                                                      OpStore %303 %302 
					                               Private bool* %304 = OpAccessChain %269 %29 
					                                        bool %305 = OpLoad %304 
					                                                      OpSelectionMerge %308 None 
					                                                      OpBranchConditional %305 %307 %311 
					                                             %307 = OpLabel 
					                                Private f32* %309 = OpAccessChain %243 %29 
					                                         f32 %310 = OpLoad %309 
					                                                      OpStore %306 %310 
					                                                      OpBranch %308 
					                                             %311 = OpLabel 
					                                Private f32* %312 = OpAccessChain %255 %29 
					                                         f32 %313 = OpLoad %312 
					                                                      OpStore %306 %313 
					                                                      OpBranch %308 
					                                             %308 = OpLabel 
					                                         f32 %314 = OpLoad %306 
					                               Function f32* %315 = OpAccessChain %277 %29 
					                                                      OpStore %315 %314 
					                                       f32_3 %316 = OpLoad %277 
					                                                      OpStore %243 %316 
					                                Private f32* %317 = OpAccessChain %243 %24 
					                                         f32 %318 = OpLoad %317 
					                                Private f32* %319 = OpAccessChain %243 %18 
					                                         f32 %320 = OpLoad %319 
					                                         f32 %321 = OpExtInst %1 37 %318 %320 
					                                                      OpStore %112 %321 
					                                Private f32* %322 = OpAccessChain %243 %29 
					                                         f32 %323 = OpLoad %322 
					                                         f32 %324 = OpLoad %112 
					                                         f32 %325 = OpExtInst %1 37 %323 %324 
					                                                      OpStore %112 %325 
					                                       f32_3 %326 = OpLoad %9 
					                              Uniform f32_4* %327 = OpAccessChain %36 %220 
					                                       f32_4 %328 = OpLoad %327 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_3 %330 = OpFNegate %329 
					                                       f32_3 %331 = OpFAdd %326 %330 
					                                                      OpStore %243 %331 
					                                       f32_4 %332 = OpLoad %235 
					                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
					                                         f32 %334 = OpLoad %112 
					                                       f32_3 %335 = OpCompositeConstruct %334 %334 %334 
					                                       f32_3 %336 = OpFMul %333 %335 
					                                       f32_3 %337 = OpLoad %243 
					                                       f32_3 %338 = OpFAdd %336 %337 
					                                       f32_4 %339 = OpLoad %235 
					                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
					                                                      OpStore %235 %340 
					                                                      OpBranch %227 
					                                             %341 = OpLabel 
					                                       f32_4 %342 = OpLoad %136 
					                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
					                                       f32_4 %344 = OpLoad %235 
					                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 6 3 
					                                                      OpStore %235 %345 
					                                                      OpBranch %227 
					                                             %227 = OpLabel 
					                       read_only TextureCube %349 = OpLoad %348 
					                                     sampler %351 = OpLoad %350 
					                read_only TextureCubeSampled %353 = OpSampledImage %349 %351 
					                                       f32_4 %354 = OpLoad %235 
					                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
					                                       f32_4 %357 = OpImageSampleExplicitLod %353 %355 Lod %10 
					                                                      OpStore %235 %357 
					                                Private f32* %358 = OpAccessChain %235 %14 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFAdd %359 %107 
					                                                      OpStore %112 %360 
					                                Uniform f32* %362 = OpAccessChain %36 %361 %14 
					                                         f32 %363 = OpLoad %362 
					                                         f32 %364 = OpLoad %112 
					                                         f32 %365 = OpFMul %363 %364 
					                                         f32 %366 = OpFAdd %365 %119 
					                                                      OpStore %112 %366 
					                                         f32 %367 = OpLoad %112 
					                                         f32 %368 = OpExtInst %1 30 %367 
					                                                      OpStore %112 %368 
					                                         f32 %369 = OpLoad %112 
					                                Uniform f32* %370 = OpAccessChain %36 %361 %24 
					                                         f32 %371 = OpLoad %370 
					                                         f32 %372 = OpFMul %369 %371 
					                                                      OpStore %112 %372 
					                                         f32 %373 = OpLoad %112 
					                                         f32 %374 = OpExtInst %1 29 %373 
					                                                      OpStore %112 %374 
					                                         f32 %375 = OpLoad %112 
					                                Uniform f32* %376 = OpAccessChain %36 %361 %18 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                                      OpStore %112 %378 
					                                       f32_4 %379 = OpLoad %235 
					                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
					                                         f32 %381 = OpLoad %112 
					                                       f32_3 %382 = OpCompositeConstruct %381 %381 %381 
					                                       f32_3 %383 = OpFMul %380 %382 
					                                                      OpStore %243 %383 
					                                Uniform f32* %385 = OpAccessChain %36 %258 %14 
					                                         f32 %386 = OpLoad %385 
					                                        bool %388 = OpFOrdLessThan %386 %387 
					                                                      OpStore %384 %388 
					                                        bool %389 = OpLoad %384 
					                                                      OpSelectionMerge %391 None 
					                                                      OpBranchConditional %389 %390 %391 
					                                             %390 = OpLabel 
					                                Uniform f32* %393 = OpAccessChain %36 %392 %14 
					                                         f32 %394 = OpLoad %393 
					                                        bool %395 = OpFOrdLessThan %214 %394 
					                                                      OpStore %384 %395 
					                                        bool %396 = OpLoad %384 
					                                                      OpSelectionMerge %398 None 
					                                                      OpBranchConditional %396 %397 %398 
					                                             %397 = OpLabel 
					                                       f32_4 %400 = OpLoad %136 
					                                       f32_3 %401 = OpVectorShuffle %400 %400 0 1 2 
					                                       f32_4 %402 = OpLoad %136 
					                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
					                                         f32 %404 = OpDot %401 %403 
					                                                      OpStore %399 %404 
					                                         f32 %405 = OpLoad %399 
					                                         f32 %406 = OpExtInst %1 32 %405 
					                                                      OpStore %399 %406 
					                                         f32 %407 = OpLoad %399 
					                                       f32_3 %408 = OpCompositeConstruct %407 %407 %407 
					                                       f32_4 %409 = OpLoad %136 
					                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
					                                       f32_3 %411 = OpFMul %408 %410 
					                                                      OpStore %255 %411 
					                                       f32_3 %413 = OpLoad %9 
					                                       f32_3 %414 = OpFNegate %413 
					                              Uniform f32_4* %416 = OpAccessChain %36 %415 
					                                       f32_4 %417 = OpLoad %416 
					                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
					                                       f32_3 %419 = OpFAdd %414 %418 
					                                                      OpStore %412 %419 
					                                       f32_3 %420 = OpLoad %412 
					                                       f32_3 %421 = OpLoad %255 
					                                       f32_3 %422 = OpFDiv %420 %421 
					                                                      OpStore %412 %422 
					                                       f32_3 %424 = OpLoad %9 
					                                       f32_3 %425 = OpFNegate %424 
					                              Uniform f32_4* %427 = OpAccessChain %36 %426 
					                                       f32_4 %428 = OpLoad %427 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFAdd %425 %429 
					                                                      OpStore %423 %430 
					                                       f32_3 %431 = OpLoad %423 
					                                       f32_3 %432 = OpLoad %255 
					                                       f32_3 %433 = OpFDiv %431 %432 
					                                                      OpStore %423 %433 
					                                       f32_3 %435 = OpLoad %255 
					                                       f32_4 %436 = OpVectorShuffle %435 %435 0 1 2 0 
					                                      bool_4 %437 = OpFOrdLessThan %270 %436 
					                                      bool_3 %438 = OpVectorShuffle %437 %437 0 1 2 
					                                                      OpStore %434 %438 
					                                       f32_3 %440 = OpLoad %412 
					                                                      OpStore %439 %440 
					                               Private bool* %441 = OpAccessChain %434 %18 
					                                        bool %442 = OpLoad %441 
					                                                      OpSelectionMerge %445 None 
					                                                      OpBranchConditional %442 %444 %448 
					                                             %444 = OpLabel 
					                                Private f32* %446 = OpAccessChain %412 %18 
					                                         f32 %447 = OpLoad %446 
					                                                      OpStore %443 %447 
					                                                      OpBranch %445 
					                                             %448 = OpLabel 
					                                Private f32* %449 = OpAccessChain %423 %18 
					                                         f32 %450 = OpLoad %449 
					                                                      OpStore %443 %450 
					                                                      OpBranch %445 
					                                             %445 = OpLabel 
					                                         f32 %451 = OpLoad %443 
					                               Function f32* %452 = OpAccessChain %439 %18 
					                                                      OpStore %452 %451 
					                               Private bool* %453 = OpAccessChain %434 %24 
					                                        bool %454 = OpLoad %453 
					                                                      OpSelectionMerge %457 None 
					                                                      OpBranchConditional %454 %456 %460 
					                                             %456 = OpLabel 
					                                Private f32* %458 = OpAccessChain %412 %24 
					                                         f32 %459 = OpLoad %458 
					                                                      OpStore %455 %459 
					                                                      OpBranch %457 
					                                             %460 = OpLabel 
					                                Private f32* %461 = OpAccessChain %423 %24 
					                                         f32 %462 = OpLoad %461 
					                                                      OpStore %455 %462 
					                                                      OpBranch %457 
					                                             %457 = OpLabel 
					                                         f32 %463 = OpLoad %455 
					                               Function f32* %464 = OpAccessChain %439 %24 
					                                                      OpStore %464 %463 
					                               Private bool* %465 = OpAccessChain %434 %29 
					                                        bool %466 = OpLoad %465 
					                                                      OpSelectionMerge %469 None 
					                                                      OpBranchConditional %466 %468 %472 
					                                             %468 = OpLabel 
					                                Private f32* %470 = OpAccessChain %412 %29 
					                                         f32 %471 = OpLoad %470 
					                                                      OpStore %467 %471 
					                                                      OpBranch %469 
					                                             %472 = OpLabel 
					                                Private f32* %473 = OpAccessChain %423 %29 
					                                         f32 %474 = OpLoad %473 
					                                                      OpStore %467 %474 
					                                                      OpBranch %469 
					                                             %469 = OpLabel 
					                                         f32 %475 = OpLoad %467 
					                               Function f32* %476 = OpAccessChain %439 %29 
					                                                      OpStore %476 %475 
					                                       f32_3 %477 = OpLoad %439 
					                                                      OpStore %412 %477 
					                                Private f32* %478 = OpAccessChain %412 %24 
					                                         f32 %479 = OpLoad %478 
					                                Private f32* %480 = OpAccessChain %412 %18 
					                                         f32 %481 = OpLoad %480 
					                                         f32 %482 = OpExtInst %1 37 %479 %481 
					                                                      OpStore %399 %482 
					                                Private f32* %483 = OpAccessChain %412 %29 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpLoad %399 
					                                         f32 %486 = OpExtInst %1 37 %484 %485 
					                                                      OpStore %399 %486 
					                                       f32_3 %487 = OpLoad %9 
					                              Uniform f32_4* %488 = OpAccessChain %36 %392 
					                                       f32_4 %489 = OpLoad %488 
					                                       f32_3 %490 = OpVectorShuffle %489 %489 0 1 2 
					                                       f32_3 %491 = OpFNegate %490 
					                                       f32_3 %492 = OpFAdd %487 %491 
					                                                      OpStore %9 %492 
					                                       f32_3 %493 = OpLoad %255 
					                                         f32 %494 = OpLoad %399 
					                                       f32_3 %495 = OpCompositeConstruct %494 %494 %494 
					                                       f32_3 %496 = OpFMul %493 %495 
					                                       f32_3 %497 = OpLoad %9 
					                                       f32_3 %498 = OpFAdd %496 %497 
					                                       f32_4 %499 = OpLoad %136 
					                                       f32_4 %500 = OpVectorShuffle %499 %498 4 5 6 3 
					                                                      OpStore %136 %500 
					                                                      OpBranch %398 
					                                             %398 = OpLabel 
					                       read_only TextureCube %502 = OpLoad %501 
					                                     sampler %503 = OpLoad %350 
					                read_only TextureCubeSampled %504 = OpSampledImage %502 %503 
					                                       f32_4 %505 = OpLoad %136 
					                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
					                                       f32_4 %507 = OpImageSampleExplicitLod %504 %506 Lod %10 
					                                                      OpStore %136 %507 
					                                Private f32* %508 = OpAccessChain %136 %14 
					                                         f32 %509 = OpLoad %508 
					                                         f32 %510 = OpFAdd %509 %107 
					                                Private f32* %511 = OpAccessChain %9 %18 
					                                                      OpStore %511 %510 
					                                Uniform f32* %513 = OpAccessChain %36 %512 %14 
					                                         f32 %514 = OpLoad %513 
					                                Private f32* %515 = OpAccessChain %9 %18 
					                                         f32 %516 = OpLoad %515 
					                                         f32 %517 = OpFMul %514 %516 
					                                         f32 %518 = OpFAdd %517 %119 
					                                Private f32* %519 = OpAccessChain %9 %18 
					                                                      OpStore %519 %518 
					                                Private f32* %520 = OpAccessChain %9 %18 
					                                         f32 %521 = OpLoad %520 
					                                         f32 %522 = OpExtInst %1 30 %521 
					                                Private f32* %523 = OpAccessChain %9 %18 
					                                                      OpStore %523 %522 
					                                Private f32* %524 = OpAccessChain %9 %18 
					                                         f32 %525 = OpLoad %524 
					                                Uniform f32* %526 = OpAccessChain %36 %512 %24 
					                                         f32 %527 = OpLoad %526 
					                                         f32 %528 = OpFMul %525 %527 
					                                Private f32* %529 = OpAccessChain %9 %18 
					                                                      OpStore %529 %528 
					                                Private f32* %530 = OpAccessChain %9 %18 
					                                         f32 %531 = OpLoad %530 
					                                         f32 %532 = OpExtInst %1 29 %531 
					                                Private f32* %533 = OpAccessChain %9 %18 
					                                                      OpStore %533 %532 
					                                Private f32* %534 = OpAccessChain %9 %18 
					                                         f32 %535 = OpLoad %534 
					                                Uniform f32* %536 = OpAccessChain %36 %512 %18 
					                                         f32 %537 = OpLoad %536 
					                                         f32 %538 = OpFMul %535 %537 
					                                Private f32* %539 = OpAccessChain %9 %18 
					                                                      OpStore %539 %538 
					                                       f32_4 %540 = OpLoad %136 
					                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
					                                       f32_3 %542 = OpLoad %9 
					                                       f32_3 %543 = OpVectorShuffle %542 %542 0 0 0 
					                                       f32_3 %544 = OpFMul %541 %543 
					                                                      OpStore %9 %544 
					                                         f32 %545 = OpLoad %112 
					                                       f32_3 %546 = OpCompositeConstruct %545 %545 %545 
					                                       f32_4 %547 = OpLoad %235 
					                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
					                                       f32_3 %549 = OpFMul %546 %548 
					                                       f32_3 %550 = OpLoad %9 
					                                       f32_3 %551 = OpFNegate %550 
					                                       f32_3 %552 = OpFAdd %549 %551 
					                                       f32_4 %553 = OpLoad %136 
					                                       f32_4 %554 = OpVectorShuffle %553 %552 4 5 6 3 
					                                                      OpStore %136 %554 
					                              Uniform f32_4* %555 = OpAccessChain %36 %258 
					                                       f32_4 %556 = OpLoad %555 
					                                       f32_3 %557 = OpVectorShuffle %556 %556 3 3 3 
					                                       f32_4 %558 = OpLoad %136 
					                                       f32_3 %559 = OpVectorShuffle %558 %558 0 1 2 
					                                       f32_3 %560 = OpFMul %557 %559 
					                                       f32_3 %561 = OpLoad %9 
					                                       f32_3 %562 = OpFAdd %560 %561 
					                                                      OpStore %243 %562 
					                                                      OpBranch %391 
					                                             %391 = OpLabel 
					                                       f32_4 %563 = OpLoad %55 
					                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
					                                       f32_3 %567 = OpFMul %564 %566 
					                                                      OpStore %9 %567 
					                                       f32_3 %568 = OpLoad %31 
					                                         f32 %569 = OpLoad %43 
					                                       f32_3 %570 = OpCompositeConstruct %569 %569 %569 
					                                       f32_3 %571 = OpFMul %568 %570 
					                              Uniform f32_4* %573 = OpAccessChain %36 %572 
					                                       f32_4 %574 = OpLoad %573 
					                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
					                                       f32_3 %576 = OpFAdd %571 %575 
					                                                      OpStore %31 %576 
					                                       f32_3 %577 = OpLoad %31 
					                                       f32_3 %578 = OpLoad %31 
					                                         f32 %579 = OpDot %577 %578 
					                                                      OpStore %43 %579 
					                                         f32 %580 = OpLoad %43 
					                                         f32 %582 = OpExtInst %1 40 %580 %581 
					                                                      OpStore %43 %582 
					                                         f32 %583 = OpLoad %43 
					                                         f32 %584 = OpExtInst %1 32 %583 
					                                                      OpStore %43 %584 
					                                         f32 %585 = OpLoad %43 
					                                       f32_3 %586 = OpCompositeConstruct %585 %585 %585 
					                                       f32_3 %587 = OpLoad %31 
					                                       f32_3 %588 = OpFMul %586 %587 
					                                                      OpStore %31 %588 
					                                       f32_4 %589 = OpLoad %85 
					                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
					                                       f32_3 %591 = OpLoad %49 
					                                         f32 %592 = OpDot %590 %591 
					                                                      OpStore %43 %592 
					                                       f32_4 %593 = OpLoad %85 
					                                       f32_3 %594 = OpVectorShuffle %593 %593 0 1 2 
					                              Uniform f32_4* %595 = OpAccessChain %36 %572 
					                                       f32_4 %596 = OpLoad %595 
					                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
					                                         f32 %598 = OpDot %594 %597 
					                                                      OpStore %112 %598 
					                                         f32 %599 = OpLoad %112 
					                                         f32 %600 = OpExtInst %1 43 %599 %214 %119 
					                                                      OpStore %112 %600 
					                              Uniform f32_4* %601 = OpAccessChain %36 %572 
					                                       f32_4 %602 = OpLoad %601 
					                                       f32_3 %603 = OpVectorShuffle %602 %602 0 1 2 
					                                       f32_3 %604 = OpLoad %31 
					                                         f32 %605 = OpDot %603 %604 
					                                Private f32* %606 = OpAccessChain %31 %18 
					                                                      OpStore %606 %605 
					                                Private f32* %607 = OpAccessChain %31 %18 
					                                         f32 %608 = OpLoad %607 
					                                         f32 %609 = OpExtInst %1 43 %608 %214 %119 
					                                Private f32* %610 = OpAccessChain %31 %18 
					                                                      OpStore %610 %609 
					                                       f32_3 %612 = OpLoad %31 
					                                       f32_2 %613 = OpVectorShuffle %612 %612 0 0 
					                                       f32_3 %614 = OpLoad %31 
					                                       f32_2 %615 = OpVectorShuffle %614 %614 0 0 
					                                         f32 %616 = OpDot %613 %615 
					                                Private f32* %617 = OpAccessChain %611 %18 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %611 %18 
					                                         f32 %619 = OpLoad %618 
					                                         f32 %621 = OpFAdd %619 %620 
					                                Private f32* %622 = OpAccessChain %611 %18 
					                                                      OpStore %622 %621 
					                                         f32 %624 = OpLoad %112 
					                                         f32 %625 = OpFNegate %624 
					                                         f32 %626 = OpFAdd %625 %119 
					                                                      OpStore %623 %626 
					                                         f32 %627 = OpLoad %623 
					                                         f32 %628 = OpLoad %623 
					                                         f32 %629 = OpFMul %627 %628 
					                                Private f32* %630 = OpAccessChain %49 %18 
					                                                      OpStore %630 %629 
					                                Private f32* %631 = OpAccessChain %49 %18 
					                                         f32 %632 = OpLoad %631 
					                                Private f32* %633 = OpAccessChain %49 %18 
					                                         f32 %634 = OpLoad %633 
					                                         f32 %635 = OpFMul %632 %634 
					                                Private f32* %636 = OpAccessChain %49 %18 
					                                                      OpStore %636 %635 
					                                         f32 %637 = OpLoad %623 
					                                Private f32* %638 = OpAccessChain %49 %18 
					                                         f32 %639 = OpLoad %638 
					                                         f32 %640 = OpFMul %637 %639 
					                                                      OpStore %623 %640 
					                                Private f32* %641 = OpAccessChain %611 %18 
					                                         f32 %642 = OpLoad %641 
					                                         f32 %643 = OpLoad %623 
					                                         f32 %644 = OpFMul %642 %643 
					                                         f32 %645 = OpFAdd %644 %119 
					                                                      OpStore %623 %645 
					                                         f32 %646 = OpLoad %43 
					                                         f32 %647 = OpExtInst %1 4 %646 
					                                         f32 %648 = OpFNegate %647 
					                                         f32 %649 = OpFAdd %648 %119 
					                                Private f32* %650 = OpAccessChain %49 %18 
					                                                      OpStore %650 %649 
					                                Private f32* %652 = OpAccessChain %49 %18 
					                                         f32 %653 = OpLoad %652 
					                                Private f32* %654 = OpAccessChain %49 %18 
					                                         f32 %655 = OpLoad %654 
					                                         f32 %656 = OpFMul %653 %655 
					                                Private f32* %657 = OpAccessChain %651 %18 
					                                                      OpStore %657 %656 
					                                Private f32* %658 = OpAccessChain %651 %18 
					                                         f32 %659 = OpLoad %658 
					                                Private f32* %660 = OpAccessChain %651 %18 
					                                         f32 %661 = OpLoad %660 
					                                         f32 %662 = OpFMul %659 %661 
					                                Private f32* %663 = OpAccessChain %651 %18 
					                                                      OpStore %663 %662 
					                                Private f32* %664 = OpAccessChain %49 %18 
					                                         f32 %665 = OpLoad %664 
					                                Private f32* %666 = OpAccessChain %651 %18 
					                                         f32 %667 = OpLoad %666 
					                                         f32 %668 = OpFMul %665 %667 
					                                Private f32* %669 = OpAccessChain %49 %18 
					                                                      OpStore %669 %668 
					                                Private f32* %670 = OpAccessChain %611 %18 
					                                         f32 %671 = OpLoad %670 
					                                Private f32* %672 = OpAccessChain %49 %18 
					                                         f32 %673 = OpLoad %672 
					                                         f32 %674 = OpFMul %671 %673 
					                                         f32 %675 = OpFAdd %674 %119 
					                                Private f32* %676 = OpAccessChain %611 %18 
					                                                      OpStore %676 %675 
					                                Private f32* %677 = OpAccessChain %611 %18 
					                                         f32 %678 = OpLoad %677 
					                                         f32 %679 = OpLoad %623 
					                                         f32 %680 = OpFMul %678 %679 
					                                Private f32* %681 = OpAccessChain %611 %18 
					                                                      OpStore %681 %680 
					                                         f32 %682 = OpLoad %112 
					                                Private f32* %683 = OpAccessChain %611 %18 
					                                         f32 %684 = OpLoad %683 
					                                         f32 %685 = OpFMul %682 %684 
					                                Private f32* %686 = OpAccessChain %611 %18 
					                                                      OpStore %686 %685 
					                                         f32 %687 = OpLoad %43 
					                                         f32 %688 = OpExtInst %1 4 %687 
					                                         f32 %689 = OpLoad %112 
					                                         f32 %690 = OpFAdd %688 %689 
					                                                      OpStore %43 %690 
					                                         f32 %691 = OpLoad %43 
					                                         f32 %693 = OpFAdd %691 %692 
					                                                      OpStore %43 %693 
					                                         f32 %695 = OpLoad %43 
					                                         f32 %696 = OpFDiv %694 %695 
					                                                      OpStore %43 %696 
					                                         f32 %697 = OpLoad %112 
					                                         f32 %698 = OpLoad %43 
					                                         f32 %699 = OpFMul %697 %698 
					                                                      OpStore %43 %699 
					                                         f32 %700 = OpLoad %43 
					                                         f32 %702 = OpFMul %700 %701 
					                                                      OpStore %43 %702 
					                              Uniform f32_4* %704 = OpAccessChain %36 %703 
					                                       f32_4 %705 = OpLoad %704 
					                                       f32_3 %706 = OpVectorShuffle %705 %705 0 1 2 
					                                       f32_3 %707 = OpLoad %611 
					                                       f32_3 %708 = OpVectorShuffle %707 %707 0 0 0 
					                                       f32_3 %709 = OpFMul %706 %708 
					                                       f32_3 %710 = OpLoad %189 
					                                       f32_3 %711 = OpFAdd %709 %710 
					                                                      OpStore %611 %711 
					                                         f32 %712 = OpLoad %43 
					                                       f32_3 %713 = OpCompositeConstruct %712 %712 %712 
					                              Uniform f32_4* %714 = OpAccessChain %36 %703 
					                                       f32_4 %715 = OpLoad %714 
					                                       f32_3 %716 = OpVectorShuffle %715 %715 0 1 2 
					                                       f32_3 %717 = OpFMul %713 %716 
					                                                      OpStore %651 %717 
					                                Private f32* %718 = OpAccessChain %31 %18 
					                                         f32 %719 = OpLoad %718 
					                                         f32 %720 = OpFNegate %719 
					                                         f32 %721 = OpFAdd %720 %119 
					                                                      OpStore %43 %721 
					                                         f32 %722 = OpLoad %43 
					                                         f32 %723 = OpLoad %43 
					                                         f32 %724 = OpFMul %722 %723 
					                                Private f32* %725 = OpAccessChain %31 %18 
					                                                      OpStore %725 %724 
					                                Private f32* %726 = OpAccessChain %31 %18 
					                                         f32 %727 = OpLoad %726 
					                                Private f32* %728 = OpAccessChain %31 %18 
					                                         f32 %729 = OpLoad %728 
					                                         f32 %730 = OpFMul %727 %729 
					                                Private f32* %731 = OpAccessChain %31 %18 
					                                                      OpStore %731 %730 
					                                         f32 %732 = OpLoad %43 
					                                Private f32* %733 = OpAccessChain %31 %18 
					                                         f32 %734 = OpLoad %733 
					                                         f32 %735 = OpFMul %732 %734 
					                                                      OpStore %43 %735 
					                                         f32 %736 = OpLoad %43 
					                                         f32 %737 = OpFMul %736 %565 
					                                         f32 %739 = OpFAdd %737 %738 
					                                                      OpStore %43 %739 
					                                         f32 %740 = OpLoad %43 
					                                       f32_3 %741 = OpCompositeConstruct %740 %740 %740 
					                                       f32_3 %742 = OpLoad %651 
					                                       f32_3 %743 = OpFMul %741 %742 
					                                                      OpStore %651 %743 
					                                       f32_3 %744 = OpLoad %9 
					                                       f32_3 %745 = OpLoad %611 
					                                       f32_3 %746 = OpFMul %744 %745 
					                                       f32_3 %747 = OpLoad %651 
					                                       f32_3 %748 = OpFAdd %746 %747 
					                                                      OpStore %9 %748 
					                                       f32_3 %749 = OpLoad %243 
					                                       f32_3 %751 = OpFMul %749 %750 
					                                                      OpStore %31 %751 
					                                Private f32* %752 = OpAccessChain %49 %18 
					                                         f32 %753 = OpLoad %752 
					                                         f32 %755 = OpFMul %753 %754 
					                                         f32 %756 = OpFAdd %755 %738 
					                                                      OpStore %43 %756 
					                                       f32_3 %757 = OpLoad %31 
					                                         f32 %758 = OpLoad %43 
					                                       f32_3 %759 = OpCompositeConstruct %758 %758 %758 
					                                       f32_3 %760 = OpFMul %757 %759 
					                                       f32_3 %761 = OpLoad %9 
					                                       f32_3 %762 = OpFAdd %760 %761 
					                                                      OpStore %9 %762 
					                                         f32 %764 = OpLoad vs_TEXCOORD6 
					                                Uniform f32* %766 = OpAccessChain %36 %765 %24 
					                                         f32 %767 = OpLoad %766 
					                                         f32 %768 = OpFDiv %764 %767 
					                                                      OpStore %43 %768 
					                                         f32 %769 = OpLoad %43 
					                                         f32 %770 = OpFNegate %769 
					                                         f32 %771 = OpFAdd %770 %119 
					                                                      OpStore %43 %771 
					                                         f32 %772 = OpLoad %43 
					                                Uniform f32* %773 = OpAccessChain %36 %765 %29 
					                                         f32 %774 = OpLoad %773 
					                                         f32 %775 = OpFMul %772 %774 
					                                                      OpStore %43 %775 
					                                         f32 %776 = OpLoad %43 
					                                         f32 %777 = OpExtInst %1 40 %776 %214 
					                                                      OpStore %43 %777 
					                                         f32 %778 = OpLoad %43 
					                                Uniform f32* %780 = OpAccessChain %36 %779 %29 
					                                         f32 %781 = OpLoad %780 
					                                         f32 %782 = OpFMul %778 %781 
					                                Uniform f32* %783 = OpAccessChain %36 %779 %14 
					                                         f32 %784 = OpLoad %783 
					                                         f32 %785 = OpFAdd %782 %784 
					                                                      OpStore %43 %785 
					                                         f32 %786 = OpLoad %43 
					                                         f32 %787 = OpExtInst %1 43 %786 %214 %119 
					                                                      OpStore %43 %787 
					                                       f32_3 %788 = OpLoad %9 
					                              Uniform f32_4* %790 = OpAccessChain %36 %789 
					                                       f32_4 %791 = OpLoad %790 
					                                       f32_3 %792 = OpVectorShuffle %791 %791 0 1 2 
					                                       f32_3 %793 = OpFNegate %792 
					                                       f32_3 %794 = OpFAdd %788 %793 
					                                                      OpStore %9 %794 
					                                         f32 %795 = OpLoad %43 
					                                       f32_3 %796 = OpCompositeConstruct %795 %795 %795 
					                                       f32_3 %797 = OpLoad %9 
					                                       f32_3 %798 = OpFMul %796 %797 
					                              Uniform f32_4* %799 = OpAccessChain %36 %789 
					                                       f32_4 %800 = OpLoad %799 
					                                       f32_3 %801 = OpVectorShuffle %800 %800 0 1 2 
					                                       f32_3 %802 = OpFAdd %798 %801 
					                                       f32_4 %803 = OpLoad %128 
					                                       f32_4 %804 = OpVectorShuffle %803 %802 4 5 6 3 
					                                                      OpStore %128 %804 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat13;
					vec3 u_xlat14;
					float u_xlat25;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat4 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat4.z = sqrt(u_xlat37);
					    SV_Target0.w = u_xlat3.w * vs_COLOR0.w;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat37 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat4.xyz = vec3(u_xlat37) * u_xlat5.xyz;
					    u_xlat37 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat37)) + (-u_xlat2.xyz);
					    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb37){
					        u_xlat37 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat37 = inversesqrt(u_xlat37);
					        u_xlat6.xyz = vec3(u_xlat37) * u_xlat5.xyz;
					        u_xlat7.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat37 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat37 = min(u_xlat7.z, u_xlat37);
					        u_xlat7.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat5.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat37 = u_xlat6.w + -1.0;
					    u_xlat37 = unity_SpecCube0_HDR.w * u_xlat37 + 1.0;
					    u_xlat37 = log2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat8.xyz = vec3(u_xlat38) * u_xlat5.xyz;
					            u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat38 = min(u_xlat9.z, u_xlat38);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat38) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, 6.0);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat6.xyz + (-u_xlat0.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat36 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat37 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat13.x = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat13.x = u_xlat13.x + -0.5;
					    u_xlat25 = (-u_xlat37) + 1.0;
					    u_xlat2.x = u_xlat25 * u_xlat25;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat25 = u_xlat25 * u_xlat2.x;
					    u_xlat25 = u_xlat13.x * u_xlat25 + 1.0;
					    u_xlat2.x = -abs(u_xlat36) + 1.0;
					    u_xlat14.x = u_xlat2.x * u_xlat2.x;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat2.x = u_xlat2.x * u_xlat14.x;
					    u_xlat13.x = u_xlat13.x * u_xlat2.x + 1.0;
					    u_xlat13.x = u_xlat13.x * u_xlat25;
					    u_xlat13.x = u_xlat37 * u_xlat13.x;
					    u_xlat36 = abs(u_xlat36) + u_xlat37;
					    u_xlat36 = u_xlat36 + 9.99999975e-06;
					    u_xlat36 = 0.5 / u_xlat36;
					    u_xlat36 = u_xlat36 * 0.999999881;
					    u_xlat36 = u_xlat37 * u_xlat36;
					    u_xlat13.xyz = u_xlat13.xxx * _LightColor0.xyz;
					    u_xlat14.xyz = vec3(u_xlat36) * _LightColor0.xyz;
					    u_xlat36 = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat36 * 0.959999979 + 0.0399999991;
					    u_xlat14.xyz = vec3(u_xlat36) * u_xlat14.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat13.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat36 = u_xlat2.x * 2.23517418e-08 + 0.0399999991;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					float u_xlat27;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat2.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat4 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat4.z = sqrt(u_xlat40);
					    SV_Target0.w = u_xlat3.w * vs_COLOR0.w;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat4.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					    u_xlat40 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat40 = u_xlat40 + u_xlat40;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat40)) + (-u_xlat2.xyz);
					    u_xlat4.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat4);
					    u_xlat6.y = dot(unity_SHAg, u_xlat4);
					    u_xlat6.z = dot(unity_SHAb, u_xlat4);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat7.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat40 = min(u_xlat8.z, u_xlat40);
					        u_xlat8.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat5.xyz;
					    }
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, 6.0);
					    u_xlat40 = u_xlat7.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat9.xyz = vec3(u_xlat41) * u_xlat5.xyz;
					            u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat41 = min(u_xlat10.z, u_xlat41);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat41) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, 6.0);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat40) * u_xlat7.xyz + (-u_xlat0.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat39 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat40 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat14.x = u_xlat14.x + -0.5;
					    u_xlat27 = (-u_xlat40) + 1.0;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat14.x * u_xlat27 + 1.0;
					    u_xlat2.x = -abs(u_xlat39) + 1.0;
					    u_xlat15.x = u_xlat2.x * u_xlat2.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat2.x = u_xlat2.x * u_xlat15.x;
					    u_xlat14.x = u_xlat14.x * u_xlat2.x + 1.0;
					    u_xlat14.x = u_xlat14.x * u_xlat27;
					    u_xlat14.x = u_xlat40 * u_xlat14.x;
					    u_xlat39 = abs(u_xlat39) + u_xlat40;
					    u_xlat39 = u_xlat39 + 9.99999975e-06;
					    u_xlat39 = 0.5 / u_xlat39;
					    u_xlat39 = u_xlat39 * 0.999999881;
					    u_xlat39 = u_xlat40 * u_xlat39;
					    u_xlat14.xyz = _LightColor0.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat15.xyz = vec3(u_xlat39) * _LightColor0.xyz;
					    u_xlat39 = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat39 * 0.959999979 + 0.0399999991;
					    u_xlat15.xyz = vec3(u_xlat39) * u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.xyz + u_xlat15.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat39 = u_xlat2.x * 2.23517418e-08 + 0.0399999991;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec3 u_xlat13;
					vec3 u_xlat14;
					float u_xlat25;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat4 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat4.z = sqrt(u_xlat37);
					    SV_Target0.w = u_xlat3.w * vs_COLOR0.w;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat37 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat4.xyz = vec3(u_xlat37) * u_xlat5.xyz;
					    u_xlat37 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat37)) + (-u_xlat2.xyz);
					    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb37){
					        u_xlat37 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat37 = inversesqrt(u_xlat37);
					        u_xlat6.xyz = vec3(u_xlat37) * u_xlat5.xyz;
					        u_xlat7.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat37 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat37 = min(u_xlat7.z, u_xlat37);
					        u_xlat7.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat5.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat37 = u_xlat6.w + -1.0;
					    u_xlat37 = unity_SpecCube0_HDR.w * u_xlat37 + 1.0;
					    u_xlat37 = log2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat8.xyz = vec3(u_xlat38) * u_xlat5.xyz;
					            u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat38 = min(u_xlat9.z, u_xlat38);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat38) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, 6.0);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat6.xyz + (-u_xlat0.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
					    u_xlat36 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat37 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat13.x = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat13.x = u_xlat13.x + -0.5;
					    u_xlat25 = (-u_xlat37) + 1.0;
					    u_xlat2.x = u_xlat25 * u_xlat25;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat25 = u_xlat25 * u_xlat2.x;
					    u_xlat25 = u_xlat13.x * u_xlat25 + 1.0;
					    u_xlat2.x = -abs(u_xlat36) + 1.0;
					    u_xlat14.x = u_xlat2.x * u_xlat2.x;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat2.x = u_xlat2.x * u_xlat14.x;
					    u_xlat13.x = u_xlat13.x * u_xlat2.x + 1.0;
					    u_xlat13.x = u_xlat13.x * u_xlat25;
					    u_xlat13.x = u_xlat37 * u_xlat13.x;
					    u_xlat36 = abs(u_xlat36) + u_xlat37;
					    u_xlat36 = u_xlat36 + 9.99999975e-06;
					    u_xlat36 = 0.5 / u_xlat36;
					    u_xlat36 = u_xlat36 * 0.999999881;
					    u_xlat36 = u_xlat37 * u_xlat36;
					    u_xlat13.xyz = u_xlat13.xxx * _LightColor0.xyz;
					    u_xlat14.xyz = vec3(u_xlat36) * _LightColor0.xyz;
					    u_xlat36 = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat36 = u_xlat36 * 0.959999979 + 0.0399999991;
					    u_xlat14.xyz = vec3(u_xlat36) * u_xlat14.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat13.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat36 = u_xlat2.x * 2.23517418e-08 + 0.0399999991;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat36) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * _ProjectionParams.z;
					    u_xlat36 = max(u_xlat36, 0.0);
					    u_xlat36 = u_xlat36 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					float u_xlat27;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat2.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3 = u_xlat3 * _Color;
					    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
					    u_xlat4 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat4.z = sqrt(u_xlat40);
					    SV_Target0.w = u_xlat3.w * vs_COLOR0.w;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat4.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					    u_xlat40 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat40 = u_xlat40 + u_xlat40;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat40)) + (-u_xlat2.xyz);
					    u_xlat4.w = 1.0;
					    u_xlat6.x = dot(unity_SHAr, u_xlat4);
					    u_xlat6.y = dot(unity_SHAg, u_xlat4);
					    u_xlat6.z = dot(unity_SHAb, u_xlat4);
					    u_xlat6.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat7.xyz = vec3(u_xlat40) * u_xlat5.xyz;
					        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat40 = min(u_xlat8.z, u_xlat40);
					        u_xlat8.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat5.xyz;
					    }
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, 6.0);
					    u_xlat40 = u_xlat7.w + -1.0;
					    u_xlat40 = unity_SpecCube0_HDR.w * u_xlat40 + 1.0;
					    u_xlat40 = log2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat9.xyz = vec3(u_xlat41) * u_xlat5.xyz;
					            u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat41 = min(u_xlat10.z, u_xlat41);
					            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat41) + u_xlat0.xyz;
					        }
					        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, 6.0);
					        u_xlat0.x = u_xlat5.w + -1.0;
					        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
					        u_xlat0.x = log2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.y;
					        u_xlat0.x = exp2(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
					        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
					        u_xlat5.xyz = vec3(u_xlat40) * u_xlat7.xyz + (-u_xlat0.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
					    }
					    u_xlat0.xyz = u_xlat3.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
					    u_xlat39 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat40 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat14.x = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat14.x = u_xlat14.x + -0.5;
					    u_xlat27 = (-u_xlat40) + 1.0;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat14.x * u_xlat27 + 1.0;
					    u_xlat2.x = -abs(u_xlat39) + 1.0;
					    u_xlat15.x = u_xlat2.x * u_xlat2.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat2.x = u_xlat2.x * u_xlat15.x;
					    u_xlat14.x = u_xlat14.x * u_xlat2.x + 1.0;
					    u_xlat14.x = u_xlat14.x * u_xlat27;
					    u_xlat14.x = u_xlat40 * u_xlat14.x;
					    u_xlat39 = abs(u_xlat39) + u_xlat40;
					    u_xlat39 = u_xlat39 + 9.99999975e-06;
					    u_xlat39 = 0.5 / u_xlat39;
					    u_xlat39 = u_xlat39 * 0.999999881;
					    u_xlat39 = u_xlat40 * u_xlat39;
					    u_xlat14.xyz = _LightColor0.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat15.xyz = vec3(u_xlat39) * _LightColor0.xyz;
					    u_xlat39 = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat39 * u_xlat39;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat1.x;
					    u_xlat39 = u_xlat39 * 0.959999979 + 0.0399999991;
					    u_xlat15.xyz = vec3(u_xlat39) * u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.xyz + u_xlat15.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat39 = u_xlat2.x * 2.23517418e-08 + 0.0399999991;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat39) + u_xlat0.xyz;
					    u_xlat39 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * _ProjectionParams.z;
					    u_xlat39 = max(u_xlat39, 0.0);
					    u_xlat39 = u_xlat39 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"spirv"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 200
			Tags { "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha One, SrcAlpha One
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 66494
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "POINT" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat10 = -abs(u_xlat9) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat11) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = max(u_xlat11, 0.00100000005);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat6 = (-u_xlat1.x) + 1.0;
					    u_xlat3 = u_xlat3 + -0.5;
					    u_xlat1.x = u_xlat3 * u_xlat10 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat3 = u_xlat3 * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat1.x * u_xlat3;
					    u_xlat3 = u_xlat0.x * u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat3 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat3 = u_xlat3 + 9.99999975e-06;
					    u_xlat3 = 0.5 / u_xlat3;
					    u_xlat3 = u_xlat3 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "POINT" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 312
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %75 %87 %88 %102 %139 %212 %223 %227 %243 %260 %261 %263 %297 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %73 0 BuiltIn 73 
					                                                      OpMemberDecorate %73 1 BuiltIn 73 
					                                                      OpMemberDecorate %73 2 BuiltIn 73 
					                                                      OpDecorate %73 Block 
					                                                      OpDecorate vs_TEXCOORD0 Location 87 
					                                                      OpDecorate %88 Location 88 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %139 Location 139 
					                                                      OpDecorate vs_TEXCOORD1 Location 212 
					                                                      OpDecorate vs_TEXCOORD2 Location 223 
					                                                      OpDecorate vs_TEXCOORD3 Location 227 
					                                                      OpDecorate vs_TEXCOORD4 Location 243 
					                                                      OpDecorate %260 Location 260 
					                                                      OpDecorate %261 Location 261 
					                                                      OpDecorate vs_TEXCOORD5 Location 263 
					                                                      OpDecorate vs_TEXCOORD6 Location 297 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeArray %7 %15 
					                                              %20 = OpTypeStruct %16 %17 %7 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %37 = OpConstant 2 
					                               Private f32_4* %45 = OpVariable Private 
					                                          i32 %47 = OpConstant 3 
					                               Private f32_4* %51 = OpVariable Private 
					                                          u32 %71 = OpConstant 1 
					                                              %72 = OpTypeArray %6 %71 
					                                              %73 = OpTypeStruct %7 %6 %72 
					                                              %74 = OpTypePointer Output %73 
					         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
					                                              %83 = OpTypePointer Output %7 
					                                              %85 = OpTypeVector %6 2 
					                                              %86 = OpTypePointer Output %85 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                 Input f32_4* %88 = OpVariable Input 
					                                          i32 %91 = OpConstant 5 
					                                             %100 = OpTypeVector %6 3 
					                                             %101 = OpTypePointer Input %100 
					                                Input f32_3* %102 = OpVariable Input 
					                                             %108 = OpTypePointer Private %6 
					                                         u32 %115 = OpConstant 2 
					                                         u32 %122 = OpConstant 0 
					                                Private f32* %124 = OpVariable Private 
					                                Input f32_4* %139 = OpVariable Input 
					                                             %184 = OpTypePointer Private %100 
					                              Private f32_3* %185 = OpVariable Private 
					                                         u32 %199 = OpConstant 3 
					                                             %200 = OpTypePointer Input %6 
					                                             %203 = OpTypePointer Uniform %6 
					                                             %211 = OpTypePointer Output %100 
					                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
					                                             %215 = OpTypePointer Output %6 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %260 = OpVariable Output 
					                                Input f32_4* %261 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %264 = OpConstant 3,674022E-40 
					                                       f32_4 %265 = OpConstantComposite %264 %264 %264 %264 
					                                         i32 %268 = OpConstant 4 
					                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
					                                        f32_4 %31 = OpLoad %30 
					                                        f32_4 %32 = OpLoad %11 
					                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
					                                        f32_4 %34 = OpFMul %31 %33 
					                                        f32_4 %35 = OpLoad %9 
					                                        f32_4 %36 = OpFAdd %34 %35 
					                                                      OpStore %9 %36 
					                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_4 %40 = OpLoad %11 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
					                                        f32_4 %42 = OpFMul %39 %41 
					                                        f32_4 %43 = OpLoad %9 
					                                        f32_4 %44 = OpFAdd %42 %43 
					                                                      OpStore %9 %44 
					                                        f32_4 %46 = OpLoad %9 
					                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpFAdd %46 %49 
					                                                      OpStore %45 %50 
					                                        f32_4 %52 = OpLoad %45 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
					                               Uniform f32_4* %54 = OpAccessChain %22 %47 %25 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_4 %56 = OpFMul %53 %55 
					                                                      OpStore %51 %56 
					                               Uniform f32_4* %57 = OpAccessChain %22 %47 %24 
					                                        f32_4 %58 = OpLoad %57 
					                                        f32_4 %59 = OpLoad %45 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
					                                        f32_4 %61 = OpFMul %58 %60 
					                                        f32_4 %62 = OpLoad %51 
					                                        f32_4 %63 = OpFAdd %61 %62 
					                                                      OpStore %51 %63 
					                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpLoad %45 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
					                                        f32_4 %68 = OpFMul %65 %67 
					                                        f32_4 %69 = OpLoad %51 
					                                        f32_4 %70 = OpFAdd %68 %69 
					                                                      OpStore %51 %70 
					                               Uniform f32_4* %76 = OpAccessChain %22 %47 %47 
					                                        f32_4 %77 = OpLoad %76 
					                                        f32_4 %78 = OpLoad %45 
					                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
					                                        f32_4 %80 = OpFMul %77 %79 
					                                        f32_4 %81 = OpLoad %51 
					                                        f32_4 %82 = OpFAdd %80 %81 
					                                Output f32_4* %84 = OpAccessChain %75 %24 
					                                                      OpStore %84 %82 
					                                        f32_4 %89 = OpLoad %88 
					                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
					                               Uniform f32_4* %92 = OpAccessChain %22 %91 
					                                        f32_4 %93 = OpLoad %92 
					                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
					                                        f32_2 %95 = OpFMul %90 %94 
					                               Uniform f32_4* %96 = OpAccessChain %22 %91 
					                                        f32_4 %97 = OpLoad %96 
					                                        f32_2 %98 = OpVectorShuffle %97 %97 2 3 
					                                        f32_2 %99 = OpFAdd %95 %98 
					                                                      OpStore vs_TEXCOORD0 %99 
					                                       f32_3 %103 = OpLoad %102 
					                              Uniform f32_4* %104 = OpAccessChain %22 %25 %24 
					                                       f32_4 %105 = OpLoad %104 
					                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
					                                         f32 %107 = OpDot %103 %106 
					                                Private f32* %109 = OpAccessChain %45 %71 
					                                                      OpStore %109 %107 
					                                       f32_3 %110 = OpLoad %102 
					                              Uniform f32_4* %111 = OpAccessChain %22 %25 %25 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
					                                         f32 %114 = OpDot %110 %113 
					                                Private f32* %116 = OpAccessChain %45 %115 
					                                                      OpStore %116 %114 
					                                       f32_3 %117 = OpLoad %102 
					                              Uniform f32_4* %118 = OpAccessChain %22 %25 %37 
					                                       f32_4 %119 = OpLoad %118 
					                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
					                                         f32 %121 = OpDot %117 %120 
					                                Private f32* %123 = OpAccessChain %45 %122 
					                                                      OpStore %123 %121 
					                                       f32_4 %125 = OpLoad %45 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
					                                       f32_4 %127 = OpLoad %45 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                         f32 %129 = OpDot %126 %128 
					                                                      OpStore %124 %129 
					                                         f32 %130 = OpLoad %124 
					                                         f32 %131 = OpExtInst %1 32 %130 
					                                                      OpStore %124 %131 
					                                         f32 %132 = OpLoad %124 
					                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
					                                       f32_4 %134 = OpLoad %45 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                       f32_3 %136 = OpFMul %133 %135 
					                                       f32_4 %137 = OpLoad %45 
					                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 6 3 
					                                                      OpStore %45 %138 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 1 1 1 
					                              Uniform f32_4* %142 = OpAccessChain %22 %24 %25 
					                                       f32_4 %143 = OpLoad %142 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 1 2 0 
					                                       f32_3 %145 = OpFMul %141 %144 
					                                       f32_4 %146 = OpLoad %51 
					                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
					                                                      OpStore %51 %147 
					                              Uniform f32_4* %148 = OpAccessChain %22 %24 %24 
					                                       f32_4 %149 = OpLoad %148 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 1 2 0 
					                                       f32_4 %151 = OpLoad %139 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
					                                       f32_3 %153 = OpFMul %150 %152 
					                                       f32_4 %154 = OpLoad %51 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                       f32_3 %156 = OpFAdd %153 %155 
					                                       f32_4 %157 = OpLoad %51 
					                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
					                                                      OpStore %51 %158 
					                              Uniform f32_4* %159 = OpAccessChain %22 %24 %37 
					                                       f32_4 %160 = OpLoad %159 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 1 2 0 
					                                       f32_4 %162 = OpLoad %139 
					                                       f32_3 %163 = OpVectorShuffle %162 %162 2 2 2 
					                                       f32_3 %164 = OpFMul %161 %163 
					                                       f32_4 %165 = OpLoad %51 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                       f32_3 %167 = OpFAdd %164 %166 
					                                       f32_4 %168 = OpLoad %51 
					                                       f32_4 %169 = OpVectorShuffle %168 %167 4 5 6 3 
					                                                      OpStore %51 %169 
					                                       f32_4 %170 = OpLoad %51 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                       f32_4 %172 = OpLoad %51 
					                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
					                                         f32 %174 = OpDot %171 %173 
					                                                      OpStore %124 %174 
					                                         f32 %175 = OpLoad %124 
					                                         f32 %176 = OpExtInst %1 32 %175 
					                                                      OpStore %124 %176 
					                                         f32 %177 = OpLoad %124 
					                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
					                                       f32_4 %179 = OpLoad %51 
					                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
					                                       f32_3 %181 = OpFMul %178 %180 
					                                       f32_4 %182 = OpLoad %51 
					                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
					                                                      OpStore %51 %183 
					                                       f32_4 %186 = OpLoad %45 
					                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
					                                       f32_4 %188 = OpLoad %51 
					                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
					                                       f32_3 %190 = OpFMul %187 %189 
					                                                      OpStore %185 %190 
					                                       f32_4 %191 = OpLoad %45 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
					                                       f32_4 %193 = OpLoad %51 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 1 2 0 
					                                       f32_3 %195 = OpFMul %192 %194 
					                                       f32_3 %196 = OpLoad %185 
					                                       f32_3 %197 = OpFNegate %196 
					                                       f32_3 %198 = OpFAdd %195 %197 
					                                                      OpStore %185 %198 
					                                  Input f32* %201 = OpAccessChain %139 %199 
					                                         f32 %202 = OpLoad %201 
					                                Uniform f32* %204 = OpAccessChain %22 %37 %199 
					                                         f32 %205 = OpLoad %204 
					                                         f32 %206 = OpFMul %202 %205 
					                                                      OpStore %124 %206 
					                                         f32 %207 = OpLoad %124 
					                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
					                                       f32_3 %209 = OpLoad %185 
					                                       f32_3 %210 = OpFMul %208 %209 
					                                                      OpStore %185 %210 
					                                Private f32* %213 = OpAccessChain %185 %122 
					                                         f32 %214 = OpLoad %213 
					                                 Output f32* %216 = OpAccessChain vs_TEXCOORD1 %71 
					                                                      OpStore %216 %214 
					                                Private f32* %217 = OpAccessChain %51 %115 
					                                         f32 %218 = OpLoad %217 
					                                 Output f32* %219 = OpAccessChain vs_TEXCOORD1 %122 
					                                                      OpStore %219 %218 
					                                Private f32* %220 = OpAccessChain %45 %71 
					                                         f32 %221 = OpLoad %220 
					                                 Output f32* %222 = OpAccessChain vs_TEXCOORD1 %115 
					                                                      OpStore %222 %221 
					                                Private f32* %224 = OpAccessChain %51 %122 
					                                         f32 %225 = OpLoad %224 
					                                 Output f32* %226 = OpAccessChain vs_TEXCOORD2 %122 
					                                                      OpStore %226 %225 
					                                Private f32* %228 = OpAccessChain %51 %71 
					                                         f32 %229 = OpLoad %228 
					                                 Output f32* %230 = OpAccessChain vs_TEXCOORD3 %122 
					                                                      OpStore %230 %229 
					                                Private f32* %231 = OpAccessChain %45 %115 
					                                         f32 %232 = OpLoad %231 
					                                 Output f32* %233 = OpAccessChain vs_TEXCOORD2 %115 
					                                                      OpStore %233 %232 
					                                Private f32* %234 = OpAccessChain %45 %122 
					                                         f32 %235 = OpLoad %234 
					                                 Output f32* %236 = OpAccessChain vs_TEXCOORD3 %115 
					                                                      OpStore %236 %235 
					                                Private f32* %237 = OpAccessChain %185 %71 
					                                         f32 %238 = OpLoad %237 
					                                 Output f32* %239 = OpAccessChain vs_TEXCOORD2 %71 
					                                                      OpStore %239 %238 
					                                Private f32* %240 = OpAccessChain %185 %115 
					                                         f32 %241 = OpLoad %240 
					                                 Output f32* %242 = OpAccessChain vs_TEXCOORD3 %71 
					                                                      OpStore %242 %241 
					                              Uniform f32_4* %244 = OpAccessChain %22 %24 %47 
					                                       f32_4 %245 = OpLoad %244 
					                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
					                                       f32_4 %247 = OpLoad %11 
					                                       f32_3 %248 = OpVectorShuffle %247 %247 3 3 3 
					                                       f32_3 %249 = OpFMul %246 %248 
					                                       f32_4 %250 = OpLoad %9 
					                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
					                                       f32_3 %252 = OpFAdd %249 %251 
					                                                      OpStore vs_TEXCOORD4 %252 
					                              Uniform f32_4* %253 = OpAccessChain %22 %24 %47 
					                                       f32_4 %254 = OpLoad %253 
					                                       f32_4 %255 = OpLoad %11 
					                                       f32_4 %256 = OpVectorShuffle %255 %255 3 3 3 3 
					                                       f32_4 %257 = OpFMul %254 %256 
					                                       f32_4 %258 = OpLoad %9 
					                                       f32_4 %259 = OpFAdd %257 %258 
					                                                      OpStore %9 %259 
					                                       f32_4 %262 = OpLoad %261 
					                                                      OpStore %260 %262 
					                                                      OpStore vs_TEXCOORD5 %265 
					                                       f32_4 %266 = OpLoad %9 
					                                       f32_3 %267 = OpVectorShuffle %266 %266 1 1 1 
					                              Uniform f32_4* %269 = OpAccessChain %22 %268 %25 
					                                       f32_4 %270 = OpLoad %269 
					                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
					                                       f32_3 %272 = OpFMul %267 %271 
					                                       f32_4 %273 = OpLoad %45 
					                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
					                                                      OpStore %45 %274 
					                              Uniform f32_4* %275 = OpAccessChain %22 %268 %24 
					                                       f32_4 %276 = OpLoad %275 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
					                                       f32_4 %278 = OpLoad %9 
					                                       f32_3 %279 = OpVectorShuffle %278 %278 0 0 0 
					                                       f32_3 %280 = OpFMul %277 %279 
					                                       f32_4 %281 = OpLoad %45 
					                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
					                                       f32_3 %283 = OpFAdd %280 %282 
					                                       f32_4 %284 = OpLoad %45 
					                                       f32_4 %285 = OpVectorShuffle %284 %283 4 5 6 3 
					                                                      OpStore %45 %285 
					                              Uniform f32_4* %286 = OpAccessChain %22 %268 %37 
					                                       f32_4 %287 = OpLoad %286 
					                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
					                                       f32_4 %289 = OpLoad %9 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 2 2 2 
					                                       f32_3 %291 = OpFMul %288 %290 
					                                       f32_4 %292 = OpLoad %45 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
					                                       f32_3 %294 = OpFAdd %291 %293 
					                                       f32_4 %295 = OpLoad %9 
					                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
					                                                      OpStore %9 %296 
					                              Uniform f32_4* %298 = OpAccessChain %22 %268 %47 
					                                       f32_4 %299 = OpLoad %298 
					                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
					                                       f32_4 %301 = OpLoad %9 
					                                       f32_3 %302 = OpVectorShuffle %301 %301 3 3 3 
					                                       f32_3 %303 = OpFMul %300 %302 
					                                       f32_4 %304 = OpLoad %9 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
					                                       f32_3 %306 = OpFAdd %303 %305 
					                                                      OpStore vs_TEXCOORD6 %306 
					                                 Output f32* %307 = OpAccessChain %75 %24 %71 
					                                         f32 %308 = OpLoad %307 
					                                         f32 %309 = OpFNegate %308 
					                                 Output f32* %310 = OpAccessChain %75 %24 %71 
					                                                      OpStore %310 %309 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 438
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %22 %66 %72 %79 %102 %405 %412 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 DescriptorSet 12 
					                                                      OpDecorate %12 Binding 12 
					                                                      OpDecorate %16 DescriptorSet 16 
					                                                      OpDecorate %16 Binding 16 
					                                                      OpDecorate vs_TEXCOORD0 Location 22 
					                                                      OpDecorate vs_TEXCOORD1 Location 66 
					                                                      OpDecorate vs_TEXCOORD2 Location 72 
					                                                      OpDecorate vs_TEXCOORD3 Location 79 
					                                                      OpDecorate vs_TEXCOORD4 Location 102 
					                                                      OpDecorate %106 ArrayStride 106 
					                                                      OpMemberDecorate %107 0 Offset 107 
					                                                      OpMemberDecorate %107 1 Offset 107 
					                                                      OpMemberDecorate %107 2 Offset 107 
					                                                      OpMemberDecorate %107 3 Offset 107 
					                                                      OpMemberDecorate %107 4 Offset 107 
					                                                      OpDecorate %107 Block 
					                                                      OpDecorate %109 DescriptorSet 109 
					                                                      OpDecorate %109 Binding 109 
					                                                      OpDecorate %313 DescriptorSet 313 
					                                                      OpDecorate %313 Binding 313 
					                                                      OpDecorate %315 DescriptorSet 315 
					                                                      OpDecorate %315 Binding 315 
					                                                      OpDecorate %390 DescriptorSet 390 
					                                                      OpDecorate %390 Binding 390 
					                                                      OpDecorate %392 DescriptorSet 392 
					                                                      OpDecorate %392 Binding 392 
					                                                      OpDecorate %405 Location 405 
					                                                      OpDecorate %412 Location 412 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %11 = OpTypePointer UniformConstant %10 
					         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                              %14 = OpTypeSampler 
					                                              %15 = OpTypePointer UniformConstant %14 
					                     UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                              %18 = OpTypeSampledImage %10 
					                                              %20 = OpTypeVector %6 2 
					                                              %21 = OpTypePointer Input %20 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                              %25 = OpTypeVector %6 3 
					                                              %29 = OpTypeInt 32 0 
					                                          u32 %30 = OpConstant 2 
					                                              %31 = OpTypePointer Private %6 
					                                          u32 %34 = OpConstant 0 
					                                          f32 %41 = OpConstant 3,674022E-40 
					                                        f32_2 %42 = OpConstantComposite %41 %41 
					                                          f32 %44 = OpConstant 3,674022E-40 
					                                        f32_2 %45 = OpConstantComposite %44 %44 
					                                 Private f32* %49 = OpVariable Private 
					                                          f32 %56 = OpConstant 3,674022E-40 
					                               Private f32_4* %64 = OpVariable Private 
					                                              %65 = OpTypePointer Input %25 
					                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %77 = OpConstant 1 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                                         u32 %105 = OpConstant 4 
					                                             %106 = OpTypeArray %7 %105 
					                                             %107 = OpTypeStruct %25 %7 %7 %106 %7 
					                                             %108 = OpTypePointer Uniform %107 
					Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4;}* %109 = OpVariable Uniform 
					                                             %110 = OpTypeInt 32 1 
					                                         i32 %111 = OpConstant 0 
					                                             %112 = OpTypePointer Uniform %25 
					                                Private f32* %137 = OpVariable Private 
					                                             %142 = OpTypePointer Private %25 
					                              Private f32_3* %143 = OpVariable Private 
					                                         i32 %160 = OpConstant 1 
					                                             %161 = OpTypePointer Uniform %7 
					                                Private f32* %166 = OpVariable Private 
					                                         f32 %191 = OpConstant 3,674022E-40 
					                                         f32 %209 = OpConstant 3,674022E-40 
					                                Private f32* %221 = OpVariable Private 
					                                Private f32* %227 = OpVariable Private 
					                                         f32 %233 = OpConstant 3,674022E-40 
					                                Private f32* %240 = OpVariable Private 
					                                Private f32* %245 = OpVariable Private 
					                                         i32 %269 = OpConstant 3 
					                                         i32 %287 = OpConstant 2 
					        UniformConstant read_only Texture2D* %313 = OpVariable UniformConstant 
					                    UniformConstant sampler* %315 = OpVariable UniformConstant 
					                                         f32 %342 = OpConstant 3,674022E-40 
					                                         f32 %344 = OpConstant 3,674022E-40 
					                                         f32 %354 = OpConstant 3,674022E-40 
					                                         f32 %379 = OpConstant 3,674022E-40 
					                                         f32 %381 = OpConstant 3,674022E-40 
					        UniformConstant read_only Texture2D* %390 = OpVariable UniformConstant 
					                    UniformConstant sampler* %392 = OpVariable UniformConstant 
					                                         i32 %398 = OpConstant 4 
					                                             %404 = OpTypePointer Input %7 
					                                Input f32_4* %405 = OpVariable Input 
					                                             %411 = OpTypePointer Output %7 
					                               Output f32_4* %412 = OpVariable Output 
					                                         u32 %413 = OpConstant 3 
					                                             %416 = OpTypePointer Input %6 
					                                             %420 = OpTypePointer Output %6 
					                                       f32_3 %424 = OpConstantComposite %379 %379 %379 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                          read_only Texture2D %13 = OpLoad %12 
					                                      sampler %17 = OpLoad %16 
					                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
					                                        f32_3 %26 = OpVectorShuffle %24 %24 0 1 3 
					                                        f32_4 %27 = OpLoad %9 
					                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
					                                                      OpStore %9 %28 
					                                 Private f32* %32 = OpAccessChain %9 %30 
					                                          f32 %33 = OpLoad %32 
					                                 Private f32* %35 = OpAccessChain %9 %34 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %37 = OpFMul %33 %36 
					                                 Private f32* %38 = OpAccessChain %9 %34 
					                                                      OpStore %38 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
					                                        f32_2 %43 = OpFMul %40 %42 
					                                        f32_2 %46 = OpFAdd %43 %45 
					                                        f32_4 %47 = OpLoad %9 
					                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
					                                                      OpStore %9 %48 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
					                                          f32 %54 = OpDot %51 %53 
					                                                      OpStore %49 %54 
					                                          f32 %55 = OpLoad %49 
					                                          f32 %57 = OpExtInst %1 37 %55 %56 
					                                                      OpStore %49 %57 
					                                          f32 %58 = OpLoad %49 
					                                          f32 %59 = OpFNegate %58 
					                                          f32 %60 = OpFAdd %59 %56 
					                                                      OpStore %49 %60 
					                                          f32 %61 = OpLoad %49 
					                                          f32 %62 = OpExtInst %1 31 %61 
					                                 Private f32* %63 = OpAccessChain %9 %30 
					                                                      OpStore %63 %62 
					                                        f32_3 %67 = OpLoad vs_TEXCOORD1 
					                                        f32_4 %68 = OpLoad %9 
					                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
					                                          f32 %70 = OpDot %67 %69 
					                                 Private f32* %71 = OpAccessChain %64 %34 
					                                                      OpStore %71 %70 
					                                        f32_3 %73 = OpLoad vs_TEXCOORD2 
					                                        f32_4 %74 = OpLoad %9 
					                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
					                                          f32 %76 = OpDot %73 %75 
					                                 Private f32* %78 = OpAccessChain %64 %77 
					                                                      OpStore %78 %76 
					                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
					                                        f32_4 %81 = OpLoad %9 
					                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
					                                          f32 %83 = OpDot %80 %82 
					                                 Private f32* %84 = OpAccessChain %64 %30 
					                                                      OpStore %84 %83 
					                                        f32_4 %85 = OpLoad %64 
					                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
					                                        f32_4 %87 = OpLoad %64 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                          f32 %89 = OpDot %86 %88 
					                                 Private f32* %90 = OpAccessChain %9 %34 
					                                                      OpStore %90 %89 
					                                 Private f32* %91 = OpAccessChain %9 %34 
					                                          f32 %92 = OpLoad %91 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                 Private f32* %94 = OpAccessChain %9 %34 
					                                                      OpStore %94 %93 
					                                        f32_4 %95 = OpLoad %9 
					                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
					                                        f32_4 %97 = OpLoad %64 
					                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
					                                        f32_3 %99 = OpFMul %96 %98 
					                                       f32_4 %100 = OpLoad %9 
					                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
					                                                      OpStore %9 %101 
					                                       f32_3 %103 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %104 = OpFNegate %103 
					                              Uniform f32_3* %113 = OpAccessChain %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                                       f32_3 %115 = OpFAdd %104 %114 
					                                       f32_4 %116 = OpLoad %64 
					                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
					                                                      OpStore %64 %117 
					                                       f32_4 %118 = OpLoad %64 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_4 %120 = OpLoad %64 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
					                                         f32 %122 = OpDot %119 %121 
					                                                      OpStore %49 %122 
					                                         f32 %123 = OpLoad %49 
					                                         f32 %124 = OpExtInst %1 32 %123 
					                                                      OpStore %49 %124 
					                                         f32 %125 = OpLoad %49 
					                                       f32_3 %126 = OpCompositeConstruct %125 %125 %125 
					                                       f32_4 %127 = OpLoad %64 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                       f32_3 %129 = OpFMul %126 %128 
					                                       f32_4 %130 = OpLoad %64 
					                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
					                                                      OpStore %64 %131 
					                                       f32_4 %132 = OpLoad %9 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                       f32_4 %134 = OpLoad %64 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %133 %135 
					                                                      OpStore %49 %136 
					                                         f32 %138 = OpLoad %49 
					                                         f32 %139 = OpExtInst %1 4 %138 
					                                         f32 %140 = OpFNegate %139 
					                                         f32 %141 = OpFAdd %140 %56 
					                                                      OpStore %137 %141 
					                                         f32 %144 = OpLoad %137 
					                                         f32 %145 = OpLoad %137 
					                                         f32 %146 = OpFMul %144 %145 
					                                Private f32* %147 = OpAccessChain %143 %34 
					                                                      OpStore %147 %146 
					                                Private f32* %148 = OpAccessChain %143 %34 
					                                         f32 %149 = OpLoad %148 
					                                Private f32* %150 = OpAccessChain %143 %34 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFMul %149 %151 
					                                Private f32* %153 = OpAccessChain %143 %34 
					                                                      OpStore %153 %152 
					                                         f32 %154 = OpLoad %137 
					                                Private f32* %155 = OpAccessChain %143 %34 
					                                         f32 %156 = OpLoad %155 
					                                         f32 %157 = OpFMul %154 %156 
					                                                      OpStore %137 %157 
					                                       f32_3 %158 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %159 = OpFNegate %158 
					                              Uniform f32_4* %162 = OpAccessChain %109 %160 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFAdd %159 %164 
					                                                      OpStore %143 %165 
					                                       f32_3 %167 = OpLoad %143 
					                                       f32_3 %168 = OpLoad %143 
					                                         f32 %169 = OpDot %167 %168 
					                                                      OpStore %166 %169 
					                                         f32 %170 = OpLoad %166 
					                                         f32 %171 = OpExtInst %1 32 %170 
					                                                      OpStore %166 %171 
					                                       f32_3 %172 = OpLoad %143 
					                                         f32 %173 = OpLoad %166 
					                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
					                                       f32_3 %175 = OpFMul %172 %174 
					                                       f32_4 %176 = OpLoad %64 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_3 %178 = OpFAdd %175 %177 
					                                       f32_4 %179 = OpLoad %64 
					                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
					                                                      OpStore %64 %180 
					                                         f32 %181 = OpLoad %166 
					                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
					                                       f32_3 %183 = OpLoad %143 
					                                       f32_3 %184 = OpFMul %182 %183 
					                                                      OpStore %143 %184 
					                                       f32_4 %185 = OpLoad %64 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_4 %187 = OpLoad %64 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                         f32 %189 = OpDot %186 %188 
					                                                      OpStore %166 %189 
					                                         f32 %190 = OpLoad %166 
					                                         f32 %192 = OpExtInst %1 40 %190 %191 
					                                                      OpStore %166 %192 
					                                         f32 %193 = OpLoad %166 
					                                         f32 %194 = OpExtInst %1 32 %193 
					                                                      OpStore %166 %194 
					                                       f32_4 %195 = OpLoad %64 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                         f32 %197 = OpLoad %166 
					                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
					                                       f32_3 %199 = OpFMul %196 %198 
					                                       f32_4 %200 = OpLoad %64 
					                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
					                                                      OpStore %64 %201 
					                                       f32_3 %202 = OpLoad %143 
					                                       f32_4 %203 = OpLoad %64 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
					                                         f32 %205 = OpDot %202 %204 
					                                Private f32* %206 = OpAccessChain %64 %34 
					                                                      OpStore %206 %205 
					                                Private f32* %207 = OpAccessChain %64 %34 
					                                         f32 %208 = OpLoad %207 
					                                         f32 %210 = OpExtInst %1 43 %208 %209 %56 
					                                Private f32* %211 = OpAccessChain %64 %34 
					                                                      OpStore %211 %210 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                                       f32_3 %214 = OpLoad %143 
					                                         f32 %215 = OpDot %213 %214 
					                                Private f32* %216 = OpAccessChain %9 %34 
					                                                      OpStore %216 %215 
					                                Private f32* %217 = OpAccessChain %9 %34 
					                                         f32 %218 = OpLoad %217 
					                                         f32 %219 = OpExtInst %1 43 %218 %209 %56 
					                                Private f32* %220 = OpAccessChain %9 %34 
					                                                      OpStore %220 %219 
					                                       f32_4 %222 = OpLoad %64 
					                                       f32_2 %223 = OpVectorShuffle %222 %222 0 0 
					                                       f32_4 %224 = OpLoad %64 
					                                       f32_2 %225 = OpVectorShuffle %224 %224 0 0 
					                                         f32 %226 = OpDot %223 %225 
					                                                      OpStore %221 %226 
					                                Private f32* %228 = OpAccessChain %64 %34 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFNegate %229 
					                                         f32 %231 = OpFAdd %230 %56 
					                                                      OpStore %227 %231 
					                                         f32 %232 = OpLoad %221 
					                                         f32 %234 = OpFAdd %232 %233 
					                                                      OpStore %221 %234 
					                                         f32 %235 = OpLoad %221 
					                                         f32 %236 = OpLoad %137 
					                                         f32 %237 = OpFMul %235 %236 
					                                         f32 %238 = OpFAdd %237 %56 
					                                Private f32* %239 = OpAccessChain %64 %34 
					                                                      OpStore %239 %238 
					                                Private f32* %241 = OpAccessChain %9 %34 
					                                         f32 %242 = OpLoad %241 
					                                         f32 %243 = OpFNegate %242 
					                                         f32 %244 = OpFAdd %243 %56 
					                                                      OpStore %240 %244 
					                                         f32 %246 = OpLoad %240 
					                                         f32 %247 = OpLoad %240 
					                                         f32 %248 = OpFMul %246 %247 
					                                                      OpStore %245 %248 
					                                         f32 %249 = OpLoad %245 
					                                         f32 %250 = OpLoad %245 
					                                         f32 %251 = OpFMul %249 %250 
					                                                      OpStore %245 %251 
					                                         f32 %252 = OpLoad %240 
					                                         f32 %253 = OpLoad %245 
					                                         f32 %254 = OpFMul %252 %253 
					                                                      OpStore %240 %254 
					                                         f32 %255 = OpLoad %221 
					                                         f32 %256 = OpLoad %240 
					                                         f32 %257 = OpFMul %255 %256 
					                                         f32 %258 = OpFAdd %257 %56 
					                                                      OpStore %221 %258 
					                                Private f32* %259 = OpAccessChain %64 %34 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpLoad %221 
					                                         f32 %262 = OpFMul %260 %261 
					                                                      OpStore %221 %262 
					                                Private f32* %263 = OpAccessChain %9 %34 
					                                         f32 %264 = OpLoad %263 
					                                         f32 %265 = OpLoad %221 
					                                         f32 %266 = OpFMul %264 %265 
					                                                      OpStore %221 %266 
					                                       f32_3 %267 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %268 = OpVectorShuffle %267 %267 1 1 1 
					                              Uniform f32_4* %270 = OpAccessChain %109 %269 %160 
					                                       f32_4 %271 = OpLoad %270 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
					                                       f32_3 %273 = OpFMul %268 %272 
					                                       f32_4 %274 = OpLoad %64 
					                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
					                                                      OpStore %64 %275 
					                              Uniform f32_4* %276 = OpAccessChain %109 %269 %111 
					                                       f32_4 %277 = OpLoad %276 
					                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
					                                       f32_3 %279 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %280 = OpVectorShuffle %279 %279 0 0 0 
					                                       f32_3 %281 = OpFMul %278 %280 
					                                       f32_4 %282 = OpLoad %64 
					                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
					                                       f32_3 %284 = OpFAdd %281 %283 
					                                       f32_4 %285 = OpLoad %64 
					                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
					                                                      OpStore %64 %286 
					                              Uniform f32_4* %288 = OpAccessChain %109 %269 %287 
					                                       f32_4 %289 = OpLoad %288 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
					                                       f32_3 %291 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 2 2 2 
					                                       f32_3 %293 = OpFMul %290 %292 
					                                       f32_4 %294 = OpLoad %64 
					                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
					                                       f32_3 %296 = OpFAdd %293 %295 
					                                       f32_4 %297 = OpLoad %64 
					                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 6 3 
					                                                      OpStore %64 %298 
					                                       f32_4 %299 = OpLoad %64 
					                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
					                              Uniform f32_4* %301 = OpAccessChain %109 %269 %269 
					                                       f32_4 %302 = OpLoad %301 
					                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
					                                       f32_3 %304 = OpFAdd %300 %303 
					                                       f32_4 %305 = OpLoad %64 
					                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
					                                                      OpStore %64 %306 
					                                       f32_4 %307 = OpLoad %64 
					                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
					                                       f32_4 %309 = OpLoad %64 
					                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
					                                         f32 %311 = OpDot %308 %310 
					                                Private f32* %312 = OpAccessChain %64 %34 
					                                                      OpStore %312 %311 
					                         read_only Texture2D %314 = OpLoad %313 
					                                     sampler %316 = OpLoad %315 
					                  read_only Texture2DSampled %317 = OpSampledImage %314 %316 
					                                       f32_4 %318 = OpLoad %64 
					                                       f32_2 %319 = OpVectorShuffle %318 %318 0 0 
					                                       f32_4 %320 = OpImageSampleImplicitLod %317 %319 
					                                         f32 %321 = OpCompositeExtract %320 0 
					                                Private f32* %322 = OpAccessChain %64 %34 
					                                                      OpStore %322 %321 
					                                       f32_4 %323 = OpLoad %64 
					                                       f32_3 %324 = OpVectorShuffle %323 %323 0 0 0 
					                              Uniform f32_4* %325 = OpAccessChain %109 %287 
					                                       f32_4 %326 = OpLoad %325 
					                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
					                                       f32_3 %328 = OpFMul %324 %327 
					                                       f32_4 %329 = OpLoad %64 
					                                       f32_4 %330 = OpVectorShuffle %329 %328 4 5 6 3 
					                                                      OpStore %64 %330 
					                                         f32 %331 = OpLoad %221 
					                                       f32_3 %332 = OpCompositeConstruct %331 %331 %331 
					                                       f32_4 %333 = OpLoad %64 
					                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
					                                       f32_3 %335 = OpFMul %332 %334 
					                                                      OpStore %143 %335 
					                                         f32 %336 = OpLoad %49 
					                                         f32 %337 = OpExtInst %1 4 %336 
					                                Private f32* %338 = OpAccessChain %9 %34 
					                                         f32 %339 = OpLoad %338 
					                                         f32 %340 = OpFAdd %337 %339 
					                                                      OpStore %221 %340 
					                                         f32 %341 = OpLoad %221 
					                                         f32 %343 = OpFAdd %341 %342 
					                                                      OpStore %221 %343 
					                                         f32 %345 = OpLoad %221 
					                                         f32 %346 = OpFDiv %344 %345 
					                                                      OpStore %221 %346 
					                                Private f32* %347 = OpAccessChain %9 %34 
					                                         f32 %348 = OpLoad %347 
					                                         f32 %349 = OpLoad %221 
					                                         f32 %350 = OpFMul %348 %349 
					                                Private f32* %351 = OpAccessChain %9 %34 
					                                                      OpStore %351 %350 
					                                Private f32* %352 = OpAccessChain %9 %34 
					                                         f32 %353 = OpLoad %352 
					                                         f32 %355 = OpFMul %353 %354 
					                                Private f32* %356 = OpAccessChain %9 %34 
					                                                      OpStore %356 %355 
					                                       f32_4 %357 = OpLoad %64 
					                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
					                                       f32_4 %359 = OpLoad %9 
					                                       f32_3 %360 = OpVectorShuffle %359 %359 0 0 0 
					                                       f32_3 %361 = OpFMul %358 %360 
					                                       f32_4 %362 = OpLoad %9 
					                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 2 6 
					                                                      OpStore %9 %363 
					                                         f32 %364 = OpLoad %227 
					                                         f32 %365 = OpLoad %227 
					                                         f32 %366 = OpFMul %364 %365 
					                                Private f32* %367 = OpAccessChain %64 %34 
					                                                      OpStore %367 %366 
					                                Private f32* %368 = OpAccessChain %64 %34 
					                                         f32 %369 = OpLoad %368 
					                                Private f32* %370 = OpAccessChain %64 %34 
					                                         f32 %371 = OpLoad %370 
					                                         f32 %372 = OpFMul %369 %371 
					                                Private f32* %373 = OpAccessChain %64 %34 
					                                                      OpStore %373 %372 
					                                         f32 %374 = OpLoad %227 
					                                Private f32* %375 = OpAccessChain %64 %34 
					                                         f32 %376 = OpLoad %375 
					                                         f32 %377 = OpFMul %374 %376 
					                                                      OpStore %227 %377 
					                                         f32 %378 = OpLoad %227 
					                                         f32 %380 = OpFMul %378 %379 
					                                         f32 %382 = OpFAdd %380 %381 
					                                                      OpStore %227 %382 
					                                         f32 %383 = OpLoad %227 
					                                       f32_3 %384 = OpCompositeConstruct %383 %383 %383 
					                                       f32_4 %385 = OpLoad %9 
					                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 3 
					                                       f32_3 %387 = OpFMul %384 %386 
					                                       f32_4 %388 = OpLoad %9 
					                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
					                                                      OpStore %9 %389 
					                         read_only Texture2D %391 = OpLoad %390 
					                                     sampler %393 = OpLoad %392 
					                  read_only Texture2DSampled %394 = OpSampledImage %391 %393 
					                                       f32_2 %395 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %396 = OpImageSampleImplicitLod %394 %395 
					                                                      OpStore %64 %396 
					                                       f32_4 %397 = OpLoad %64 
					                              Uniform f32_4* %399 = OpAccessChain %109 %398 
					                                       f32_4 %400 = OpLoad %399 
					                                       f32_4 %401 = OpFMul %397 %400 
					                                                      OpStore %64 %401 
					                                       f32_4 %402 = OpLoad %64 
					                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
					                                       f32_4 %406 = OpLoad %405 
					                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
					                                       f32_3 %408 = OpFMul %403 %407 
					                                       f32_4 %409 = OpLoad %64 
					                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
					                                                      OpStore %64 %410 
					                                Private f32* %414 = OpAccessChain %64 %413 
					                                         f32 %415 = OpLoad %414 
					                                  Input f32* %417 = OpAccessChain %405 %413 
					                                         f32 %418 = OpLoad %417 
					                                         f32 %419 = OpFMul %415 %418 
					                                 Output f32* %421 = OpAccessChain %412 %413 
					                                                      OpStore %421 %419 
					                                       f32_4 %422 = OpLoad %64 
					                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
					                                       f32_3 %425 = OpFMul %423 %424 
					                                       f32_4 %426 = OpLoad %64 
					                                       f32_4 %427 = OpVectorShuffle %426 %425 4 5 6 3 
					                                                      OpStore %64 %427 
					                                       f32_4 %428 = OpLoad %64 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpLoad %143 
					                                       f32_3 %431 = OpFMul %429 %430 
					                                       f32_4 %432 = OpLoad %9 
					                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
					                                       f32_3 %434 = OpFAdd %431 %433 
					                                       f32_4 %435 = OpLoad %412 
					                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 6 3 
					                                                      OpStore %412 %436 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = -abs(u_xlat9) + 1.0;
					    u_xlat6 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat6 = u_xlat6 + 9.99999975e-06;
					    u_xlat6 = 0.5 / u_xlat6;
					    u_xlat6 = u_xlat6 * 0.999999881;
					    u_xlat6 = u_xlat0.x * u_xlat6;
					    u_xlat2.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat6 = u_xlat3 * u_xlat3;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat3 = u_xlat3 * u_xlat6;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat9 = dot(vec2(u_xlat6), vec2(u_xlat6));
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat3 = u_xlat9 * u_xlat3 + 1.0;
					    u_xlat1.x = (-u_xlat0.x) + 1.0;
					    u_xlat4 = u_xlat1.x * u_xlat1.x;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * u_xlat4;
					    u_xlat9 = u_xlat9 * u_xlat1.x + 1.0;
					    u_xlat3 = u_xlat3 * u_xlat9;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat2 * _Color;
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat2.w * vs_COLOR0.w;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyw + u_xlat1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 262
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %111 %148 %220 %231 %235 %251 %252 %254 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpMemberDecorate %19 4 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate vs_TEXCOORD4 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate vs_TEXCOORD0 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %111 Location 111 
					                                                      OpDecorate %148 Location 148 
					                                                      OpDecorate vs_TEXCOORD1 Location 220 
					                                                      OpDecorate vs_TEXCOORD2 Location 231 
					                                                      OpDecorate vs_TEXCOORD3 Location 235 
					                                                      OpDecorate %251 Location 251 
					                                                      OpDecorate %252 Location 252 
					                                                      OpDecorate vs_TEXCOORD5 Location 254 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %7 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                                         i32 %101 = OpConstant 4 
					                                             %110 = OpTypePointer Input %50 
					                                Input f32_3* %111 = OpVariable Input 
					                                             %117 = OpTypePointer Private %6 
					                                         u32 %124 = OpConstant 2 
					                                         u32 %131 = OpConstant 0 
					                                Private f32* %133 = OpVariable Private 
					                                Input f32_4* %148 = OpVariable Input 
					                                             %193 = OpTypePointer Private %50 
					                              Private f32_3* %194 = OpVariable Private 
					                                         u32 %208 = OpConstant 3 
					                                             %209 = OpTypePointer Input %6 
					                                             %212 = OpTypePointer Uniform %6 
					                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
					                                             %223 = OpTypePointer Output %6 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                               Output f32_4* %251 = OpVariable Output 
					                                Input f32_4* %252 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %255 = OpConstant 3,674022E-40 
					                                       f32_4 %256 = OpConstantComposite %255 %255 %255 %255 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore vs_TEXCOORD4 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %46 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %46 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %46 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %102 = OpAccessChain %21 %101 
					                                       f32_4 %103 = OpLoad %102 
					                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
					                                       f32_2 %105 = OpFMul %100 %104 
					                              Uniform f32_4* %106 = OpAccessChain %21 %101 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
					                                       f32_2 %109 = OpFAdd %105 %108 
					                                                      OpStore vs_TEXCOORD0 %109 
					                                       f32_3 %112 = OpLoad %111 
					                              Uniform f32_4* %113 = OpAccessChain %21 %24 %23 
					                                       f32_4 %114 = OpLoad %113 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                         f32 %116 = OpDot %112 %115 
					                                Private f32* %118 = OpAccessChain %9 %81 
					                                                      OpStore %118 %116 
					                                       f32_3 %119 = OpLoad %111 
					                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
					                                       f32_4 %121 = OpLoad %120 
					                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
					                                         f32 %123 = OpDot %119 %122 
					                                Private f32* %125 = OpAccessChain %9 %124 
					                                                      OpStore %125 %123 
					                                       f32_3 %126 = OpLoad %111 
					                              Uniform f32_4* %127 = OpAccessChain %21 %24 %36 
					                                       f32_4 %128 = OpLoad %127 
					                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
					                                         f32 %130 = OpDot %126 %129 
					                                Private f32* %132 = OpAccessChain %9 %131 
					                                                      OpStore %132 %130 
					                                       f32_4 %134 = OpLoad %9 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                         f32 %138 = OpDot %135 %137 
					                                                      OpStore %133 %138 
					                                         f32 %139 = OpLoad %133 
					                                         f32 %140 = OpExtInst %1 32 %139 
					                                                      OpStore %133 %140 
					                                         f32 %141 = OpLoad %133 
					                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
					                                       f32_4 %143 = OpLoad %9 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
					                                       f32_3 %145 = OpFMul %142 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
					                                                      OpStore %9 %147 
					                                       f32_4 %149 = OpLoad %148 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 1 1 1 
					                              Uniform f32_4* %151 = OpAccessChain %21 %23 %24 
					                                       f32_4 %152 = OpLoad %151 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 1 2 0 
					                                       f32_3 %154 = OpFMul %150 %153 
					                                       f32_4 %155 = OpLoad %44 
					                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
					                                                      OpStore %44 %156 
					                              Uniform f32_4* %157 = OpAccessChain %21 %23 %23 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 1 2 0 
					                                       f32_4 %160 = OpLoad %148 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
					                                       f32_3 %162 = OpFMul %159 %161 
					                                       f32_4 %163 = OpLoad %44 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFAdd %162 %164 
					                                       f32_4 %166 = OpLoad %44 
					                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
					                                                      OpStore %44 %167 
					                              Uniform f32_4* %168 = OpAccessChain %21 %23 %36 
					                                       f32_4 %169 = OpLoad %168 
					                                       f32_3 %170 = OpVectorShuffle %169 %169 1 2 0 
					                                       f32_4 %171 = OpLoad %148 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 2 2 2 
					                                       f32_3 %173 = OpFMul %170 %172 
					                                       f32_4 %174 = OpLoad %44 
					                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
					                                       f32_3 %176 = OpFAdd %173 %175 
					                                       f32_4 %177 = OpLoad %44 
					                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
					                                                      OpStore %44 %178 
					                                       f32_4 %179 = OpLoad %44 
					                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
					                                       f32_4 %181 = OpLoad %44 
					                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
					                                         f32 %183 = OpDot %180 %182 
					                                                      OpStore %133 %183 
					                                         f32 %184 = OpLoad %133 
					                                         f32 %185 = OpExtInst %1 32 %184 
					                                                      OpStore %133 %185 
					                                         f32 %186 = OpLoad %133 
					                                       f32_3 %187 = OpCompositeConstruct %186 %186 %186 
					                                       f32_4 %188 = OpLoad %44 
					                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
					                                       f32_3 %190 = OpFMul %187 %189 
					                                       f32_4 %191 = OpLoad %44 
					                                       f32_4 %192 = OpVectorShuffle %191 %190 4 5 6 3 
					                                                      OpStore %44 %192 
					                                       f32_4 %195 = OpLoad %9 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                       f32_4 %197 = OpLoad %44 
					                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
					                                       f32_3 %199 = OpFMul %196 %198 
					                                                      OpStore %194 %199 
					                                       f32_4 %200 = OpLoad %9 
					                                       f32_3 %201 = OpVectorShuffle %200 %200 2 0 1 
					                                       f32_4 %202 = OpLoad %44 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 1 2 0 
					                                       f32_3 %204 = OpFMul %201 %203 
					                                       f32_3 %205 = OpLoad %194 
					                                       f32_3 %206 = OpFNegate %205 
					                                       f32_3 %207 = OpFAdd %204 %206 
					                                                      OpStore %194 %207 
					                                  Input f32* %210 = OpAccessChain %148 %208 
					                                         f32 %211 = OpLoad %210 
					                                Uniform f32* %213 = OpAccessChain %21 %36 %208 
					                                         f32 %214 = OpLoad %213 
					                                         f32 %215 = OpFMul %211 %214 
					                                                      OpStore %133 %215 
					                                         f32 %216 = OpLoad %133 
					                                       f32_3 %217 = OpCompositeConstruct %216 %216 %216 
					                                       f32_3 %218 = OpLoad %194 
					                                       f32_3 %219 = OpFMul %217 %218 
					                                                      OpStore %194 %219 
					                                Private f32* %221 = OpAccessChain %194 %131 
					                                         f32 %222 = OpLoad %221 
					                                 Output f32* %224 = OpAccessChain vs_TEXCOORD1 %81 
					                                                      OpStore %224 %222 
					                                Private f32* %225 = OpAccessChain %44 %124 
					                                         f32 %226 = OpLoad %225 
					                                 Output f32* %227 = OpAccessChain vs_TEXCOORD1 %131 
					                                                      OpStore %227 %226 
					                                Private f32* %228 = OpAccessChain %9 %81 
					                                         f32 %229 = OpLoad %228 
					                                 Output f32* %230 = OpAccessChain vs_TEXCOORD1 %124 
					                                                      OpStore %230 %229 
					                                Private f32* %232 = OpAccessChain %44 %131 
					                                         f32 %233 = OpLoad %232 
					                                 Output f32* %234 = OpAccessChain vs_TEXCOORD2 %131 
					                                                      OpStore %234 %233 
					                                Private f32* %236 = OpAccessChain %44 %81 
					                                         f32 %237 = OpLoad %236 
					                                 Output f32* %238 = OpAccessChain vs_TEXCOORD3 %131 
					                                                      OpStore %238 %237 
					                                Private f32* %239 = OpAccessChain %9 %124 
					                                         f32 %240 = OpLoad %239 
					                                 Output f32* %241 = OpAccessChain vs_TEXCOORD2 %124 
					                                                      OpStore %241 %240 
					                                Private f32* %242 = OpAccessChain %9 %131 
					                                         f32 %243 = OpLoad %242 
					                                 Output f32* %244 = OpAccessChain vs_TEXCOORD3 %124 
					                                                      OpStore %244 %243 
					                                Private f32* %245 = OpAccessChain %194 %81 
					                                         f32 %246 = OpLoad %245 
					                                 Output f32* %247 = OpAccessChain vs_TEXCOORD2 %81 
					                                                      OpStore %247 %246 
					                                Private f32* %248 = OpAccessChain %194 %124 
					                                         f32 %249 = OpLoad %248 
					                                 Output f32* %250 = OpAccessChain vs_TEXCOORD3 %81 
					                                                      OpStore %250 %249 
					                                       f32_4 %253 = OpLoad %252 
					                                                      OpStore %251 %253 
					                                                      OpStore vs_TEXCOORD5 %256 
					                                 Output f32* %257 = OpAccessChain %85 %23 %81 
					                                         f32 %258 = OpLoad %257 
					                                         f32 %259 = OpFNegate %258 
					                                 Output f32* %260 = OpAccessChain %85 %23 %81 
					                                                      OpStore %260 %259 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 339
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %22 %67 %73 %80 %100 %306 %313 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 DescriptorSet 12 
					                                                      OpDecorate %12 Binding 12 
					                                                      OpDecorate %16 DescriptorSet 16 
					                                                      OpDecorate %16 Binding 16 
					                                                      OpDecorate vs_TEXCOORD0 Location 22 
					                                                      OpDecorate vs_TEXCOORD1 Location 67 
					                                                      OpDecorate vs_TEXCOORD2 Location 73 
					                                                      OpDecorate vs_TEXCOORD3 Location 80 
					                                                      OpDecorate vs_TEXCOORD4 Location 100 
					                                                      OpMemberDecorate %103 0 Offset 103 
					                                                      OpMemberDecorate %103 1 Offset 103 
					                                                      OpMemberDecorate %103 2 Offset 103 
					                                                      OpMemberDecorate %103 3 Offset 103 
					                                                      OpDecorate %103 Block 
					                                                      OpDecorate %105 DescriptorSet 105 
					                                                      OpDecorate %105 Binding 105 
					                                                      OpDecorate %291 DescriptorSet 291 
					                                                      OpDecorate %291 Binding 291 
					                                                      OpDecorate %293 DescriptorSet 293 
					                                                      OpDecorate %293 Binding 293 
					                                                      OpDecorate %306 Location 306 
					                                                      OpDecorate %313 Location 313 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %11 = OpTypePointer UniformConstant %10 
					         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                              %14 = OpTypeSampler 
					                                              %15 = OpTypePointer UniformConstant %14 
					                     UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                              %18 = OpTypeSampledImage %10 
					                                              %20 = OpTypeVector %6 2 
					                                              %21 = OpTypePointer Input %20 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                              %25 = OpTypeVector %6 3 
					                                              %29 = OpTypeInt 32 0 
					                                          u32 %30 = OpConstant 2 
					                                              %31 = OpTypePointer Private %6 
					                                          u32 %34 = OpConstant 0 
					                                          f32 %41 = OpConstant 3,674022E-40 
					                                        f32_2 %42 = OpConstantComposite %41 %41 
					                                          f32 %44 = OpConstant 3,674022E-40 
					                                        f32_2 %45 = OpConstantComposite %44 %44 
					                                 Private f32* %49 = OpVariable Private 
					                                          f32 %56 = OpConstant 3,674022E-40 
					                                              %64 = OpTypePointer Private %25 
					                               Private f32_3* %65 = OpVariable Private 
					                                              %66 = OpTypePointer Input %25 
					                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %78 = OpConstant 1 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                                             %103 = OpTypeStruct %25 %7 %7 %7 
					                                             %104 = OpTypePointer Uniform %103 
					Uniform struct {f32_3; f32_4; f32_4; f32_4;}* %105 = OpVariable Uniform 
					                                             %106 = OpTypeInt 32 1 
					                                         i32 %107 = OpConstant 0 
					                                             %108 = OpTypePointer Uniform %25 
					                              Private f32_4* %117 = OpVariable Private 
					                                         i32 %128 = OpConstant 1 
					                                             %129 = OpTypePointer Uniform %7 
					                                         f32 %148 = OpConstant 3,674022E-40 
					                                Private f32* %151 = OpVariable Private 
					                                Private f32* %156 = OpVariable Private 
					                                         f32 %163 = OpConstant 3,674022E-40 
					                                         f32 %165 = OpConstant 3,674022E-40 
					                                         f32 %173 = OpConstant 3,674022E-40 
					                                         i32 %177 = OpConstant 2 
					                                         f32 %197 = OpConstant 3,674022E-40 
					                                         f32 %221 = OpConstant 3,674022E-40 
					                                Private f32* %232 = OpVariable Private 
					                                         f32 %282 = OpConstant 3,674022E-40 
					                                         f32 %284 = OpConstant 3,674022E-40 
					        UniformConstant read_only Texture2D* %291 = OpVariable UniformConstant 
					                    UniformConstant sampler* %293 = OpVariable UniformConstant 
					                                         i32 %299 = OpConstant 3 
					                                             %305 = OpTypePointer Input %7 
					                                Input f32_4* %306 = OpVariable Input 
					                                             %312 = OpTypePointer Output %7 
					                               Output f32_4* %313 = OpVariable Output 
					                                         u32 %314 = OpConstant 3 
					                                             %317 = OpTypePointer Input %6 
					                                             %321 = OpTypePointer Output %6 
					                                       f32_3 %325 = OpConstantComposite %282 %282 %282 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                          read_only Texture2D %13 = OpLoad %12 
					                                      sampler %17 = OpLoad %16 
					                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
					                                        f32_3 %26 = OpVectorShuffle %24 %24 0 1 3 
					                                        f32_4 %27 = OpLoad %9 
					                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
					                                                      OpStore %9 %28 
					                                 Private f32* %32 = OpAccessChain %9 %30 
					                                          f32 %33 = OpLoad %32 
					                                 Private f32* %35 = OpAccessChain %9 %34 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %37 = OpFMul %33 %36 
					                                 Private f32* %38 = OpAccessChain %9 %34 
					                                                      OpStore %38 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
					                                        f32_2 %43 = OpFMul %40 %42 
					                                        f32_2 %46 = OpFAdd %43 %45 
					                                        f32_4 %47 = OpLoad %9 
					                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
					                                                      OpStore %9 %48 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
					                                          f32 %54 = OpDot %51 %53 
					                                                      OpStore %49 %54 
					                                          f32 %55 = OpLoad %49 
					                                          f32 %57 = OpExtInst %1 37 %55 %56 
					                                                      OpStore %49 %57 
					                                          f32 %58 = OpLoad %49 
					                                          f32 %59 = OpFNegate %58 
					                                          f32 %60 = OpFAdd %59 %56 
					                                                      OpStore %49 %60 
					                                          f32 %61 = OpLoad %49 
					                                          f32 %62 = OpExtInst %1 31 %61 
					                                 Private f32* %63 = OpAccessChain %9 %30 
					                                                      OpStore %63 %62 
					                                        f32_3 %68 = OpLoad vs_TEXCOORD1 
					                                        f32_4 %69 = OpLoad %9 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
					                                          f32 %71 = OpDot %68 %70 
					                                 Private f32* %72 = OpAccessChain %65 %34 
					                                                      OpStore %72 %71 
					                                        f32_3 %74 = OpLoad vs_TEXCOORD2 
					                                        f32_4 %75 = OpLoad %9 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
					                                          f32 %77 = OpDot %74 %76 
					                                 Private f32* %79 = OpAccessChain %65 %78 
					                                                      OpStore %79 %77 
					                                        f32_3 %81 = OpLoad vs_TEXCOORD3 
					                                        f32_4 %82 = OpLoad %9 
					                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
					                                          f32 %84 = OpDot %81 %83 
					                                 Private f32* %85 = OpAccessChain %65 %30 
					                                                      OpStore %85 %84 
					                                        f32_3 %86 = OpLoad %65 
					                                        f32_3 %87 = OpLoad %65 
					                                          f32 %88 = OpDot %86 %87 
					                                 Private f32* %89 = OpAccessChain %9 %34 
					                                                      OpStore %89 %88 
					                                 Private f32* %90 = OpAccessChain %9 %34 
					                                          f32 %91 = OpLoad %90 
					                                          f32 %92 = OpExtInst %1 32 %91 
					                                 Private f32* %93 = OpAccessChain %9 %34 
					                                                      OpStore %93 %92 
					                                        f32_4 %94 = OpLoad %9 
					                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
					                                        f32_3 %96 = OpLoad %65 
					                                        f32_3 %97 = OpFMul %95 %96 
					                                        f32_4 %98 = OpLoad %9 
					                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 6 3 
					                                                      OpStore %9 %99 
					                                       f32_3 %101 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %102 = OpFNegate %101 
					                              Uniform f32_3* %109 = OpAccessChain %105 %107 
					                                       f32_3 %110 = OpLoad %109 
					                                       f32_3 %111 = OpFAdd %102 %110 
					                                                      OpStore %65 %111 
					                                       f32_3 %112 = OpLoad %65 
					                                       f32_3 %113 = OpLoad %65 
					                                         f32 %114 = OpDot %112 %113 
					                                                      OpStore %49 %114 
					                                         f32 %115 = OpLoad %49 
					                                         f32 %116 = OpExtInst %1 32 %115 
					                                                      OpStore %49 %116 
					                                         f32 %118 = OpLoad %49 
					                                       f32_3 %119 = OpCompositeConstruct %118 %118 %118 
					                                       f32_3 %120 = OpLoad %65 
					                                       f32_3 %121 = OpFMul %119 %120 
					                                       f32_4 %122 = OpLoad %117 
					                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
					                                                      OpStore %117 %123 
					                                       f32_3 %124 = OpLoad %65 
					                                         f32 %125 = OpLoad %49 
					                                       f32_3 %126 = OpCompositeConstruct %125 %125 %125 
					                                       f32_3 %127 = OpFMul %124 %126 
					                              Uniform f32_4* %130 = OpAccessChain %105 %128 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_3 %133 = OpFAdd %127 %132 
					                                                      OpStore %65 %133 
					                                       f32_4 %134 = OpLoad %9 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                       f32_4 %136 = OpLoad %117 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                         f32 %138 = OpDot %135 %137 
					                                                      OpStore %49 %138 
					                                       f32_4 %139 = OpLoad %9 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                              Uniform f32_4* %141 = OpAccessChain %105 %128 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %140 %143 
					                                Private f32* %145 = OpAccessChain %9 %34 
					                                                      OpStore %145 %144 
					                                Private f32* %146 = OpAccessChain %9 %34 
					                                         f32 %147 = OpLoad %146 
					                                         f32 %149 = OpExtInst %1 43 %147 %148 %56 
					                                Private f32* %150 = OpAccessChain %9 %34 
					                                                      OpStore %150 %149 
					                                         f32 %152 = OpLoad %49 
					                                         f32 %153 = OpExtInst %1 4 %152 
					                                         f32 %154 = OpFNegate %153 
					                                         f32 %155 = OpFAdd %154 %56 
					                                                      OpStore %151 %155 
					                                         f32 %157 = OpLoad %49 
					                                         f32 %158 = OpExtInst %1 4 %157 
					                                Private f32* %159 = OpAccessChain %9 %34 
					                                         f32 %160 = OpLoad %159 
					                                         f32 %161 = OpFAdd %158 %160 
					                                                      OpStore %156 %161 
					                                         f32 %162 = OpLoad %156 
					                                         f32 %164 = OpFAdd %162 %163 
					                                                      OpStore %156 %164 
					                                         f32 %166 = OpLoad %156 
					                                         f32 %167 = OpFDiv %165 %166 
					                                                      OpStore %156 %167 
					                                Private f32* %168 = OpAccessChain %9 %34 
					                                         f32 %169 = OpLoad %168 
					                                         f32 %170 = OpLoad %156 
					                                         f32 %171 = OpFMul %169 %170 
					                                                      OpStore %156 %171 
					                                         f32 %172 = OpLoad %156 
					                                         f32 %174 = OpFMul %172 %173 
					                                                      OpStore %156 %174 
					                                         f32 %175 = OpLoad %156 
					                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
					                              Uniform f32_4* %178 = OpAccessChain %105 %177 
					                                       f32_4 %179 = OpLoad %178 
					                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
					                                       f32_3 %181 = OpFMul %176 %180 
					                                       f32_4 %182 = OpLoad %117 
					                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
					                                                      OpStore %117 %183 
					                                         f32 %184 = OpLoad %151 
					                                         f32 %185 = OpLoad %151 
					                                         f32 %186 = OpFMul %184 %185 
					                                                      OpStore %156 %186 
					                                         f32 %187 = OpLoad %156 
					                                         f32 %188 = OpLoad %156 
					                                         f32 %189 = OpFMul %187 %188 
					                                                      OpStore %156 %189 
					                                         f32 %190 = OpLoad %151 
					                                         f32 %191 = OpLoad %156 
					                                         f32 %192 = OpFMul %190 %191 
					                                                      OpStore %151 %192 
					                                       f32_3 %193 = OpLoad %65 
					                                       f32_3 %194 = OpLoad %65 
					                                         f32 %195 = OpDot %193 %194 
					                                                      OpStore %156 %195 
					                                         f32 %196 = OpLoad %156 
					                                         f32 %198 = OpExtInst %1 40 %196 %197 
					                                                      OpStore %156 %198 
					                                         f32 %199 = OpLoad %156 
					                                         f32 %200 = OpExtInst %1 32 %199 
					                                                      OpStore %156 %200 
					                                         f32 %201 = OpLoad %156 
					                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
					                                       f32_3 %203 = OpLoad %65 
					                                       f32_3 %204 = OpFMul %202 %203 
					                                                      OpStore %65 %204 
					                              Uniform f32_4* %205 = OpAccessChain %105 %128 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
					                                       f32_3 %208 = OpLoad %65 
					                                         f32 %209 = OpDot %207 %208 
					                                                      OpStore %156 %209 
					                                         f32 %210 = OpLoad %156 
					                                         f32 %211 = OpExtInst %1 43 %210 %148 %56 
					                                                      OpStore %156 %211 
					                                         f32 %212 = OpLoad %156 
					                                       f32_2 %213 = OpCompositeConstruct %212 %212 
					                                         f32 %214 = OpLoad %156 
					                                       f32_2 %215 = OpCompositeConstruct %214 %214 
					                                         f32 %216 = OpDot %213 %215 
					                                                      OpStore %49 %216 
					                                         f32 %217 = OpLoad %156 
					                                         f32 %218 = OpFNegate %217 
					                                         f32 %219 = OpFAdd %218 %56 
					                                                      OpStore %156 %219 
					                                         f32 %220 = OpLoad %49 
					                                         f32 %222 = OpFAdd %220 %221 
					                                                      OpStore %49 %222 
					                                         f32 %223 = OpLoad %49 
					                                         f32 %224 = OpLoad %151 
					                                         f32 %225 = OpFMul %223 %224 
					                                         f32 %226 = OpFAdd %225 %56 
					                                                      OpStore %151 %226 
					                                Private f32* %227 = OpAccessChain %9 %34 
					                                         f32 %228 = OpLoad %227 
					                                         f32 %229 = OpFNegate %228 
					                                         f32 %230 = OpFAdd %229 %56 
					                                Private f32* %231 = OpAccessChain %65 %34 
					                                                      OpStore %231 %230 
					                                Private f32* %233 = OpAccessChain %65 %34 
					                                         f32 %234 = OpLoad %233 
					                                Private f32* %235 = OpAccessChain %65 %34 
					                                         f32 %236 = OpLoad %235 
					                                         f32 %237 = OpFMul %234 %236 
					                                                      OpStore %232 %237 
					                                         f32 %238 = OpLoad %232 
					                                         f32 %239 = OpLoad %232 
					                                         f32 %240 = OpFMul %238 %239 
					                                                      OpStore %232 %240 
					                                Private f32* %241 = OpAccessChain %65 %34 
					                                         f32 %242 = OpLoad %241 
					                                         f32 %243 = OpLoad %232 
					                                         f32 %244 = OpFMul %242 %243 
					                                Private f32* %245 = OpAccessChain %65 %34 
					                                                      OpStore %245 %244 
					                                         f32 %246 = OpLoad %49 
					                                Private f32* %247 = OpAccessChain %65 %34 
					                                         f32 %248 = OpLoad %247 
					                                         f32 %249 = OpFMul %246 %248 
					                                         f32 %250 = OpFAdd %249 %56 
					                                                      OpStore %49 %250 
					                                         f32 %251 = OpLoad %151 
					                                         f32 %252 = OpLoad %49 
					                                         f32 %253 = OpFMul %251 %252 
					                                                      OpStore %151 %253 
					                                Private f32* %254 = OpAccessChain %9 %34 
					                                         f32 %255 = OpLoad %254 
					                                         f32 %256 = OpLoad %151 
					                                         f32 %257 = OpFMul %255 %256 
					                                Private f32* %258 = OpAccessChain %9 %34 
					                                                      OpStore %258 %257 
					                                       f32_4 %259 = OpLoad %9 
					                                       f32_3 %260 = OpVectorShuffle %259 %259 0 0 0 
					                              Uniform f32_4* %261 = OpAccessChain %105 %177 
					                                       f32_4 %262 = OpLoad %261 
					                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
					                                       f32_3 %264 = OpFMul %260 %263 
					                                       f32_4 %265 = OpLoad %9 
					                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 2 6 
					                                                      OpStore %9 %266 
					                                         f32 %267 = OpLoad %156 
					                                         f32 %268 = OpLoad %156 
					                                         f32 %269 = OpFMul %267 %268 
					                                Private f32* %270 = OpAccessChain %65 %34 
					                                                      OpStore %270 %269 
					                                Private f32* %271 = OpAccessChain %65 %34 
					                                         f32 %272 = OpLoad %271 
					                                Private f32* %273 = OpAccessChain %65 %34 
					                                         f32 %274 = OpLoad %273 
					                                         f32 %275 = OpFMul %272 %274 
					                                Private f32* %276 = OpAccessChain %65 %34 
					                                                      OpStore %276 %275 
					                                         f32 %277 = OpLoad %156 
					                                Private f32* %278 = OpAccessChain %65 %34 
					                                         f32 %279 = OpLoad %278 
					                                         f32 %280 = OpFMul %277 %279 
					                                                      OpStore %156 %280 
					                                         f32 %281 = OpLoad %156 
					                                         f32 %283 = OpFMul %281 %282 
					                                         f32 %285 = OpFAdd %283 %284 
					                                                      OpStore %156 %285 
					                                         f32 %286 = OpLoad %156 
					                                       f32_3 %287 = OpCompositeConstruct %286 %286 %286 
					                                       f32_4 %288 = OpLoad %117 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
					                                       f32_3 %290 = OpFMul %287 %289 
					                                                      OpStore %65 %290 
					                         read_only Texture2D %292 = OpLoad %291 
					                                     sampler %294 = OpLoad %293 
					                  read_only Texture2DSampled %295 = OpSampledImage %292 %294 
					                                       f32_2 %296 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %297 = OpImageSampleImplicitLod %295 %296 
					                                                      OpStore %117 %297 
					                                       f32_4 %298 = OpLoad %117 
					                              Uniform f32_4* %300 = OpAccessChain %105 %299 
					                                       f32_4 %301 = OpLoad %300 
					                                       f32_4 %302 = OpFMul %298 %301 
					                                                      OpStore %117 %302 
					                                       f32_4 %303 = OpLoad %117 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_4 %307 = OpLoad %306 
					                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
					                                       f32_3 %309 = OpFMul %304 %308 
					                                       f32_4 %310 = OpLoad %117 
					                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
					                                                      OpStore %117 %311 
					                                Private f32* %315 = OpAccessChain %117 %314 
					                                         f32 %316 = OpLoad %315 
					                                  Input f32* %318 = OpAccessChain %306 %314 
					                                         f32 %319 = OpLoad %318 
					                                         f32 %320 = OpFMul %316 %319 
					                                 Output f32* %322 = OpAccessChain %313 %314 
					                                                      OpStore %322 %320 
					                                       f32_4 %323 = OpLoad %117 
					                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
					                                       f32_3 %326 = OpFMul %324 %325 
					                                       f32_4 %327 = OpLoad %117 
					                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
					                                                      OpStore %117 %328 
					                                       f32_4 %329 = OpLoad %117 
					                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
					                                       f32_4 %331 = OpLoad %9 
					                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 3 
					                                       f32_3 %333 = OpFMul %330 %332 
					                                       f32_3 %334 = OpLoad %65 
					                                       f32_3 %335 = OpFAdd %333 %334 
					                                       f32_4 %336 = OpLoad %313 
					                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
					                                                      OpStore %313 %337 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "SPOT" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					float u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat0.z = sqrt(u_xlat12);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat13 = -abs(u_xlat12) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat13 = u_xlat13 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat14) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = max(u_xlat14, 0.00100000005);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat14);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat8 = (-u_xlat1.x) + 1.0;
					    u_xlat4 = u_xlat4 + -0.5;
					    u_xlat1.x = u_xlat4 * u_xlat13 + 1.0;
					    u_xlat5 = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat4 = u_xlat4 * u_xlat5 + 1.0;
					    u_xlat4 = u_xlat1.x * u_xlat4;
					    u_xlat4 = u_xlat0.x * u_xlat4;
					    u_xlat1 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat4) * u_xlat1.xyz;
					    u_xlat4 = abs(u_xlat12) + u_xlat0.x;
					    u_xlat4 = u_xlat4 + 9.99999975e-06;
					    u_xlat4 = 0.5 / u_xlat4;
					    u_xlat4 = u_xlat4 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat8 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = u_xlat8 * u_xlat1.x;
					    u_xlat8 = u_xlat8 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "SPOT" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 299
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %75 %87 %88 %102 %139 %212 %223 %227 %243 %260 %261 %263 %286 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %73 0 BuiltIn 73 
					                                                      OpMemberDecorate %73 1 BuiltIn 73 
					                                                      OpMemberDecorate %73 2 BuiltIn 73 
					                                                      OpDecorate %73 Block 
					                                                      OpDecorate vs_TEXCOORD0 Location 87 
					                                                      OpDecorate %88 Location 88 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %139 Location 139 
					                                                      OpDecorate vs_TEXCOORD1 Location 212 
					                                                      OpDecorate vs_TEXCOORD2 Location 223 
					                                                      OpDecorate vs_TEXCOORD3 Location 227 
					                                                      OpDecorate vs_TEXCOORD4 Location 243 
					                                                      OpDecorate %260 Location 260 
					                                                      OpDecorate %261 Location 261 
					                                                      OpDecorate vs_TEXCOORD5 Location 263 
					                                                      OpDecorate vs_TEXCOORD6 Location 286 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeArray %7 %15 
					                                              %20 = OpTypeStruct %16 %17 %7 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %37 = OpConstant 2 
					                               Private f32_4* %45 = OpVariable Private 
					                                          i32 %47 = OpConstant 3 
					                               Private f32_4* %51 = OpVariable Private 
					                                          u32 %71 = OpConstant 1 
					                                              %72 = OpTypeArray %6 %71 
					                                              %73 = OpTypeStruct %7 %6 %72 
					                                              %74 = OpTypePointer Output %73 
					         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
					                                              %83 = OpTypePointer Output %7 
					                                              %85 = OpTypeVector %6 2 
					                                              %86 = OpTypePointer Output %85 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                 Input f32_4* %88 = OpVariable Input 
					                                          i32 %91 = OpConstant 5 
					                                             %100 = OpTypeVector %6 3 
					                                             %101 = OpTypePointer Input %100 
					                                Input f32_3* %102 = OpVariable Input 
					                                             %108 = OpTypePointer Private %6 
					                                         u32 %115 = OpConstant 2 
					                                         u32 %122 = OpConstant 0 
					                                Private f32* %124 = OpVariable Private 
					                                Input f32_4* %139 = OpVariable Input 
					                                             %184 = OpTypePointer Private %100 
					                              Private f32_3* %185 = OpVariable Private 
					                                         u32 %199 = OpConstant 3 
					                                             %200 = OpTypePointer Input %6 
					                                             %203 = OpTypePointer Uniform %6 
					                                             %211 = OpTypePointer Output %100 
					                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
					                                             %215 = OpTypePointer Output %6 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %260 = OpVariable Output 
					                                Input f32_4* %261 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %264 = OpConstant 3,674022E-40 
					                                       f32_4 %265 = OpConstantComposite %264 %264 %264 %264 
					                                         i32 %268 = OpConstant 4 
					                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
					                                        f32_4 %31 = OpLoad %30 
					                                        f32_4 %32 = OpLoad %11 
					                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
					                                        f32_4 %34 = OpFMul %31 %33 
					                                        f32_4 %35 = OpLoad %9 
					                                        f32_4 %36 = OpFAdd %34 %35 
					                                                      OpStore %9 %36 
					                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_4 %40 = OpLoad %11 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
					                                        f32_4 %42 = OpFMul %39 %41 
					                                        f32_4 %43 = OpLoad %9 
					                                        f32_4 %44 = OpFAdd %42 %43 
					                                                      OpStore %9 %44 
					                                        f32_4 %46 = OpLoad %9 
					                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpFAdd %46 %49 
					                                                      OpStore %45 %50 
					                                        f32_4 %52 = OpLoad %45 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
					                               Uniform f32_4* %54 = OpAccessChain %22 %47 %25 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_4 %56 = OpFMul %53 %55 
					                                                      OpStore %51 %56 
					                               Uniform f32_4* %57 = OpAccessChain %22 %47 %24 
					                                        f32_4 %58 = OpLoad %57 
					                                        f32_4 %59 = OpLoad %45 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
					                                        f32_4 %61 = OpFMul %58 %60 
					                                        f32_4 %62 = OpLoad %51 
					                                        f32_4 %63 = OpFAdd %61 %62 
					                                                      OpStore %51 %63 
					                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpLoad %45 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
					                                        f32_4 %68 = OpFMul %65 %67 
					                                        f32_4 %69 = OpLoad %51 
					                                        f32_4 %70 = OpFAdd %68 %69 
					                                                      OpStore %51 %70 
					                               Uniform f32_4* %76 = OpAccessChain %22 %47 %47 
					                                        f32_4 %77 = OpLoad %76 
					                                        f32_4 %78 = OpLoad %45 
					                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
					                                        f32_4 %80 = OpFMul %77 %79 
					                                        f32_4 %81 = OpLoad %51 
					                                        f32_4 %82 = OpFAdd %80 %81 
					                                Output f32_4* %84 = OpAccessChain %75 %24 
					                                                      OpStore %84 %82 
					                                        f32_4 %89 = OpLoad %88 
					                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
					                               Uniform f32_4* %92 = OpAccessChain %22 %91 
					                                        f32_4 %93 = OpLoad %92 
					                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
					                                        f32_2 %95 = OpFMul %90 %94 
					                               Uniform f32_4* %96 = OpAccessChain %22 %91 
					                                        f32_4 %97 = OpLoad %96 
					                                        f32_2 %98 = OpVectorShuffle %97 %97 2 3 
					                                        f32_2 %99 = OpFAdd %95 %98 
					                                                      OpStore vs_TEXCOORD0 %99 
					                                       f32_3 %103 = OpLoad %102 
					                              Uniform f32_4* %104 = OpAccessChain %22 %25 %24 
					                                       f32_4 %105 = OpLoad %104 
					                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
					                                         f32 %107 = OpDot %103 %106 
					                                Private f32* %109 = OpAccessChain %45 %71 
					                                                      OpStore %109 %107 
					                                       f32_3 %110 = OpLoad %102 
					                              Uniform f32_4* %111 = OpAccessChain %22 %25 %25 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
					                                         f32 %114 = OpDot %110 %113 
					                                Private f32* %116 = OpAccessChain %45 %115 
					                                                      OpStore %116 %114 
					                                       f32_3 %117 = OpLoad %102 
					                              Uniform f32_4* %118 = OpAccessChain %22 %25 %37 
					                                       f32_4 %119 = OpLoad %118 
					                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
					                                         f32 %121 = OpDot %117 %120 
					                                Private f32* %123 = OpAccessChain %45 %122 
					                                                      OpStore %123 %121 
					                                       f32_4 %125 = OpLoad %45 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
					                                       f32_4 %127 = OpLoad %45 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                         f32 %129 = OpDot %126 %128 
					                                                      OpStore %124 %129 
					                                         f32 %130 = OpLoad %124 
					                                         f32 %131 = OpExtInst %1 32 %130 
					                                                      OpStore %124 %131 
					                                         f32 %132 = OpLoad %124 
					                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
					                                       f32_4 %134 = OpLoad %45 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                       f32_3 %136 = OpFMul %133 %135 
					                                       f32_4 %137 = OpLoad %45 
					                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 6 3 
					                                                      OpStore %45 %138 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 1 1 1 
					                              Uniform f32_4* %142 = OpAccessChain %22 %24 %25 
					                                       f32_4 %143 = OpLoad %142 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 1 2 0 
					                                       f32_3 %145 = OpFMul %141 %144 
					                                       f32_4 %146 = OpLoad %51 
					                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
					                                                      OpStore %51 %147 
					                              Uniform f32_4* %148 = OpAccessChain %22 %24 %24 
					                                       f32_4 %149 = OpLoad %148 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 1 2 0 
					                                       f32_4 %151 = OpLoad %139 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
					                                       f32_3 %153 = OpFMul %150 %152 
					                                       f32_4 %154 = OpLoad %51 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                       f32_3 %156 = OpFAdd %153 %155 
					                                       f32_4 %157 = OpLoad %51 
					                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
					                                                      OpStore %51 %158 
					                              Uniform f32_4* %159 = OpAccessChain %22 %24 %37 
					                                       f32_4 %160 = OpLoad %159 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 1 2 0 
					                                       f32_4 %162 = OpLoad %139 
					                                       f32_3 %163 = OpVectorShuffle %162 %162 2 2 2 
					                                       f32_3 %164 = OpFMul %161 %163 
					                                       f32_4 %165 = OpLoad %51 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                       f32_3 %167 = OpFAdd %164 %166 
					                                       f32_4 %168 = OpLoad %51 
					                                       f32_4 %169 = OpVectorShuffle %168 %167 4 5 6 3 
					                                                      OpStore %51 %169 
					                                       f32_4 %170 = OpLoad %51 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                       f32_4 %172 = OpLoad %51 
					                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
					                                         f32 %174 = OpDot %171 %173 
					                                                      OpStore %124 %174 
					                                         f32 %175 = OpLoad %124 
					                                         f32 %176 = OpExtInst %1 32 %175 
					                                                      OpStore %124 %176 
					                                         f32 %177 = OpLoad %124 
					                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
					                                       f32_4 %179 = OpLoad %51 
					                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
					                                       f32_3 %181 = OpFMul %178 %180 
					                                       f32_4 %182 = OpLoad %51 
					                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
					                                                      OpStore %51 %183 
					                                       f32_4 %186 = OpLoad %45 
					                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
					                                       f32_4 %188 = OpLoad %51 
					                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
					                                       f32_3 %190 = OpFMul %187 %189 
					                                                      OpStore %185 %190 
					                                       f32_4 %191 = OpLoad %45 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
					                                       f32_4 %193 = OpLoad %51 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 1 2 0 
					                                       f32_3 %195 = OpFMul %192 %194 
					                                       f32_3 %196 = OpLoad %185 
					                                       f32_3 %197 = OpFNegate %196 
					                                       f32_3 %198 = OpFAdd %195 %197 
					                                                      OpStore %185 %198 
					                                  Input f32* %201 = OpAccessChain %139 %199 
					                                         f32 %202 = OpLoad %201 
					                                Uniform f32* %204 = OpAccessChain %22 %37 %199 
					                                         f32 %205 = OpLoad %204 
					                                         f32 %206 = OpFMul %202 %205 
					                                                      OpStore %124 %206 
					                                         f32 %207 = OpLoad %124 
					                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
					                                       f32_3 %209 = OpLoad %185 
					                                       f32_3 %210 = OpFMul %208 %209 
					                                                      OpStore %185 %210 
					                                Private f32* %213 = OpAccessChain %185 %122 
					                                         f32 %214 = OpLoad %213 
					                                 Output f32* %216 = OpAccessChain vs_TEXCOORD1 %71 
					                                                      OpStore %216 %214 
					                                Private f32* %217 = OpAccessChain %51 %115 
					                                         f32 %218 = OpLoad %217 
					                                 Output f32* %219 = OpAccessChain vs_TEXCOORD1 %122 
					                                                      OpStore %219 %218 
					                                Private f32* %220 = OpAccessChain %45 %71 
					                                         f32 %221 = OpLoad %220 
					                                 Output f32* %222 = OpAccessChain vs_TEXCOORD1 %115 
					                                                      OpStore %222 %221 
					                                Private f32* %224 = OpAccessChain %51 %122 
					                                         f32 %225 = OpLoad %224 
					                                 Output f32* %226 = OpAccessChain vs_TEXCOORD2 %122 
					                                                      OpStore %226 %225 
					                                Private f32* %228 = OpAccessChain %51 %71 
					                                         f32 %229 = OpLoad %228 
					                                 Output f32* %230 = OpAccessChain vs_TEXCOORD3 %122 
					                                                      OpStore %230 %229 
					                                Private f32* %231 = OpAccessChain %45 %115 
					                                         f32 %232 = OpLoad %231 
					                                 Output f32* %233 = OpAccessChain vs_TEXCOORD2 %115 
					                                                      OpStore %233 %232 
					                                Private f32* %234 = OpAccessChain %45 %122 
					                                         f32 %235 = OpLoad %234 
					                                 Output f32* %236 = OpAccessChain vs_TEXCOORD3 %115 
					                                                      OpStore %236 %235 
					                                Private f32* %237 = OpAccessChain %185 %71 
					                                         f32 %238 = OpLoad %237 
					                                 Output f32* %239 = OpAccessChain vs_TEXCOORD2 %71 
					                                                      OpStore %239 %238 
					                                Private f32* %240 = OpAccessChain %185 %115 
					                                         f32 %241 = OpLoad %240 
					                                 Output f32* %242 = OpAccessChain vs_TEXCOORD3 %71 
					                                                      OpStore %242 %241 
					                              Uniform f32_4* %244 = OpAccessChain %22 %24 %47 
					                                       f32_4 %245 = OpLoad %244 
					                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
					                                       f32_4 %247 = OpLoad %11 
					                                       f32_3 %248 = OpVectorShuffle %247 %247 3 3 3 
					                                       f32_3 %249 = OpFMul %246 %248 
					                                       f32_4 %250 = OpLoad %9 
					                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
					                                       f32_3 %252 = OpFAdd %249 %251 
					                                                      OpStore vs_TEXCOORD4 %252 
					                              Uniform f32_4* %253 = OpAccessChain %22 %24 %47 
					                                       f32_4 %254 = OpLoad %253 
					                                       f32_4 %255 = OpLoad %11 
					                                       f32_4 %256 = OpVectorShuffle %255 %255 3 3 3 3 
					                                       f32_4 %257 = OpFMul %254 %256 
					                                       f32_4 %258 = OpLoad %9 
					                                       f32_4 %259 = OpFAdd %257 %258 
					                                                      OpStore %9 %259 
					                                       f32_4 %262 = OpLoad %261 
					                                                      OpStore %260 %262 
					                                                      OpStore vs_TEXCOORD5 %265 
					                                       f32_4 %266 = OpLoad %9 
					                                       f32_4 %267 = OpVectorShuffle %266 %266 1 1 1 1 
					                              Uniform f32_4* %269 = OpAccessChain %22 %268 %25 
					                                       f32_4 %270 = OpLoad %269 
					                                       f32_4 %271 = OpFMul %267 %270 
					                                                      OpStore %45 %271 
					                              Uniform f32_4* %272 = OpAccessChain %22 %268 %24 
					                                       f32_4 %273 = OpLoad %272 
					                                       f32_4 %274 = OpLoad %9 
					                                       f32_4 %275 = OpVectorShuffle %274 %274 0 0 0 0 
					                                       f32_4 %276 = OpFMul %273 %275 
					                                       f32_4 %277 = OpLoad %45 
					                                       f32_4 %278 = OpFAdd %276 %277 
					                                                      OpStore %45 %278 
					                              Uniform f32_4* %279 = OpAccessChain %22 %268 %37 
					                                       f32_4 %280 = OpLoad %279 
					                                       f32_4 %281 = OpLoad %9 
					                                       f32_4 %282 = OpVectorShuffle %281 %281 2 2 2 2 
					                                       f32_4 %283 = OpFMul %280 %282 
					                                       f32_4 %284 = OpLoad %45 
					                                       f32_4 %285 = OpFAdd %283 %284 
					                                                      OpStore %45 %285 
					                              Uniform f32_4* %287 = OpAccessChain %22 %268 %47 
					                                       f32_4 %288 = OpLoad %287 
					                                       f32_4 %289 = OpLoad %9 
					                                       f32_4 %290 = OpVectorShuffle %289 %289 3 3 3 3 
					                                       f32_4 %291 = OpFMul %288 %290 
					                                       f32_4 %292 = OpLoad %45 
					                                       f32_4 %293 = OpFAdd %291 %292 
					                                                      OpStore vs_TEXCOORD6 %293 
					                                 Output f32* %294 = OpAccessChain %75 %24 %71 
					                                         f32 %295 = OpLoad %294 
					                                         f32 %296 = OpFNegate %295 
					                                 Output f32* %297 = OpAccessChain %75 %24 %71 
					                                                      OpStore %297 %296 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 461
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %22 %66 %72 %79 %102 %429 %436 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 DescriptorSet 12 
					                                                      OpDecorate %12 Binding 12 
					                                                      OpDecorate %16 DescriptorSet 16 
					                                                      OpDecorate %16 Binding 16 
					                                                      OpDecorate vs_TEXCOORD0 Location 22 
					                                                      OpDecorate vs_TEXCOORD1 Location 66 
					                                                      OpDecorate vs_TEXCOORD2 Location 72 
					                                                      OpDecorate vs_TEXCOORD3 Location 79 
					                                                      OpDecorate vs_TEXCOORD4 Location 102 
					                                                      OpDecorate %106 ArrayStride 106 
					                                                      OpMemberDecorate %107 0 Offset 107 
					                                                      OpMemberDecorate %107 1 Offset 107 
					                                                      OpMemberDecorate %107 2 Offset 107 
					                                                      OpMemberDecorate %107 3 Offset 107 
					                                                      OpMemberDecorate %107 4 Offset 107 
					                                                      OpDecorate %107 Block 
					                                                      OpDecorate %109 DescriptorSet 109 
					                                                      OpDecorate %109 Binding 109 
					                                                      OpDecorate %306 DescriptorSet 306 
					                                                      OpDecorate %306 Binding 306 
					                                                      OpDecorate %308 DescriptorSet 308 
					                                                      OpDecorate %308 Binding 308 
					                                                      OpDecorate %328 DescriptorSet 328 
					                                                      OpDecorate %328 Binding 328 
					                                                      OpDecorate %330 DescriptorSet 330 
					                                                      OpDecorate %330 Binding 330 
					                                                      OpDecorate %414 DescriptorSet 414 
					                                                      OpDecorate %414 Binding 414 
					                                                      OpDecorate %416 DescriptorSet 416 
					                                                      OpDecorate %416 Binding 416 
					                                                      OpDecorate %429 Location 429 
					                                                      OpDecorate %436 Location 436 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %11 = OpTypePointer UniformConstant %10 
					         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                              %14 = OpTypeSampler 
					                                              %15 = OpTypePointer UniformConstant %14 
					                     UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                              %18 = OpTypeSampledImage %10 
					                                              %20 = OpTypeVector %6 2 
					                                              %21 = OpTypePointer Input %20 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                              %25 = OpTypeVector %6 3 
					                                              %29 = OpTypeInt 32 0 
					                                          u32 %30 = OpConstant 2 
					                                              %31 = OpTypePointer Private %6 
					                                          u32 %34 = OpConstant 0 
					                                          f32 %41 = OpConstant 3,674022E-40 
					                                        f32_2 %42 = OpConstantComposite %41 %41 
					                                          f32 %44 = OpConstant 3,674022E-40 
					                                        f32_2 %45 = OpConstantComposite %44 %44 
					                                 Private f32* %49 = OpVariable Private 
					                                          f32 %56 = OpConstant 3,674022E-40 
					                               Private f32_4* %64 = OpVariable Private 
					                                              %65 = OpTypePointer Input %25 
					                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %77 = OpConstant 1 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                                         u32 %105 = OpConstant 4 
					                                             %106 = OpTypeArray %7 %105 
					                                             %107 = OpTypeStruct %25 %7 %7 %106 %7 
					                                             %108 = OpTypePointer Uniform %107 
					Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4;}* %109 = OpVariable Uniform 
					                                             %110 = OpTypeInt 32 1 
					                                         i32 %111 = OpConstant 0 
					                                             %112 = OpTypePointer Uniform %25 
					                                Private f32* %137 = OpVariable Private 
					                                             %142 = OpTypePointer Private %25 
					                              Private f32_3* %143 = OpVariable Private 
					                                         i32 %160 = OpConstant 1 
					                                             %161 = OpTypePointer Uniform %7 
					                                Private f32* %166 = OpVariable Private 
					                                         f32 %191 = OpConstant 3,674022E-40 
					                                         f32 %209 = OpConstant 3,674022E-40 
					                                Private f32* %221 = OpVariable Private 
					                                Private f32* %227 = OpVariable Private 
					                                         f32 %233 = OpConstant 3,674022E-40 
					                                Private f32* %240 = OpVariable Private 
					                                Private f32* %245 = OpVariable Private 
					                                         i32 %269 = OpConstant 3 
					                                         i32 %280 = OpConstant 2 
					                                         f32 %301 = OpConstant 3,674022E-40 
					                                       f32_2 %302 = OpConstantComposite %301 %301 
					        UniformConstant read_only Texture2D* %306 = OpVariable UniformConstant 
					                    UniformConstant sampler* %308 = OpVariable UniformConstant 
					                                         u32 %314 = OpConstant 3 
					                                             %316 = OpTypeBool 
					                                             %317 = OpTypePointer Private %316 
					                               Private bool* %318 = OpVariable Private 
					        UniformConstant read_only Texture2D* %328 = OpVariable UniformConstant 
					                    UniformConstant sampler* %330 = OpVariable UniformConstant 
					                                         f32 %367 = OpConstant 3,674022E-40 
					                                         f32 %378 = OpConstant 3,674022E-40 
					                                         f32 %403 = OpConstant 3,674022E-40 
					                                         f32 %405 = OpConstant 3,674022E-40 
					        UniformConstant read_only Texture2D* %414 = OpVariable UniformConstant 
					                    UniformConstant sampler* %416 = OpVariable UniformConstant 
					                                         i32 %422 = OpConstant 4 
					                                             %428 = OpTypePointer Input %7 
					                                Input f32_4* %429 = OpVariable Input 
					                                             %435 = OpTypePointer Output %7 
					                               Output f32_4* %436 = OpVariable Output 
					                                             %439 = OpTypePointer Input %6 
					                                             %443 = OpTypePointer Output %6 
					                                       f32_3 %447 = OpConstantComposite %403 %403 %403 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                          read_only Texture2D %13 = OpLoad %12 
					                                      sampler %17 = OpLoad %16 
					                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
					                                        f32_3 %26 = OpVectorShuffle %24 %24 0 1 3 
					                                        f32_4 %27 = OpLoad %9 
					                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
					                                                      OpStore %9 %28 
					                                 Private f32* %32 = OpAccessChain %9 %30 
					                                          f32 %33 = OpLoad %32 
					                                 Private f32* %35 = OpAccessChain %9 %34 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %37 = OpFMul %33 %36 
					                                 Private f32* %38 = OpAccessChain %9 %34 
					                                                      OpStore %38 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
					                                        f32_2 %43 = OpFMul %40 %42 
					                                        f32_2 %46 = OpFAdd %43 %45 
					                                        f32_4 %47 = OpLoad %9 
					                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
					                                                      OpStore %9 %48 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
					                                          f32 %54 = OpDot %51 %53 
					                                                      OpStore %49 %54 
					                                          f32 %55 = OpLoad %49 
					                                          f32 %57 = OpExtInst %1 37 %55 %56 
					                                                      OpStore %49 %57 
					                                          f32 %58 = OpLoad %49 
					                                          f32 %59 = OpFNegate %58 
					                                          f32 %60 = OpFAdd %59 %56 
					                                                      OpStore %49 %60 
					                                          f32 %61 = OpLoad %49 
					                                          f32 %62 = OpExtInst %1 31 %61 
					                                 Private f32* %63 = OpAccessChain %9 %30 
					                                                      OpStore %63 %62 
					                                        f32_3 %67 = OpLoad vs_TEXCOORD1 
					                                        f32_4 %68 = OpLoad %9 
					                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
					                                          f32 %70 = OpDot %67 %69 
					                                 Private f32* %71 = OpAccessChain %64 %34 
					                                                      OpStore %71 %70 
					                                        f32_3 %73 = OpLoad vs_TEXCOORD2 
					                                        f32_4 %74 = OpLoad %9 
					                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
					                                          f32 %76 = OpDot %73 %75 
					                                 Private f32* %78 = OpAccessChain %64 %77 
					                                                      OpStore %78 %76 
					                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
					                                        f32_4 %81 = OpLoad %9 
					                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
					                                          f32 %83 = OpDot %80 %82 
					                                 Private f32* %84 = OpAccessChain %64 %30 
					                                                      OpStore %84 %83 
					                                        f32_4 %85 = OpLoad %64 
					                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
					                                        f32_4 %87 = OpLoad %64 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                          f32 %89 = OpDot %86 %88 
					                                 Private f32* %90 = OpAccessChain %9 %34 
					                                                      OpStore %90 %89 
					                                 Private f32* %91 = OpAccessChain %9 %34 
					                                          f32 %92 = OpLoad %91 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                 Private f32* %94 = OpAccessChain %9 %34 
					                                                      OpStore %94 %93 
					                                        f32_4 %95 = OpLoad %9 
					                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
					                                        f32_4 %97 = OpLoad %64 
					                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
					                                        f32_3 %99 = OpFMul %96 %98 
					                                       f32_4 %100 = OpLoad %9 
					                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
					                                                      OpStore %9 %101 
					                                       f32_3 %103 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %104 = OpFNegate %103 
					                              Uniform f32_3* %113 = OpAccessChain %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                                       f32_3 %115 = OpFAdd %104 %114 
					                                       f32_4 %116 = OpLoad %64 
					                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
					                                                      OpStore %64 %117 
					                                       f32_4 %118 = OpLoad %64 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_4 %120 = OpLoad %64 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
					                                         f32 %122 = OpDot %119 %121 
					                                                      OpStore %49 %122 
					                                         f32 %123 = OpLoad %49 
					                                         f32 %124 = OpExtInst %1 32 %123 
					                                                      OpStore %49 %124 
					                                         f32 %125 = OpLoad %49 
					                                       f32_3 %126 = OpCompositeConstruct %125 %125 %125 
					                                       f32_4 %127 = OpLoad %64 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                       f32_3 %129 = OpFMul %126 %128 
					                                       f32_4 %130 = OpLoad %64 
					                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
					                                                      OpStore %64 %131 
					                                       f32_4 %132 = OpLoad %9 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                       f32_4 %134 = OpLoad %64 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %133 %135 
					                                                      OpStore %49 %136 
					                                         f32 %138 = OpLoad %49 
					                                         f32 %139 = OpExtInst %1 4 %138 
					                                         f32 %140 = OpFNegate %139 
					                                         f32 %141 = OpFAdd %140 %56 
					                                                      OpStore %137 %141 
					                                         f32 %144 = OpLoad %137 
					                                         f32 %145 = OpLoad %137 
					                                         f32 %146 = OpFMul %144 %145 
					                                Private f32* %147 = OpAccessChain %143 %34 
					                                                      OpStore %147 %146 
					                                Private f32* %148 = OpAccessChain %143 %34 
					                                         f32 %149 = OpLoad %148 
					                                Private f32* %150 = OpAccessChain %143 %34 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFMul %149 %151 
					                                Private f32* %153 = OpAccessChain %143 %34 
					                                                      OpStore %153 %152 
					                                         f32 %154 = OpLoad %137 
					                                Private f32* %155 = OpAccessChain %143 %34 
					                                         f32 %156 = OpLoad %155 
					                                         f32 %157 = OpFMul %154 %156 
					                                                      OpStore %137 %157 
					                                       f32_3 %158 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %159 = OpFNegate %158 
					                              Uniform f32_4* %162 = OpAccessChain %109 %160 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFAdd %159 %164 
					                                                      OpStore %143 %165 
					                                       f32_3 %167 = OpLoad %143 
					                                       f32_3 %168 = OpLoad %143 
					                                         f32 %169 = OpDot %167 %168 
					                                                      OpStore %166 %169 
					                                         f32 %170 = OpLoad %166 
					                                         f32 %171 = OpExtInst %1 32 %170 
					                                                      OpStore %166 %171 
					                                       f32_3 %172 = OpLoad %143 
					                                         f32 %173 = OpLoad %166 
					                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
					                                       f32_3 %175 = OpFMul %172 %174 
					                                       f32_4 %176 = OpLoad %64 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_3 %178 = OpFAdd %175 %177 
					                                       f32_4 %179 = OpLoad %64 
					                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
					                                                      OpStore %64 %180 
					                                         f32 %181 = OpLoad %166 
					                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
					                                       f32_3 %183 = OpLoad %143 
					                                       f32_3 %184 = OpFMul %182 %183 
					                                                      OpStore %143 %184 
					                                       f32_4 %185 = OpLoad %64 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_4 %187 = OpLoad %64 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                         f32 %189 = OpDot %186 %188 
					                                                      OpStore %166 %189 
					                                         f32 %190 = OpLoad %166 
					                                         f32 %192 = OpExtInst %1 40 %190 %191 
					                                                      OpStore %166 %192 
					                                         f32 %193 = OpLoad %166 
					                                         f32 %194 = OpExtInst %1 32 %193 
					                                                      OpStore %166 %194 
					                                       f32_4 %195 = OpLoad %64 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                         f32 %197 = OpLoad %166 
					                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
					                                       f32_3 %199 = OpFMul %196 %198 
					                                       f32_4 %200 = OpLoad %64 
					                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
					                                                      OpStore %64 %201 
					                                       f32_3 %202 = OpLoad %143 
					                                       f32_4 %203 = OpLoad %64 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
					                                         f32 %205 = OpDot %202 %204 
					                                Private f32* %206 = OpAccessChain %64 %34 
					                                                      OpStore %206 %205 
					                                Private f32* %207 = OpAccessChain %64 %34 
					                                         f32 %208 = OpLoad %207 
					                                         f32 %210 = OpExtInst %1 43 %208 %209 %56 
					                                Private f32* %211 = OpAccessChain %64 %34 
					                                                      OpStore %211 %210 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                                       f32_3 %214 = OpLoad %143 
					                                         f32 %215 = OpDot %213 %214 
					                                Private f32* %216 = OpAccessChain %9 %34 
					                                                      OpStore %216 %215 
					                                Private f32* %217 = OpAccessChain %9 %34 
					                                         f32 %218 = OpLoad %217 
					                                         f32 %219 = OpExtInst %1 43 %218 %209 %56 
					                                Private f32* %220 = OpAccessChain %9 %34 
					                                                      OpStore %220 %219 
					                                       f32_4 %222 = OpLoad %64 
					                                       f32_2 %223 = OpVectorShuffle %222 %222 0 0 
					                                       f32_4 %224 = OpLoad %64 
					                                       f32_2 %225 = OpVectorShuffle %224 %224 0 0 
					                                         f32 %226 = OpDot %223 %225 
					                                                      OpStore %221 %226 
					                                Private f32* %228 = OpAccessChain %64 %34 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFNegate %229 
					                                         f32 %231 = OpFAdd %230 %56 
					                                                      OpStore %227 %231 
					                                         f32 %232 = OpLoad %221 
					                                         f32 %234 = OpFAdd %232 %233 
					                                                      OpStore %221 %234 
					                                         f32 %235 = OpLoad %221 
					                                         f32 %236 = OpLoad %137 
					                                         f32 %237 = OpFMul %235 %236 
					                                         f32 %238 = OpFAdd %237 %56 
					                                Private f32* %239 = OpAccessChain %64 %34 
					                                                      OpStore %239 %238 
					                                Private f32* %241 = OpAccessChain %9 %34 
					                                         f32 %242 = OpLoad %241 
					                                         f32 %243 = OpFNegate %242 
					                                         f32 %244 = OpFAdd %243 %56 
					                                                      OpStore %240 %244 
					                                         f32 %246 = OpLoad %240 
					                                         f32 %247 = OpLoad %240 
					                                         f32 %248 = OpFMul %246 %247 
					                                                      OpStore %245 %248 
					                                         f32 %249 = OpLoad %245 
					                                         f32 %250 = OpLoad %245 
					                                         f32 %251 = OpFMul %249 %250 
					                                                      OpStore %245 %251 
					                                         f32 %252 = OpLoad %240 
					                                         f32 %253 = OpLoad %245 
					                                         f32 %254 = OpFMul %252 %253 
					                                                      OpStore %240 %254 
					                                         f32 %255 = OpLoad %221 
					                                         f32 %256 = OpLoad %240 
					                                         f32 %257 = OpFMul %255 %256 
					                                         f32 %258 = OpFAdd %257 %56 
					                                                      OpStore %221 %258 
					                                Private f32* %259 = OpAccessChain %64 %34 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpLoad %221 
					                                         f32 %262 = OpFMul %260 %261 
					                                                      OpStore %221 %262 
					                                Private f32* %263 = OpAccessChain %9 %34 
					                                         f32 %264 = OpLoad %263 
					                                         f32 %265 = OpLoad %221 
					                                         f32 %266 = OpFMul %264 %265 
					                                                      OpStore %221 %266 
					                                       f32_3 %267 = OpLoad vs_TEXCOORD4 
					                                       f32_4 %268 = OpVectorShuffle %267 %267 1 1 1 1 
					                              Uniform f32_4* %270 = OpAccessChain %109 %269 %160 
					                                       f32_4 %271 = OpLoad %270 
					                                       f32_4 %272 = OpFMul %268 %271 
					                                                      OpStore %64 %272 
					                              Uniform f32_4* %273 = OpAccessChain %109 %269 %111 
					                                       f32_4 %274 = OpLoad %273 
					                                       f32_3 %275 = OpLoad vs_TEXCOORD4 
					                                       f32_4 %276 = OpVectorShuffle %275 %275 0 0 0 0 
					                                       f32_4 %277 = OpFMul %274 %276 
					                                       f32_4 %278 = OpLoad %64 
					                                       f32_4 %279 = OpFAdd %277 %278 
					                                                      OpStore %64 %279 
					                              Uniform f32_4* %281 = OpAccessChain %109 %269 %280 
					                                       f32_4 %282 = OpLoad %281 
					                                       f32_3 %283 = OpLoad vs_TEXCOORD4 
					                                       f32_4 %284 = OpVectorShuffle %283 %283 2 2 2 2 
					                                       f32_4 %285 = OpFMul %282 %284 
					                                       f32_4 %286 = OpLoad %64 
					                                       f32_4 %287 = OpFAdd %285 %286 
					                                                      OpStore %64 %287 
					                                       f32_4 %288 = OpLoad %64 
					                              Uniform f32_4* %289 = OpAccessChain %109 %269 %269 
					                                       f32_4 %290 = OpLoad %289 
					                                       f32_4 %291 = OpFAdd %288 %290 
					                                                      OpStore %64 %291 
					                                       f32_4 %292 = OpLoad %64 
					                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
					                                       f32_4 %294 = OpLoad %64 
					                                       f32_2 %295 = OpVectorShuffle %294 %294 3 3 
					                                       f32_2 %296 = OpFDiv %293 %295 
					                                       f32_3 %297 = OpLoad %143 
					                                       f32_3 %298 = OpVectorShuffle %297 %296 3 4 2 
					                                                      OpStore %143 %298 
					                                       f32_3 %299 = OpLoad %143 
					                                       f32_2 %300 = OpVectorShuffle %299 %299 0 1 
					                                       f32_2 %303 = OpFAdd %300 %302 
					                                       f32_3 %304 = OpLoad %143 
					                                       f32_3 %305 = OpVectorShuffle %304 %303 3 4 2 
					                                                      OpStore %143 %305 
					                         read_only Texture2D %307 = OpLoad %306 
					                                     sampler %309 = OpLoad %308 
					                  read_only Texture2DSampled %310 = OpSampledImage %307 %309 
					                                       f32_3 %311 = OpLoad %143 
					                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
					                                       f32_4 %313 = OpImageSampleImplicitLod %310 %312 
					                                         f32 %315 = OpCompositeExtract %313 3 
					                                                      OpStore %137 %315 
					                                Private f32* %319 = OpAccessChain %64 %30 
					                                         f32 %320 = OpLoad %319 
					                                        bool %321 = OpFOrdLessThan %209 %320 
					                                                      OpStore %318 %321 
					                                       f32_4 %322 = OpLoad %64 
					                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
					                                       f32_4 %324 = OpLoad %64 
					                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
					                                         f32 %326 = OpDot %323 %325 
					                                Private f32* %327 = OpAccessChain %64 %34 
					                                                      OpStore %327 %326 
					                         read_only Texture2D %329 = OpLoad %328 
					                                     sampler %331 = OpLoad %330 
					                  read_only Texture2DSampled %332 = OpSampledImage %329 %331 
					                                       f32_4 %333 = OpLoad %64 
					                                       f32_2 %334 = OpVectorShuffle %333 %333 0 0 
					                                       f32_4 %335 = OpImageSampleImplicitLod %332 %334 
					                                         f32 %336 = OpCompositeExtract %335 0 
					                                Private f32* %337 = OpAccessChain %64 %34 
					                                                      OpStore %337 %336 
					                                        bool %338 = OpLoad %318 
					                                         f32 %339 = OpSelect %338 %56 %209 
					                                                      OpStore %240 %339 
					                                         f32 %340 = OpLoad %137 
					                                         f32 %341 = OpLoad %240 
					                                         f32 %342 = OpFMul %340 %341 
					                                                      OpStore %240 %342 
					                                Private f32* %343 = OpAccessChain %64 %34 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpLoad %240 
					                                         f32 %346 = OpFMul %344 %345 
					                                Private f32* %347 = OpAccessChain %64 %34 
					                                                      OpStore %347 %346 
					                                       f32_4 %348 = OpLoad %64 
					                                       f32_3 %349 = OpVectorShuffle %348 %348 0 0 0 
					                              Uniform f32_4* %350 = OpAccessChain %109 %280 
					                                       f32_4 %351 = OpLoad %350 
					                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
					                                       f32_3 %353 = OpFMul %349 %352 
					                                       f32_4 %354 = OpLoad %64 
					                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
					                                                      OpStore %64 %355 
					                                         f32 %356 = OpLoad %221 
					                                       f32_3 %357 = OpCompositeConstruct %356 %356 %356 
					                                       f32_4 %358 = OpLoad %64 
					                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
					                                       f32_3 %360 = OpFMul %357 %359 
					                                                      OpStore %143 %360 
					                                         f32 %361 = OpLoad %49 
					                                         f32 %362 = OpExtInst %1 4 %361 
					                                Private f32* %363 = OpAccessChain %9 %34 
					                                         f32 %364 = OpLoad %363 
					                                         f32 %365 = OpFAdd %362 %364 
					                                                      OpStore %221 %365 
					                                         f32 %366 = OpLoad %221 
					                                         f32 %368 = OpFAdd %366 %367 
					                                                      OpStore %221 %368 
					                                         f32 %369 = OpLoad %221 
					                                         f32 %370 = OpFDiv %301 %369 
					                                                      OpStore %221 %370 
					                                Private f32* %371 = OpAccessChain %9 %34 
					                                         f32 %372 = OpLoad %371 
					                                         f32 %373 = OpLoad %221 
					                                         f32 %374 = OpFMul %372 %373 
					                                Private f32* %375 = OpAccessChain %9 %34 
					                                                      OpStore %375 %374 
					                                Private f32* %376 = OpAccessChain %9 %34 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %379 = OpFMul %377 %378 
					                                Private f32* %380 = OpAccessChain %9 %34 
					                                                      OpStore %380 %379 
					                                       f32_4 %381 = OpLoad %64 
					                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
					                                       f32_4 %383 = OpLoad %9 
					                                       f32_3 %384 = OpVectorShuffle %383 %383 0 0 0 
					                                       f32_3 %385 = OpFMul %382 %384 
					                                       f32_4 %386 = OpLoad %9 
					                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 2 6 
					                                                      OpStore %9 %387 
					                                         f32 %388 = OpLoad %227 
					                                         f32 %389 = OpLoad %227 
					                                         f32 %390 = OpFMul %388 %389 
					                                Private f32* %391 = OpAccessChain %64 %34 
					                                                      OpStore %391 %390 
					                                Private f32* %392 = OpAccessChain %64 %34 
					                                         f32 %393 = OpLoad %392 
					                                Private f32* %394 = OpAccessChain %64 %34 
					                                         f32 %395 = OpLoad %394 
					                                         f32 %396 = OpFMul %393 %395 
					                                Private f32* %397 = OpAccessChain %64 %34 
					                                                      OpStore %397 %396 
					                                         f32 %398 = OpLoad %227 
					                                Private f32* %399 = OpAccessChain %64 %34 
					                                         f32 %400 = OpLoad %399 
					                                         f32 %401 = OpFMul %398 %400 
					                                                      OpStore %227 %401 
					                                         f32 %402 = OpLoad %227 
					                                         f32 %404 = OpFMul %402 %403 
					                                         f32 %406 = OpFAdd %404 %405 
					                                                      OpStore %227 %406 
					                                         f32 %407 = OpLoad %227 
					                                       f32_3 %408 = OpCompositeConstruct %407 %407 %407 
					                                       f32_4 %409 = OpLoad %9 
					                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 3 
					                                       f32_3 %411 = OpFMul %408 %410 
					                                       f32_4 %412 = OpLoad %9 
					                                       f32_4 %413 = OpVectorShuffle %412 %411 4 5 6 3 
					                                                      OpStore %9 %413 
					                         read_only Texture2D %415 = OpLoad %414 
					                                     sampler %417 = OpLoad %416 
					                  read_only Texture2DSampled %418 = OpSampledImage %415 %417 
					                                       f32_2 %419 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %420 = OpImageSampleImplicitLod %418 %419 
					                                                      OpStore %64 %420 
					                                       f32_4 %421 = OpLoad %64 
					                              Uniform f32_4* %423 = OpAccessChain %109 %422 
					                                       f32_4 %424 = OpLoad %423 
					                                       f32_4 %425 = OpFMul %421 %424 
					                                                      OpStore %64 %425 
					                                       f32_4 %426 = OpLoad %64 
					                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
					                                       f32_4 %430 = OpLoad %429 
					                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
					                                       f32_3 %432 = OpFMul %427 %431 
					                                       f32_4 %433 = OpLoad %64 
					                                       f32_4 %434 = OpVectorShuffle %433 %432 4 5 6 3 
					                                                      OpStore %64 %434 
					                                Private f32* %437 = OpAccessChain %64 %314 
					                                         f32 %438 = OpLoad %437 
					                                  Input f32* %440 = OpAccessChain %429 %314 
					                                         f32 %441 = OpLoad %440 
					                                         f32 %442 = OpFMul %438 %441 
					                                 Output f32* %444 = OpAccessChain %436 %314 
					                                                      OpStore %444 %442 
					                                       f32_4 %445 = OpLoad %64 
					                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
					                                       f32_3 %448 = OpFMul %446 %447 
					                                       f32_4 %449 = OpLoad %64 
					                                       f32_4 %450 = OpVectorShuffle %449 %448 4 5 6 3 
					                                                      OpStore %64 %450 
					                                       f32_4 %451 = OpLoad %64 
					                                       f32_3 %452 = OpVectorShuffle %451 %451 0 1 2 
					                                       f32_3 %453 = OpLoad %143 
					                                       f32_3 %454 = OpFMul %452 %453 
					                                       f32_4 %455 = OpLoad %9 
					                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
					                                       f32_3 %457 = OpFAdd %454 %456 
					                                       f32_4 %458 = OpLoad %436 
					                                       f32_4 %459 = OpVectorShuffle %458 %457 4 5 6 3 
					                                                      OpStore %436 %459 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "POINT_COOKIE" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(3) uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat10 = -abs(u_xlat9) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat11) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = max(u_xlat11, 0.00100000005);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat6 = (-u_xlat1.x) + 1.0;
					    u_xlat3 = u_xlat3 + -0.5;
					    u_xlat1.x = u_xlat3 * u_xlat10 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat3 = u_xlat3 * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat1.x * u_xlat3;
					    u_xlat3 = u_xlat0.x * u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat3 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat3 = u_xlat3 + 9.99999975e-06;
					    u_xlat3 = 0.5 / u_xlat3;
					    u_xlat3 = u_xlat3 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "POINT_COOKIE" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 312
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %75 %87 %88 %102 %139 %212 %223 %227 %243 %260 %261 %263 %297 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %73 0 BuiltIn 73 
					                                                      OpMemberDecorate %73 1 BuiltIn 73 
					                                                      OpMemberDecorate %73 2 BuiltIn 73 
					                                                      OpDecorate %73 Block 
					                                                      OpDecorate vs_TEXCOORD0 Location 87 
					                                                      OpDecorate %88 Location 88 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %139 Location 139 
					                                                      OpDecorate vs_TEXCOORD1 Location 212 
					                                                      OpDecorate vs_TEXCOORD2 Location 223 
					                                                      OpDecorate vs_TEXCOORD3 Location 227 
					                                                      OpDecorate vs_TEXCOORD4 Location 243 
					                                                      OpDecorate %260 Location 260 
					                                                      OpDecorate %261 Location 261 
					                                                      OpDecorate vs_TEXCOORD5 Location 263 
					                                                      OpDecorate vs_TEXCOORD6 Location 297 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeArray %7 %15 
					                                              %20 = OpTypeStruct %16 %17 %7 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %37 = OpConstant 2 
					                               Private f32_4* %45 = OpVariable Private 
					                                          i32 %47 = OpConstant 3 
					                               Private f32_4* %51 = OpVariable Private 
					                                          u32 %71 = OpConstant 1 
					                                              %72 = OpTypeArray %6 %71 
					                                              %73 = OpTypeStruct %7 %6 %72 
					                                              %74 = OpTypePointer Output %73 
					         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
					                                              %83 = OpTypePointer Output %7 
					                                              %85 = OpTypeVector %6 2 
					                                              %86 = OpTypePointer Output %85 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                 Input f32_4* %88 = OpVariable Input 
					                                          i32 %91 = OpConstant 5 
					                                             %100 = OpTypeVector %6 3 
					                                             %101 = OpTypePointer Input %100 
					                                Input f32_3* %102 = OpVariable Input 
					                                             %108 = OpTypePointer Private %6 
					                                         u32 %115 = OpConstant 2 
					                                         u32 %122 = OpConstant 0 
					                                Private f32* %124 = OpVariable Private 
					                                Input f32_4* %139 = OpVariable Input 
					                                             %184 = OpTypePointer Private %100 
					                              Private f32_3* %185 = OpVariable Private 
					                                         u32 %199 = OpConstant 3 
					                                             %200 = OpTypePointer Input %6 
					                                             %203 = OpTypePointer Uniform %6 
					                                             %211 = OpTypePointer Output %100 
					                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
					                                             %215 = OpTypePointer Output %6 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %260 = OpVariable Output 
					                                Input f32_4* %261 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %264 = OpConstant 3,674022E-40 
					                                       f32_4 %265 = OpConstantComposite %264 %264 %264 %264 
					                                         i32 %268 = OpConstant 4 
					                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
					                                        f32_4 %31 = OpLoad %30 
					                                        f32_4 %32 = OpLoad %11 
					                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
					                                        f32_4 %34 = OpFMul %31 %33 
					                                        f32_4 %35 = OpLoad %9 
					                                        f32_4 %36 = OpFAdd %34 %35 
					                                                      OpStore %9 %36 
					                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_4 %40 = OpLoad %11 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
					                                        f32_4 %42 = OpFMul %39 %41 
					                                        f32_4 %43 = OpLoad %9 
					                                        f32_4 %44 = OpFAdd %42 %43 
					                                                      OpStore %9 %44 
					                                        f32_4 %46 = OpLoad %9 
					                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpFAdd %46 %49 
					                                                      OpStore %45 %50 
					                                        f32_4 %52 = OpLoad %45 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
					                               Uniform f32_4* %54 = OpAccessChain %22 %47 %25 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_4 %56 = OpFMul %53 %55 
					                                                      OpStore %51 %56 
					                               Uniform f32_4* %57 = OpAccessChain %22 %47 %24 
					                                        f32_4 %58 = OpLoad %57 
					                                        f32_4 %59 = OpLoad %45 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
					                                        f32_4 %61 = OpFMul %58 %60 
					                                        f32_4 %62 = OpLoad %51 
					                                        f32_4 %63 = OpFAdd %61 %62 
					                                                      OpStore %51 %63 
					                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpLoad %45 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
					                                        f32_4 %68 = OpFMul %65 %67 
					                                        f32_4 %69 = OpLoad %51 
					                                        f32_4 %70 = OpFAdd %68 %69 
					                                                      OpStore %51 %70 
					                               Uniform f32_4* %76 = OpAccessChain %22 %47 %47 
					                                        f32_4 %77 = OpLoad %76 
					                                        f32_4 %78 = OpLoad %45 
					                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
					                                        f32_4 %80 = OpFMul %77 %79 
					                                        f32_4 %81 = OpLoad %51 
					                                        f32_4 %82 = OpFAdd %80 %81 
					                                Output f32_4* %84 = OpAccessChain %75 %24 
					                                                      OpStore %84 %82 
					                                        f32_4 %89 = OpLoad %88 
					                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
					                               Uniform f32_4* %92 = OpAccessChain %22 %91 
					                                        f32_4 %93 = OpLoad %92 
					                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
					                                        f32_2 %95 = OpFMul %90 %94 
					                               Uniform f32_4* %96 = OpAccessChain %22 %91 
					                                        f32_4 %97 = OpLoad %96 
					                                        f32_2 %98 = OpVectorShuffle %97 %97 2 3 
					                                        f32_2 %99 = OpFAdd %95 %98 
					                                                      OpStore vs_TEXCOORD0 %99 
					                                       f32_3 %103 = OpLoad %102 
					                              Uniform f32_4* %104 = OpAccessChain %22 %25 %24 
					                                       f32_4 %105 = OpLoad %104 
					                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
					                                         f32 %107 = OpDot %103 %106 
					                                Private f32* %109 = OpAccessChain %45 %71 
					                                                      OpStore %109 %107 
					                                       f32_3 %110 = OpLoad %102 
					                              Uniform f32_4* %111 = OpAccessChain %22 %25 %25 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
					                                         f32 %114 = OpDot %110 %113 
					                                Private f32* %116 = OpAccessChain %45 %115 
					                                                      OpStore %116 %114 
					                                       f32_3 %117 = OpLoad %102 
					                              Uniform f32_4* %118 = OpAccessChain %22 %25 %37 
					                                       f32_4 %119 = OpLoad %118 
					                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
					                                         f32 %121 = OpDot %117 %120 
					                                Private f32* %123 = OpAccessChain %45 %122 
					                                                      OpStore %123 %121 
					                                       f32_4 %125 = OpLoad %45 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
					                                       f32_4 %127 = OpLoad %45 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                         f32 %129 = OpDot %126 %128 
					                                                      OpStore %124 %129 
					                                         f32 %130 = OpLoad %124 
					                                         f32 %131 = OpExtInst %1 32 %130 
					                                                      OpStore %124 %131 
					                                         f32 %132 = OpLoad %124 
					                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
					                                       f32_4 %134 = OpLoad %45 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                       f32_3 %136 = OpFMul %133 %135 
					                                       f32_4 %137 = OpLoad %45 
					                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 6 3 
					                                                      OpStore %45 %138 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 1 1 1 
					                              Uniform f32_4* %142 = OpAccessChain %22 %24 %25 
					                                       f32_4 %143 = OpLoad %142 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 1 2 0 
					                                       f32_3 %145 = OpFMul %141 %144 
					                                       f32_4 %146 = OpLoad %51 
					                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
					                                                      OpStore %51 %147 
					                              Uniform f32_4* %148 = OpAccessChain %22 %24 %24 
					                                       f32_4 %149 = OpLoad %148 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 1 2 0 
					                                       f32_4 %151 = OpLoad %139 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
					                                       f32_3 %153 = OpFMul %150 %152 
					                                       f32_4 %154 = OpLoad %51 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                       f32_3 %156 = OpFAdd %153 %155 
					                                       f32_4 %157 = OpLoad %51 
					                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
					                                                      OpStore %51 %158 
					                              Uniform f32_4* %159 = OpAccessChain %22 %24 %37 
					                                       f32_4 %160 = OpLoad %159 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 1 2 0 
					                                       f32_4 %162 = OpLoad %139 
					                                       f32_3 %163 = OpVectorShuffle %162 %162 2 2 2 
					                                       f32_3 %164 = OpFMul %161 %163 
					                                       f32_4 %165 = OpLoad %51 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                       f32_3 %167 = OpFAdd %164 %166 
					                                       f32_4 %168 = OpLoad %51 
					                                       f32_4 %169 = OpVectorShuffle %168 %167 4 5 6 3 
					                                                      OpStore %51 %169 
					                                       f32_4 %170 = OpLoad %51 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                       f32_4 %172 = OpLoad %51 
					                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
					                                         f32 %174 = OpDot %171 %173 
					                                                      OpStore %124 %174 
					                                         f32 %175 = OpLoad %124 
					                                         f32 %176 = OpExtInst %1 32 %175 
					                                                      OpStore %124 %176 
					                                         f32 %177 = OpLoad %124 
					                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
					                                       f32_4 %179 = OpLoad %51 
					                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
					                                       f32_3 %181 = OpFMul %178 %180 
					                                       f32_4 %182 = OpLoad %51 
					                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
					                                                      OpStore %51 %183 
					                                       f32_4 %186 = OpLoad %45 
					                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
					                                       f32_4 %188 = OpLoad %51 
					                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
					                                       f32_3 %190 = OpFMul %187 %189 
					                                                      OpStore %185 %190 
					                                       f32_4 %191 = OpLoad %45 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 2 0 1 
					                                       f32_4 %193 = OpLoad %51 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 1 2 0 
					                                       f32_3 %195 = OpFMul %192 %194 
					                                       f32_3 %196 = OpLoad %185 
					                                       f32_3 %197 = OpFNegate %196 
					                                       f32_3 %198 = OpFAdd %195 %197 
					                                                      OpStore %185 %198 
					                                  Input f32* %201 = OpAccessChain %139 %199 
					                                         f32 %202 = OpLoad %201 
					                                Uniform f32* %204 = OpAccessChain %22 %37 %199 
					                                         f32 %205 = OpLoad %204 
					                                         f32 %206 = OpFMul %202 %205 
					                                                      OpStore %124 %206 
					                                         f32 %207 = OpLoad %124 
					                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
					                                       f32_3 %209 = OpLoad %185 
					                                       f32_3 %210 = OpFMul %208 %209 
					                                                      OpStore %185 %210 
					                                Private f32* %213 = OpAccessChain %185 %122 
					                                         f32 %214 = OpLoad %213 
					                                 Output f32* %216 = OpAccessChain vs_TEXCOORD1 %71 
					                                                      OpStore %216 %214 
					                                Private f32* %217 = OpAccessChain %51 %115 
					                                         f32 %218 = OpLoad %217 
					                                 Output f32* %219 = OpAccessChain vs_TEXCOORD1 %122 
					                                                      OpStore %219 %218 
					                                Private f32* %220 = OpAccessChain %45 %71 
					                                         f32 %221 = OpLoad %220 
					                                 Output f32* %222 = OpAccessChain vs_TEXCOORD1 %115 
					                                                      OpStore %222 %221 
					                                Private f32* %224 = OpAccessChain %51 %122 
					                                         f32 %225 = OpLoad %224 
					                                 Output f32* %226 = OpAccessChain vs_TEXCOORD2 %122 
					                                                      OpStore %226 %225 
					                                Private f32* %228 = OpAccessChain %51 %71 
					                                         f32 %229 = OpLoad %228 
					                                 Output f32* %230 = OpAccessChain vs_TEXCOORD3 %122 
					                                                      OpStore %230 %229 
					                                Private f32* %231 = OpAccessChain %45 %115 
					                                         f32 %232 = OpLoad %231 
					                                 Output f32* %233 = OpAccessChain vs_TEXCOORD2 %115 
					                                                      OpStore %233 %232 
					                                Private f32* %234 = OpAccessChain %45 %122 
					                                         f32 %235 = OpLoad %234 
					                                 Output f32* %236 = OpAccessChain vs_TEXCOORD3 %115 
					                                                      OpStore %236 %235 
					                                Private f32* %237 = OpAccessChain %185 %71 
					                                         f32 %238 = OpLoad %237 
					                                 Output f32* %239 = OpAccessChain vs_TEXCOORD2 %71 
					                                                      OpStore %239 %238 
					                                Private f32* %240 = OpAccessChain %185 %115 
					                                         f32 %241 = OpLoad %240 
					                                 Output f32* %242 = OpAccessChain vs_TEXCOORD3 %71 
					                                                      OpStore %242 %241 
					                              Uniform f32_4* %244 = OpAccessChain %22 %24 %47 
					                                       f32_4 %245 = OpLoad %244 
					                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
					                                       f32_4 %247 = OpLoad %11 
					                                       f32_3 %248 = OpVectorShuffle %247 %247 3 3 3 
					                                       f32_3 %249 = OpFMul %246 %248 
					                                       f32_4 %250 = OpLoad %9 
					                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
					                                       f32_3 %252 = OpFAdd %249 %251 
					                                                      OpStore vs_TEXCOORD4 %252 
					                              Uniform f32_4* %253 = OpAccessChain %22 %24 %47 
					                                       f32_4 %254 = OpLoad %253 
					                                       f32_4 %255 = OpLoad %11 
					                                       f32_4 %256 = OpVectorShuffle %255 %255 3 3 3 3 
					                                       f32_4 %257 = OpFMul %254 %256 
					                                       f32_4 %258 = OpLoad %9 
					                                       f32_4 %259 = OpFAdd %257 %258 
					                                                      OpStore %9 %259 
					                                       f32_4 %262 = OpLoad %261 
					                                                      OpStore %260 %262 
					                                                      OpStore vs_TEXCOORD5 %265 
					                                       f32_4 %266 = OpLoad %9 
					                                       f32_3 %267 = OpVectorShuffle %266 %266 1 1 1 
					                              Uniform f32_4* %269 = OpAccessChain %22 %268 %25 
					                                       f32_4 %270 = OpLoad %269 
					                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
					                                       f32_3 %272 = OpFMul %267 %271 
					                                       f32_4 %273 = OpLoad %45 
					                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
					                                                      OpStore %45 %274 
					                              Uniform f32_4* %275 = OpAccessChain %22 %268 %24 
					                                       f32_4 %276 = OpLoad %275 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
					                                       f32_4 %278 = OpLoad %9 
					                                       f32_3 %279 = OpVectorShuffle %278 %278 0 0 0 
					                                       f32_3 %280 = OpFMul %277 %279 
					                                       f32_4 %281 = OpLoad %45 
					                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
					                                       f32_3 %283 = OpFAdd %280 %282 
					                                       f32_4 %284 = OpLoad %45 
					                                       f32_4 %285 = OpVectorShuffle %284 %283 4 5 6 3 
					                                                      OpStore %45 %285 
					                              Uniform f32_4* %286 = OpAccessChain %22 %268 %37 
					                                       f32_4 %287 = OpLoad %286 
					                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
					                                       f32_4 %289 = OpLoad %9 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 2 2 2 
					                                       f32_3 %291 = OpFMul %288 %290 
					                                       f32_4 %292 = OpLoad %45 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
					                                       f32_3 %294 = OpFAdd %291 %293 
					                                       f32_4 %295 = OpLoad %9 
					                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
					                                                      OpStore %9 %296 
					                              Uniform f32_4* %298 = OpAccessChain %22 %268 %47 
					                                       f32_4 %299 = OpLoad %298 
					                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
					                                       f32_4 %301 = OpLoad %9 
					                                       f32_3 %302 = OpVectorShuffle %301 %301 3 3 3 
					                                       f32_3 %303 = OpFMul %300 %302 
					                                       f32_4 %304 = OpLoad %9 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
					                                       f32_3 %306 = OpFAdd %303 %305 
					                                                      OpStore vs_TEXCOORD6 %306 
					                                 Output f32* %307 = OpAccessChain %75 %24 %71 
					                                         f32 %308 = OpLoad %307 
					                                         f32 %309 = OpFNegate %308 
					                                 Output f32* %310 = OpAccessChain %75 %24 %71 
					                                                      OpStore %310 %309 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 454
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %22 %66 %72 %79 %102 %422 %429 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 DescriptorSet 12 
					                                                      OpDecorate %12 Binding 12 
					                                                      OpDecorate %16 DescriptorSet 16 
					                                                      OpDecorate %16 Binding 16 
					                                                      OpDecorate vs_TEXCOORD0 Location 22 
					                                                      OpDecorate vs_TEXCOORD1 Location 66 
					                                                      OpDecorate vs_TEXCOORD2 Location 72 
					                                                      OpDecorate vs_TEXCOORD3 Location 79 
					                                                      OpDecorate vs_TEXCOORD4 Location 102 
					                                                      OpDecorate %106 ArrayStride 106 
					                                                      OpMemberDecorate %107 0 Offset 107 
					                                                      OpMemberDecorate %107 1 Offset 107 
					                                                      OpMemberDecorate %107 2 Offset 107 
					                                                      OpMemberDecorate %107 3 Offset 107 
					                                                      OpMemberDecorate %107 4 Offset 107 
					                                                      OpDecorate %107 Block 
					                                                      OpDecorate %109 DescriptorSet 109 
					                                                      OpDecorate %109 Binding 109 
					                                                      OpDecorate %314 DescriptorSet 314 
					                                                      OpDecorate %314 Binding 314 
					                                                      OpDecorate %316 DescriptorSet 316 
					                                                      OpDecorate %316 Binding 316 
					                                                      OpDecorate %326 DescriptorSet 326 
					                                                      OpDecorate %326 Binding 326 
					                                                      OpDecorate %328 DescriptorSet 328 
					                                                      OpDecorate %328 Binding 328 
					                                                      OpDecorate %407 DescriptorSet 407 
					                                                      OpDecorate %407 Binding 407 
					                                                      OpDecorate %409 DescriptorSet 409 
					                                                      OpDecorate %409 Binding 409 
					                                                      OpDecorate %422 Location 422 
					                                                      OpDecorate %429 Location 429 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %11 = OpTypePointer UniformConstant %10 
					         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                              %14 = OpTypeSampler 
					                                              %15 = OpTypePointer UniformConstant %14 
					                     UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                              %18 = OpTypeSampledImage %10 
					                                              %20 = OpTypeVector %6 2 
					                                              %21 = OpTypePointer Input %20 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                              %25 = OpTypeVector %6 3 
					                                              %29 = OpTypeInt 32 0 
					                                          u32 %30 = OpConstant 2 
					                                              %31 = OpTypePointer Private %6 
					                                          u32 %34 = OpConstant 0 
					                                          f32 %41 = OpConstant 3,674022E-40 
					                                        f32_2 %42 = OpConstantComposite %41 %41 
					                                          f32 %44 = OpConstant 3,674022E-40 
					                                        f32_2 %45 = OpConstantComposite %44 %44 
					                                 Private f32* %49 = OpVariable Private 
					                                          f32 %56 = OpConstant 3,674022E-40 
					                               Private f32_4* %64 = OpVariable Private 
					                                              %65 = OpTypePointer Input %25 
					                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %77 = OpConstant 1 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                                         u32 %105 = OpConstant 4 
					                                             %106 = OpTypeArray %7 %105 
					                                             %107 = OpTypeStruct %25 %7 %7 %106 %7 
					                                             %108 = OpTypePointer Uniform %107 
					Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4;}* %109 = OpVariable Uniform 
					                                             %110 = OpTypeInt 32 1 
					                                         i32 %111 = OpConstant 0 
					                                             %112 = OpTypePointer Uniform %25 
					                                Private f32* %137 = OpVariable Private 
					                                             %142 = OpTypePointer Private %25 
					                              Private f32_3* %143 = OpVariable Private 
					                                         i32 %160 = OpConstant 1 
					                                             %161 = OpTypePointer Uniform %7 
					                                Private f32* %166 = OpVariable Private 
					                                         f32 %191 = OpConstant 3,674022E-40 
					                                         f32 %209 = OpConstant 3,674022E-40 
					                                Private f32* %221 = OpVariable Private 
					                                Private f32* %227 = OpVariable Private 
					                                         f32 %233 = OpConstant 3,674022E-40 
					                                Private f32* %240 = OpVariable Private 
					                                Private f32* %245 = OpVariable Private 
					                                         i32 %269 = OpConstant 3 
					                                         i32 %287 = OpConstant 2 
					                                             %312 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %313 = OpTypePointer UniformConstant %312 
					      UniformConstant read_only TextureCube* %314 = OpVariable UniformConstant 
					                    UniformConstant sampler* %316 = OpVariable UniformConstant 
					                                             %318 = OpTypeSampledImage %312 
					                                         u32 %323 = OpConstant 3 
					        UniformConstant read_only Texture2D* %326 = OpVariable UniformConstant 
					                    UniformConstant sampler* %328 = OpVariable UniformConstant 
					                                         f32 %359 = OpConstant 3,674022E-40 
					                                         f32 %361 = OpConstant 3,674022E-40 
					                                         f32 %371 = OpConstant 3,674022E-40 
					                                         f32 %396 = OpConstant 3,674022E-40 
					                                         f32 %398 = OpConstant 3,674022E-40 
					        UniformConstant read_only Texture2D* %407 = OpVariable UniformConstant 
					                    UniformConstant sampler* %409 = OpVariable UniformConstant 
					                                         i32 %415 = OpConstant 4 
					                                             %421 = OpTypePointer Input %7 
					                                Input f32_4* %422 = OpVariable Input 
					                                             %428 = OpTypePointer Output %7 
					                               Output f32_4* %429 = OpVariable Output 
					                                             %432 = OpTypePointer Input %6 
					                                             %436 = OpTypePointer Output %6 
					                                       f32_3 %440 = OpConstantComposite %396 %396 %396 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                          read_only Texture2D %13 = OpLoad %12 
					                                      sampler %17 = OpLoad %16 
					                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
					                                        f32_3 %26 = OpVectorShuffle %24 %24 0 1 3 
					                                        f32_4 %27 = OpLoad %9 
					                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
					                                                      OpStore %9 %28 
					                                 Private f32* %32 = OpAccessChain %9 %30 
					                                          f32 %33 = OpLoad %32 
					                                 Private f32* %35 = OpAccessChain %9 %34 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %37 = OpFMul %33 %36 
					                                 Private f32* %38 = OpAccessChain %9 %34 
					                                                      OpStore %38 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
					                                        f32_2 %43 = OpFMul %40 %42 
					                                        f32_2 %46 = OpFAdd %43 %45 
					                                        f32_4 %47 = OpLoad %9 
					                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
					                                                      OpStore %9 %48 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
					                                          f32 %54 = OpDot %51 %53 
					                                                      OpStore %49 %54 
					                                          f32 %55 = OpLoad %49 
					                                          f32 %57 = OpExtInst %1 37 %55 %56 
					                                                      OpStore %49 %57 
					                                          f32 %58 = OpLoad %49 
					                                          f32 %59 = OpFNegate %58 
					                                          f32 %60 = OpFAdd %59 %56 
					                                                      OpStore %49 %60 
					                                          f32 %61 = OpLoad %49 
					                                          f32 %62 = OpExtInst %1 31 %61 
					                                 Private f32* %63 = OpAccessChain %9 %30 
					                                                      OpStore %63 %62 
					                                        f32_3 %67 = OpLoad vs_TEXCOORD1 
					                                        f32_4 %68 = OpLoad %9 
					                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
					                                          f32 %70 = OpDot %67 %69 
					                                 Private f32* %71 = OpAccessChain %64 %34 
					                                                      OpStore %71 %70 
					                                        f32_3 %73 = OpLoad vs_TEXCOORD2 
					                                        f32_4 %74 = OpLoad %9 
					                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
					                                          f32 %76 = OpDot %73 %75 
					                                 Private f32* %78 = OpAccessChain %64 %77 
					                                                      OpStore %78 %76 
					                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
					                                        f32_4 %81 = OpLoad %9 
					                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
					                                          f32 %83 = OpDot %80 %82 
					                                 Private f32* %84 = OpAccessChain %64 %30 
					                                                      OpStore %84 %83 
					                                        f32_4 %85 = OpLoad %64 
					                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
					                                        f32_4 %87 = OpLoad %64 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                          f32 %89 = OpDot %86 %88 
					                                 Private f32* %90 = OpAccessChain %9 %34 
					                                                      OpStore %90 %89 
					                                 Private f32* %91 = OpAccessChain %9 %34 
					                                          f32 %92 = OpLoad %91 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                 Private f32* %94 = OpAccessChain %9 %34 
					                                                      OpStore %94 %93 
					                                        f32_4 %95 = OpLoad %9 
					                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
					                                        f32_4 %97 = OpLoad %64 
					                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
					                                        f32_3 %99 = OpFMul %96 %98 
					                                       f32_4 %100 = OpLoad %9 
					                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
					                                                      OpStore %9 %101 
					                                       f32_3 %103 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %104 = OpFNegate %103 
					                              Uniform f32_3* %113 = OpAccessChain %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                                       f32_3 %115 = OpFAdd %104 %114 
					                                       f32_4 %116 = OpLoad %64 
					                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
					                                                      OpStore %64 %117 
					                                       f32_4 %118 = OpLoad %64 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_4 %120 = OpLoad %64 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
					                                         f32 %122 = OpDot %119 %121 
					                                                      OpStore %49 %122 
					                                         f32 %123 = OpLoad %49 
					                                         f32 %124 = OpExtInst %1 32 %123 
					                                                      OpStore %49 %124 
					                                         f32 %125 = OpLoad %49 
					                                       f32_3 %126 = OpCompositeConstruct %125 %125 %125 
					                                       f32_4 %127 = OpLoad %64 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                       f32_3 %129 = OpFMul %126 %128 
					                                       f32_4 %130 = OpLoad %64 
					                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
					                                                      OpStore %64 %131 
					                                       f32_4 %132 = OpLoad %9 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                       f32_4 %134 = OpLoad %64 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %133 %135 
					                                                      OpStore %49 %136 
					                                         f32 %138 = OpLoad %49 
					                                         f32 %139 = OpExtInst %1 4 %138 
					                                         f32 %140 = OpFNegate %139 
					                                         f32 %141 = OpFAdd %140 %56 
					                                                      OpStore %137 %141 
					                                         f32 %144 = OpLoad %137 
					                                         f32 %145 = OpLoad %137 
					                                         f32 %146 = OpFMul %144 %145 
					                                Private f32* %147 = OpAccessChain %143 %34 
					                                                      OpStore %147 %146 
					                                Private f32* %148 = OpAccessChain %143 %34 
					                                         f32 %149 = OpLoad %148 
					                                Private f32* %150 = OpAccessChain %143 %34 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFMul %149 %151 
					                                Private f32* %153 = OpAccessChain %143 %34 
					                                                      OpStore %153 %152 
					                                         f32 %154 = OpLoad %137 
					                                Private f32* %155 = OpAccessChain %143 %34 
					                                         f32 %156 = OpLoad %155 
					                                         f32 %157 = OpFMul %154 %156 
					                                                      OpStore %137 %157 
					                                       f32_3 %158 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %159 = OpFNegate %158 
					                              Uniform f32_4* %162 = OpAccessChain %109 %160 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFAdd %159 %164 
					                                                      OpStore %143 %165 
					                                       f32_3 %167 = OpLoad %143 
					                                       f32_3 %168 = OpLoad %143 
					                                         f32 %169 = OpDot %167 %168 
					                                                      OpStore %166 %169 
					                                         f32 %170 = OpLoad %166 
					                                         f32 %171 = OpExtInst %1 32 %170 
					                                                      OpStore %166 %171 
					                                       f32_3 %172 = OpLoad %143 
					                                         f32 %173 = OpLoad %166 
					                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
					                                       f32_3 %175 = OpFMul %172 %174 
					                                       f32_4 %176 = OpLoad %64 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_3 %178 = OpFAdd %175 %177 
					                                       f32_4 %179 = OpLoad %64 
					                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
					                                                      OpStore %64 %180 
					                                         f32 %181 = OpLoad %166 
					                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
					                                       f32_3 %183 = OpLoad %143 
					                                       f32_3 %184 = OpFMul %182 %183 
					                                                      OpStore %143 %184 
					                                       f32_4 %185 = OpLoad %64 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_4 %187 = OpLoad %64 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                         f32 %189 = OpDot %186 %188 
					                                                      OpStore %166 %189 
					                                         f32 %190 = OpLoad %166 
					                                         f32 %192 = OpExtInst %1 40 %190 %191 
					                                                      OpStore %166 %192 
					                                         f32 %193 = OpLoad %166 
					                                         f32 %194 = OpExtInst %1 32 %193 
					                                                      OpStore %166 %194 
					                                       f32_4 %195 = OpLoad %64 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                         f32 %197 = OpLoad %166 
					                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
					                                       f32_3 %199 = OpFMul %196 %198 
					                                       f32_4 %200 = OpLoad %64 
					                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
					                                                      OpStore %64 %201 
					                                       f32_3 %202 = OpLoad %143 
					                                       f32_4 %203 = OpLoad %64 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
					                                         f32 %205 = OpDot %202 %204 
					                                Private f32* %206 = OpAccessChain %64 %34 
					                                                      OpStore %206 %205 
					                                Private f32* %207 = OpAccessChain %64 %34 
					                                         f32 %208 = OpLoad %207 
					                                         f32 %210 = OpExtInst %1 43 %208 %209 %56 
					                                Private f32* %211 = OpAccessChain %64 %34 
					                                                      OpStore %211 %210 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                                       f32_3 %214 = OpLoad %143 
					                                         f32 %215 = OpDot %213 %214 
					                                Private f32* %216 = OpAccessChain %9 %34 
					                                                      OpStore %216 %215 
					                                Private f32* %217 = OpAccessChain %9 %34 
					                                         f32 %218 = OpLoad %217 
					                                         f32 %219 = OpExtInst %1 43 %218 %209 %56 
					                                Private f32* %220 = OpAccessChain %9 %34 
					                                                      OpStore %220 %219 
					                                       f32_4 %222 = OpLoad %64 
					                                       f32_2 %223 = OpVectorShuffle %222 %222 0 0 
					                                       f32_4 %224 = OpLoad %64 
					                                       f32_2 %225 = OpVectorShuffle %224 %224 0 0 
					                                         f32 %226 = OpDot %223 %225 
					                                                      OpStore %221 %226 
					                                Private f32* %228 = OpAccessChain %64 %34 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFNegate %229 
					                                         f32 %231 = OpFAdd %230 %56 
					                                                      OpStore %227 %231 
					                                         f32 %232 = OpLoad %221 
					                                         f32 %234 = OpFAdd %232 %233 
					                                                      OpStore %221 %234 
					                                         f32 %235 = OpLoad %221 
					                                         f32 %236 = OpLoad %137 
					                                         f32 %237 = OpFMul %235 %236 
					                                         f32 %238 = OpFAdd %237 %56 
					                                Private f32* %239 = OpAccessChain %64 %34 
					                                                      OpStore %239 %238 
					                                Private f32* %241 = OpAccessChain %9 %34 
					                                         f32 %242 = OpLoad %241 
					                                         f32 %243 = OpFNegate %242 
					                                         f32 %244 = OpFAdd %243 %56 
					                                                      OpStore %240 %244 
					                                         f32 %246 = OpLoad %240 
					                                         f32 %247 = OpLoad %240 
					                                         f32 %248 = OpFMul %246 %247 
					                                                      OpStore %245 %248 
					                                         f32 %249 = OpLoad %245 
					                                         f32 %250 = OpLoad %245 
					                                         f32 %251 = OpFMul %249 %250 
					                                                      OpStore %245 %251 
					                                         f32 %252 = OpLoad %240 
					                                         f32 %253 = OpLoad %245 
					                                         f32 %254 = OpFMul %252 %253 
					                                                      OpStore %240 %254 
					                                         f32 %255 = OpLoad %221 
					                                         f32 %256 = OpLoad %240 
					                                         f32 %257 = OpFMul %255 %256 
					                                         f32 %258 = OpFAdd %257 %56 
					                                                      OpStore %221 %258 
					                                Private f32* %259 = OpAccessChain %64 %34 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpLoad %221 
					                                         f32 %262 = OpFMul %260 %261 
					                                                      OpStore %221 %262 
					                                Private f32* %263 = OpAccessChain %9 %34 
					                                         f32 %264 = OpLoad %263 
					                                         f32 %265 = OpLoad %221 
					                                         f32 %266 = OpFMul %264 %265 
					                                                      OpStore %221 %266 
					                                       f32_3 %267 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %268 = OpVectorShuffle %267 %267 1 1 1 
					                              Uniform f32_4* %270 = OpAccessChain %109 %269 %160 
					                                       f32_4 %271 = OpLoad %270 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
					                                       f32_3 %273 = OpFMul %268 %272 
					                                       f32_4 %274 = OpLoad %64 
					                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
					                                                      OpStore %64 %275 
					                              Uniform f32_4* %276 = OpAccessChain %109 %269 %111 
					                                       f32_4 %277 = OpLoad %276 
					                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
					                                       f32_3 %279 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %280 = OpVectorShuffle %279 %279 0 0 0 
					                                       f32_3 %281 = OpFMul %278 %280 
					                                       f32_4 %282 = OpLoad %64 
					                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
					                                       f32_3 %284 = OpFAdd %281 %283 
					                                       f32_4 %285 = OpLoad %64 
					                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
					                                                      OpStore %64 %286 
					                              Uniform f32_4* %288 = OpAccessChain %109 %269 %287 
					                                       f32_4 %289 = OpLoad %288 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
					                                       f32_3 %291 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 2 2 2 
					                                       f32_3 %293 = OpFMul %290 %292 
					                                       f32_4 %294 = OpLoad %64 
					                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
					                                       f32_3 %296 = OpFAdd %293 %295 
					                                       f32_4 %297 = OpLoad %64 
					                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 6 3 
					                                                      OpStore %64 %298 
					                                       f32_4 %299 = OpLoad %64 
					                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
					                              Uniform f32_4* %301 = OpAccessChain %109 %269 %269 
					                                       f32_4 %302 = OpLoad %301 
					                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
					                                       f32_3 %304 = OpFAdd %300 %303 
					                                       f32_4 %305 = OpLoad %64 
					                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
					                                                      OpStore %64 %306 
					                                       f32_4 %307 = OpLoad %64 
					                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
					                                       f32_4 %309 = OpLoad %64 
					                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
					                                         f32 %311 = OpDot %308 %310 
					                                                      OpStore %137 %311 
					                       read_only TextureCube %315 = OpLoad %314 
					                                     sampler %317 = OpLoad %316 
					                read_only TextureCubeSampled %319 = OpSampledImage %315 %317 
					                                       f32_4 %320 = OpLoad %64 
					                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
					                                       f32_4 %322 = OpImageSampleImplicitLod %319 %321 
					                                         f32 %324 = OpCompositeExtract %322 3 
					                                Private f32* %325 = OpAccessChain %64 %34 
					                                                      OpStore %325 %324 
					                         read_only Texture2D %327 = OpLoad %326 
					                                     sampler %329 = OpLoad %328 
					                  read_only Texture2DSampled %330 = OpSampledImage %327 %329 
					                                         f32 %331 = OpLoad %137 
					                                       f32_2 %332 = OpCompositeConstruct %331 %331 
					                                       f32_4 %333 = OpImageSampleImplicitLod %330 %332 
					                                         f32 %334 = OpCompositeExtract %333 0 
					                                                      OpStore %240 %334 
					                                Private f32* %335 = OpAccessChain %64 %34 
					                                         f32 %336 = OpLoad %335 
					                                         f32 %337 = OpLoad %240 
					                                         f32 %338 = OpFMul %336 %337 
					                                Private f32* %339 = OpAccessChain %64 %34 
					                                                      OpStore %339 %338 
					                                       f32_4 %340 = OpLoad %64 
					                                       f32_3 %341 = OpVectorShuffle %340 %340 0 0 0 
					                              Uniform f32_4* %342 = OpAccessChain %109 %287 
					                                       f32_4 %343 = OpLoad %342 
					                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
					                                       f32_3 %345 = OpFMul %341 %344 
					                                       f32_4 %346 = OpLoad %64 
					                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
					                                                      OpStore %64 %347 
					                                         f32 %348 = OpLoad %221 
					                                       f32_3 %349 = OpCompositeConstruct %348 %348 %348 
					                                       f32_4 %350 = OpLoad %64 
					                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
					                                       f32_3 %352 = OpFMul %349 %351 
					                                                      OpStore %143 %352 
					                                         f32 %353 = OpLoad %49 
					                                         f32 %354 = OpExtInst %1 4 %353 
					                                Private f32* %355 = OpAccessChain %9 %34 
					                                         f32 %356 = OpLoad %355 
					                                         f32 %357 = OpFAdd %354 %356 
					                                                      OpStore %221 %357 
					                                         f32 %358 = OpLoad %221 
					                                         f32 %360 = OpFAdd %358 %359 
					                                                      OpStore %221 %360 
					                                         f32 %362 = OpLoad %221 
					                                         f32 %363 = OpFDiv %361 %362 
					                                                      OpStore %221 %363 
					                                Private f32* %364 = OpAccessChain %9 %34 
					                                         f32 %365 = OpLoad %364 
					                                         f32 %366 = OpLoad %221 
					                                         f32 %367 = OpFMul %365 %366 
					                                Private f32* %368 = OpAccessChain %9 %34 
					                                                      OpStore %368 %367 
					                                Private f32* %369 = OpAccessChain %9 %34 
					                                         f32 %370 = OpLoad %369 
					                                         f32 %372 = OpFMul %370 %371 
					                                Private f32* %373 = OpAccessChain %9 %34 
					                                                      OpStore %373 %372 
					                                       f32_4 %374 = OpLoad %64 
					                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
					                                       f32_4 %376 = OpLoad %9 
					                                       f32_3 %377 = OpVectorShuffle %376 %376 0 0 0 
					                                       f32_3 %378 = OpFMul %375 %377 
					                                       f32_4 %379 = OpLoad %9 
					                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 2 6 
					                                                      OpStore %9 %380 
					                                         f32 %381 = OpLoad %227 
					                                         f32 %382 = OpLoad %227 
					                                         f32 %383 = OpFMul %381 %382 
					                                Private f32* %384 = OpAccessChain %64 %34 
					                                                      OpStore %384 %383 
					                                Private f32* %385 = OpAccessChain %64 %34 
					                                         f32 %386 = OpLoad %385 
					                                Private f32* %387 = OpAccessChain %64 %34 
					                                         f32 %388 = OpLoad %387 
					                                         f32 %389 = OpFMul %386 %388 
					                                Private f32* %390 = OpAccessChain %64 %34 
					                                                      OpStore %390 %389 
					                                         f32 %391 = OpLoad %227 
					                                Private f32* %392 = OpAccessChain %64 %34 
					                                         f32 %393 = OpLoad %392 
					                                         f32 %394 = OpFMul %391 %393 
					                                                      OpStore %227 %394 
					                                         f32 %395 = OpLoad %227 
					                                         f32 %397 = OpFMul %395 %396 
					                                         f32 %399 = OpFAdd %397 %398 
					                                                      OpStore %227 %399 
					                                         f32 %400 = OpLoad %227 
					                                       f32_3 %401 = OpCompositeConstruct %400 %400 %400 
					                                       f32_4 %402 = OpLoad %9 
					                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 3 
					                                       f32_3 %404 = OpFMul %401 %403 
					                                       f32_4 %405 = OpLoad %9 
					                                       f32_4 %406 = OpVectorShuffle %405 %404 4 5 6 3 
					                                                      OpStore %9 %406 
					                         read_only Texture2D %408 = OpLoad %407 
					                                     sampler %410 = OpLoad %409 
					                  read_only Texture2DSampled %411 = OpSampledImage %408 %410 
					                                       f32_2 %412 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %413 = OpImageSampleImplicitLod %411 %412 
					                                                      OpStore %64 %413 
					                                       f32_4 %414 = OpLoad %64 
					                              Uniform f32_4* %416 = OpAccessChain %109 %415 
					                                       f32_4 %417 = OpLoad %416 
					                                       f32_4 %418 = OpFMul %414 %417 
					                                                      OpStore %64 %418 
					                                       f32_4 %419 = OpLoad %64 
					                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
					                                       f32_4 %423 = OpLoad %422 
					                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
					                                       f32_3 %425 = OpFMul %420 %424 
					                                       f32_4 %426 = OpLoad %64 
					                                       f32_4 %427 = OpVectorShuffle %426 %425 4 5 6 3 
					                                                      OpStore %64 %427 
					                                Private f32* %430 = OpAccessChain %64 %323 
					                                         f32 %431 = OpLoad %430 
					                                  Input f32* %433 = OpAccessChain %422 %323 
					                                         f32 %434 = OpLoad %433 
					                                         f32 %435 = OpFMul %431 %434 
					                                 Output f32* %437 = OpAccessChain %429 %323 
					                                                      OpStore %437 %435 
					                                       f32_4 %438 = OpLoad %64 
					                                       f32_3 %439 = OpVectorShuffle %438 %438 0 1 2 
					                                       f32_3 %441 = OpFMul %439 %440 
					                                       f32_4 %442 = OpLoad %64 
					                                       f32_4 %443 = OpVectorShuffle %442 %441 4 5 6 3 
					                                                      OpStore %64 %443 
					                                       f32_4 %444 = OpLoad %64 
					                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
					                                       f32_3 %446 = OpLoad %143 
					                                       f32_3 %447 = OpFMul %445 %446 
					                                       f32_4 %448 = OpLoad %9 
					                                       f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
					                                       f32_3 %450 = OpFAdd %447 %449 
					                                       f32_4 %451 = OpLoad %429 
					                                       f32_4 %452 = OpVectorShuffle %451 %450 4 5 6 3 
					                                                      OpStore %429 %452 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = -abs(u_xlat9) + 1.0;
					    u_xlat6 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat6 = u_xlat6 + 9.99999975e-06;
					    u_xlat6 = 0.5 / u_xlat6;
					    u_xlat6 = u_xlat6 * 0.999999881;
					    u_xlat6 = u_xlat0.x * u_xlat6;
					    u_xlat9 = u_xlat3 * u_xlat3;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat3 = u_xlat3 * u_xlat9;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1.x = dot(vec2(u_xlat9), vec2(u_xlat9));
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat3 = u_xlat1.x * u_xlat3 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat3 * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat1.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9 = u_xlat9 * u_xlat1.x;
					    u_xlat9 = u_xlat9 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 318
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %75 %94 %137 %147 %148 %161 %198 %276 %287 %291 %307 %308 %310 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %73 0 BuiltIn 73 
					                                                      OpMemberDecorate %73 1 BuiltIn 73 
					                                                      OpMemberDecorate %73 2 BuiltIn 73 
					                                                      OpDecorate %73 Block 
					                                                      OpDecorate vs_TEXCOORD4 Location 94 
					                                                      OpDecorate vs_TEXCOORD6 Location 137 
					                                                      OpDecorate vs_TEXCOORD0 Location 147 
					                                                      OpDecorate %148 Location 148 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %198 Location 198 
					                                                      OpDecorate vs_TEXCOORD1 Location 276 
					                                                      OpDecorate vs_TEXCOORD2 Location 287 
					                                                      OpDecorate vs_TEXCOORD3 Location 291 
					                                                      OpDecorate %307 Location 307 
					                                                      OpDecorate %308 Location 308 
					                                                      OpDecorate vs_TEXCOORD5 Location 310 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeArray %7 %15 
					                                              %20 = OpTypeStruct %16 %17 %7 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %37 = OpConstant 2 
					                               Private f32_4* %45 = OpVariable Private 
					                                          i32 %47 = OpConstant 3 
					                               Private f32_4* %51 = OpVariable Private 
					                                          u32 %71 = OpConstant 1 
					                                              %72 = OpTypeArray %6 %71 
					                                              %73 = OpTypeStruct %7 %6 %72 
					                                              %74 = OpTypePointer Output %73 
					         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
					                                              %83 = OpTypePointer Output %7 
					                                              %92 = OpTypeVector %6 3 
					                                              %93 = OpTypePointer Output %92 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                                             %104 = OpTypeVector %6 2 
					                                         i32 %107 = OpConstant 4 
					                                             %136 = OpTypePointer Output %104 
					                       Output f32_2* vs_TEXCOORD6 = OpVariable Output 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                Input f32_4* %148 = OpVariable Input 
					                                         i32 %151 = OpConstant 5 
					                                             %160 = OpTypePointer Input %92 
					                                Input f32_3* %161 = OpVariable Input 
					                                             %167 = OpTypePointer Private %6 
					                                         u32 %174 = OpConstant 2 
					                                         u32 %181 = OpConstant 0 
					                                Private f32* %183 = OpVariable Private 
					                                Input f32_4* %198 = OpVariable Input 
					                                         u32 %261 = OpConstant 3 
					                                             %262 = OpTypePointer Input %6 
					                                             %265 = OpTypePointer Uniform %6 
					                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
					                                             %279 = OpTypePointer Output %6 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                               Output f32_4* %307 = OpVariable Output 
					                                Input f32_4* %308 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %311 = OpConstant 3,674022E-40 
					                                       f32_4 %312 = OpConstantComposite %311 %311 %311 %311 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
					                                        f32_4 %31 = OpLoad %30 
					                                        f32_4 %32 = OpLoad %11 
					                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
					                                        f32_4 %34 = OpFMul %31 %33 
					                                        f32_4 %35 = OpLoad %9 
					                                        f32_4 %36 = OpFAdd %34 %35 
					                                                      OpStore %9 %36 
					                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_4 %40 = OpLoad %11 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
					                                        f32_4 %42 = OpFMul %39 %41 
					                                        f32_4 %43 = OpLoad %9 
					                                        f32_4 %44 = OpFAdd %42 %43 
					                                                      OpStore %9 %44 
					                                        f32_4 %46 = OpLoad %9 
					                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpFAdd %46 %49 
					                                                      OpStore %45 %50 
					                                        f32_4 %52 = OpLoad %45 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
					                               Uniform f32_4* %54 = OpAccessChain %22 %47 %25 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_4 %56 = OpFMul %53 %55 
					                                                      OpStore %51 %56 
					                               Uniform f32_4* %57 = OpAccessChain %22 %47 %24 
					                                        f32_4 %58 = OpLoad %57 
					                                        f32_4 %59 = OpLoad %45 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
					                                        f32_4 %61 = OpFMul %58 %60 
					                                        f32_4 %62 = OpLoad %51 
					                                        f32_4 %63 = OpFAdd %61 %62 
					                                                      OpStore %51 %63 
					                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpLoad %45 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
					                                        f32_4 %68 = OpFMul %65 %67 
					                                        f32_4 %69 = OpLoad %51 
					                                        f32_4 %70 = OpFAdd %68 %69 
					                                                      OpStore %51 %70 
					                               Uniform f32_4* %76 = OpAccessChain %22 %47 %47 
					                                        f32_4 %77 = OpLoad %76 
					                                        f32_4 %78 = OpLoad %45 
					                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
					                                        f32_4 %80 = OpFMul %77 %79 
					                                        f32_4 %81 = OpLoad %51 
					                                        f32_4 %82 = OpFAdd %80 %81 
					                                Output f32_4* %84 = OpAccessChain %75 %24 
					                                                      OpStore %84 %82 
					                               Uniform f32_4* %85 = OpAccessChain %22 %24 %47 
					                                        f32_4 %86 = OpLoad %85 
					                                        f32_4 %87 = OpLoad %11 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 3 3 3 3 
					                                        f32_4 %89 = OpFMul %86 %88 
					                                        f32_4 %90 = OpLoad %9 
					                                        f32_4 %91 = OpFAdd %89 %90 
					                                                      OpStore %45 %91 
					                               Uniform f32_4* %95 = OpAccessChain %22 %24 %47 
					                                        f32_4 %96 = OpLoad %95 
					                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
					                                        f32_4 %98 = OpLoad %11 
					                                        f32_3 %99 = OpVectorShuffle %98 %98 3 3 3 
					                                       f32_3 %100 = OpFMul %97 %99 
					                                       f32_4 %101 = OpLoad %9 
					                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
					                                       f32_3 %103 = OpFAdd %100 %102 
					                                                      OpStore vs_TEXCOORD4 %103 
					                                       f32_4 %105 = OpLoad %45 
					                                       f32_2 %106 = OpVectorShuffle %105 %105 1 1 
					                              Uniform f32_4* %108 = OpAccessChain %22 %107 %25 
					                                       f32_4 %109 = OpLoad %108 
					                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
					                                       f32_2 %111 = OpFMul %106 %110 
					                                       f32_4 %112 = OpLoad %9 
					                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 2 3 
					                                                      OpStore %9 %113 
					                              Uniform f32_4* %114 = OpAccessChain %22 %107 %24 
					                                       f32_4 %115 = OpLoad %114 
					                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
					                                       f32_4 %117 = OpLoad %45 
					                                       f32_2 %118 = OpVectorShuffle %117 %117 0 0 
					                                       f32_2 %119 = OpFMul %116 %118 
					                                       f32_4 %120 = OpLoad %9 
					                                       f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                       f32_2 %122 = OpFAdd %119 %121 
					                                       f32_4 %123 = OpLoad %9 
					                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 2 3 
					                                                      OpStore %9 %124 
					                              Uniform f32_4* %125 = OpAccessChain %22 %107 %37 
					                                       f32_4 %126 = OpLoad %125 
					                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
					                                       f32_4 %128 = OpLoad %45 
					                                       f32_2 %129 = OpVectorShuffle %128 %128 2 2 
					                                       f32_2 %130 = OpFMul %127 %129 
					                                       f32_4 %131 = OpLoad %9 
					                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
					                                       f32_2 %133 = OpFAdd %130 %132 
					                                       f32_4 %134 = OpLoad %9 
					                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 2 3 
					                                                      OpStore %9 %135 
					                              Uniform f32_4* %138 = OpAccessChain %22 %107 %47 
					                                       f32_4 %139 = OpLoad %138 
					                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
					                                       f32_4 %141 = OpLoad %45 
					                                       f32_2 %142 = OpVectorShuffle %141 %141 3 3 
					                                       f32_2 %143 = OpFMul %140 %142 
					                                       f32_4 %144 = OpLoad %9 
					                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
					                                       f32_2 %146 = OpFAdd %143 %145 
					                                                      OpStore vs_TEXCOORD6 %146 
					                                       f32_4 %149 = OpLoad %148 
					                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
					                              Uniform f32_4* %152 = OpAccessChain %22 %151 
					                                       f32_4 %153 = OpLoad %152 
					                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
					                                       f32_2 %155 = OpFMul %150 %154 
					                              Uniform f32_4* %156 = OpAccessChain %22 %151 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
					                                       f32_2 %159 = OpFAdd %155 %158 
					                                                      OpStore vs_TEXCOORD0 %159 
					                                       f32_3 %162 = OpLoad %161 
					                              Uniform f32_4* %163 = OpAccessChain %22 %25 %24 
					                                       f32_4 %164 = OpLoad %163 
					                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
					                                         f32 %166 = OpDot %162 %165 
					                                Private f32* %168 = OpAccessChain %9 %71 
					                                                      OpStore %168 %166 
					                                       f32_3 %169 = OpLoad %161 
					                              Uniform f32_4* %170 = OpAccessChain %22 %25 %25 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %169 %172 
					                                Private f32* %175 = OpAccessChain %9 %174 
					                                                      OpStore %175 %173 
					                                       f32_3 %176 = OpLoad %161 
					                              Uniform f32_4* %177 = OpAccessChain %22 %25 %37 
					                                       f32_4 %178 = OpLoad %177 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpDot %176 %179 
					                                Private f32* %182 = OpAccessChain %9 %181 
					                                                      OpStore %182 %180 
					                                       f32_4 %184 = OpLoad %9 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                       f32_4 %186 = OpLoad %9 
					                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
					                                         f32 %188 = OpDot %185 %187 
					                                                      OpStore %183 %188 
					                                         f32 %189 = OpLoad %183 
					                                         f32 %190 = OpExtInst %1 32 %189 
					                                                      OpStore %183 %190 
					                                         f32 %191 = OpLoad %183 
					                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                       f32_3 %195 = OpFMul %192 %194 
					                                       f32_4 %196 = OpLoad %9 
					                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
					                                                      OpStore %9 %197 
					                                       f32_4 %199 = OpLoad %198 
					                                       f32_3 %200 = OpVectorShuffle %199 %199 1 1 1 
					                              Uniform f32_4* %201 = OpAccessChain %22 %24 %25 
					                                       f32_4 %202 = OpLoad %201 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 1 2 0 
					                                       f32_3 %204 = OpFMul %200 %203 
					                                       f32_4 %205 = OpLoad %45 
					                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 6 3 
					                                                      OpStore %45 %206 
					                              Uniform f32_4* %207 = OpAccessChain %22 %24 %24 
					                                       f32_4 %208 = OpLoad %207 
					                                       f32_3 %209 = OpVectorShuffle %208 %208 1 2 0 
					                                       f32_4 %210 = OpLoad %198 
					                                       f32_3 %211 = OpVectorShuffle %210 %210 0 0 0 
					                                       f32_3 %212 = OpFMul %209 %211 
					                                       f32_4 %213 = OpLoad %45 
					                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
					                                       f32_3 %215 = OpFAdd %212 %214 
					                                       f32_4 %216 = OpLoad %45 
					                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
					                                                      OpStore %45 %217 
					                              Uniform f32_4* %218 = OpAccessChain %22 %24 %37 
					                                       f32_4 %219 = OpLoad %218 
					                                       f32_3 %220 = OpVectorShuffle %219 %219 1 2 0 
					                                       f32_4 %221 = OpLoad %198 
					                                       f32_3 %222 = OpVectorShuffle %221 %221 2 2 2 
					                                       f32_3 %223 = OpFMul %220 %222 
					                                       f32_4 %224 = OpLoad %45 
					                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
					                                       f32_3 %226 = OpFAdd %223 %225 
					                                       f32_4 %227 = OpLoad %45 
					                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
					                                                      OpStore %45 %228 
					                                       f32_4 %229 = OpLoad %45 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
					                                       f32_4 %231 = OpLoad %45 
					                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
					                                         f32 %233 = OpDot %230 %232 
					                                                      OpStore %183 %233 
					                                         f32 %234 = OpLoad %183 
					                                         f32 %235 = OpExtInst %1 32 %234 
					                                                      OpStore %183 %235 
					                                         f32 %236 = OpLoad %183 
					                                       f32_3 %237 = OpCompositeConstruct %236 %236 %236 
					                                       f32_4 %238 = OpLoad %45 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                       f32_3 %240 = OpFMul %237 %239 
					                                       f32_4 %241 = OpLoad %45 
					                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
					                                                      OpStore %45 %242 
					                                       f32_4 %243 = OpLoad %9 
					                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
					                                       f32_4 %245 = OpLoad %45 
					                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
					                                       f32_3 %247 = OpFMul %244 %246 
					                                       f32_4 %248 = OpLoad %51 
					                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
					                                                      OpStore %51 %249 
					                                       f32_4 %250 = OpLoad %9 
					                                       f32_3 %251 = OpVectorShuffle %250 %250 2 0 1 
					                                       f32_4 %252 = OpLoad %45 
					                                       f32_3 %253 = OpVectorShuffle %252 %252 1 2 0 
					                                       f32_3 %254 = OpFMul %251 %253 
					                                       f32_4 %255 = OpLoad %51 
					                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
					                                       f32_3 %257 = OpFNegate %256 
					                                       f32_3 %258 = OpFAdd %254 %257 
					                                       f32_4 %259 = OpLoad %51 
					                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
					                                                      OpStore %51 %260 
					                                  Input f32* %263 = OpAccessChain %198 %261 
					                                         f32 %264 = OpLoad %263 
					                                Uniform f32* %266 = OpAccessChain %22 %37 %261 
					                                         f32 %267 = OpLoad %266 
					                                         f32 %268 = OpFMul %264 %267 
					                                                      OpStore %183 %268 
					                                         f32 %269 = OpLoad %183 
					                                       f32_3 %270 = OpCompositeConstruct %269 %269 %269 
					                                       f32_4 %271 = OpLoad %51 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
					                                       f32_3 %273 = OpFMul %270 %272 
					                                       f32_4 %274 = OpLoad %51 
					                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
					                                                      OpStore %51 %275 
					                                Private f32* %277 = OpAccessChain %51 %181 
					                                         f32 %278 = OpLoad %277 
					                                 Output f32* %280 = OpAccessChain vs_TEXCOORD1 %71 
					                                                      OpStore %280 %278 
					                                Private f32* %281 = OpAccessChain %45 %174 
					                                         f32 %282 = OpLoad %281 
					                                 Output f32* %283 = OpAccessChain vs_TEXCOORD1 %181 
					                                                      OpStore %283 %282 
					                                Private f32* %284 = OpAccessChain %9 %71 
					                                         f32 %285 = OpLoad %284 
					                                 Output f32* %286 = OpAccessChain vs_TEXCOORD1 %174 
					                                                      OpStore %286 %285 
					                                Private f32* %288 = OpAccessChain %45 %181 
					                                         f32 %289 = OpLoad %288 
					                                 Output f32* %290 = OpAccessChain vs_TEXCOORD2 %181 
					                                                      OpStore %290 %289 
					                                Private f32* %292 = OpAccessChain %45 %71 
					                                         f32 %293 = OpLoad %292 
					                                 Output f32* %294 = OpAccessChain vs_TEXCOORD3 %181 
					                                                      OpStore %294 %293 
					                                Private f32* %295 = OpAccessChain %9 %174 
					                                         f32 %296 = OpLoad %295 
					                                 Output f32* %297 = OpAccessChain vs_TEXCOORD2 %174 
					                                                      OpStore %297 %296 
					                                Private f32* %298 = OpAccessChain %9 %181 
					                                         f32 %299 = OpLoad %298 
					                                 Output f32* %300 = OpAccessChain vs_TEXCOORD3 %174 
					                                                      OpStore %300 %299 
					                                Private f32* %301 = OpAccessChain %51 %71 
					                                         f32 %302 = OpLoad %301 
					                                 Output f32* %303 = OpAccessChain vs_TEXCOORD2 %71 
					                                                      OpStore %303 %302 
					                                Private f32* %304 = OpAccessChain %51 %174 
					                                         f32 %305 = OpLoad %304 
					                                 Output f32* %306 = OpAccessChain vs_TEXCOORD3 %71 
					                                                      OpStore %306 %305 
					                                       f32_4 %309 = OpLoad %308 
					                                                      OpStore %307 %309 
					                                                      OpStore vs_TEXCOORD5 %312 
					                                 Output f32* %313 = OpAccessChain %75 %24 %71 
					                                         f32 %314 = OpLoad %313 
					                                         f32 %315 = OpFNegate %314 
					                                 Output f32* %316 = OpAccessChain %75 %24 %71 
					                                                      OpStore %316 %315 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 396
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %22 %65 %70 %76 %96 %365 %372 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 DescriptorSet 12 
					                                                      OpDecorate %12 Binding 12 
					                                                      OpDecorate %16 DescriptorSet 16 
					                                                      OpDecorate %16 Binding 16 
					                                                      OpDecorate vs_TEXCOORD0 Location 22 
					                                                      OpDecorate vs_TEXCOORD1 Location 65 
					                                                      OpDecorate vs_TEXCOORD2 Location 70 
					                                                      OpDecorate vs_TEXCOORD3 Location 76 
					                                                      OpDecorate vs_TEXCOORD4 Location 96 
					                                                      OpDecorate %100 ArrayStride 100 
					                                                      OpMemberDecorate %101 0 Offset 101 
					                                                      OpMemberDecorate %101 1 Offset 101 
					                                                      OpMemberDecorate %101 2 Offset 101 
					                                                      OpMemberDecorate %101 3 Offset 101 
					                                                      OpMemberDecorate %101 4 Offset 101 
					                                                      OpDecorate %101 Block 
					                                                      OpDecorate %103 DescriptorSet 103 
					                                                      OpDecorate %103 Binding 103 
					                                                      OpDecorate %299 DescriptorSet 299 
					                                                      OpDecorate %299 Binding 299 
					                                                      OpDecorate %301 DescriptorSet 301 
					                                                      OpDecorate %301 Binding 301 
					                                                      OpDecorate %350 DescriptorSet 350 
					                                                      OpDecorate %350 Binding 350 
					                                                      OpDecorate %352 DescriptorSet 352 
					                                                      OpDecorate %352 Binding 352 
					                                                      OpDecorate %365 Location 365 
					                                                      OpDecorate %372 Location 372 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %11 = OpTypePointer UniformConstant %10 
					         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                              %14 = OpTypeSampler 
					                                              %15 = OpTypePointer UniformConstant %14 
					                     UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                              %18 = OpTypeSampledImage %10 
					                                              %20 = OpTypeVector %6 2 
					                                              %21 = OpTypePointer Input %20 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                              %24 = OpTypeVector %6 4 
					                                              %27 = OpTypeInt 32 0 
					                                          u32 %28 = OpConstant 2 
					                                              %29 = OpTypePointer Private %6 
					                                          u32 %32 = OpConstant 0 
					                                          f32 %39 = OpConstant 3,674022E-40 
					                                        f32_2 %40 = OpConstantComposite %39 %39 
					                                          f32 %42 = OpConstant 3,674022E-40 
					                                        f32_2 %43 = OpConstantComposite %42 %42 
					                                 Private f32* %47 = OpVariable Private 
					                                          f32 %54 = OpConstant 3,674022E-40 
					                                              %62 = OpTypePointer Private %24 
					                               Private f32_4* %63 = OpVariable Private 
					                                              %64 = OpTypePointer Input %7 
					                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %74 = OpConstant 1 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                                          u32 %99 = OpConstant 4 
					                                             %100 = OpTypeArray %24 %99 
					                                             %101 = OpTypeStruct %7 %24 %24 %100 %24 
					                                             %102 = OpTypePointer Uniform %101 
					Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4;}* %103 = OpVariable Uniform 
					                                             %104 = OpTypeInt 32 1 
					                                         i32 %105 = OpConstant 0 
					                                             %106 = OpTypePointer Uniform %7 
					                              Private f32_3* %119 = OpVariable Private 
					                                         i32 %130 = OpConstant 1 
					                                             %131 = OpTypePointer Uniform %24 
					                                         f32 %149 = OpConstant 3,674022E-40 
					                                Private f32* %152 = OpVariable Private 
					                                Private f32* %157 = OpVariable Private 
					                                         f32 %164 = OpConstant 3,674022E-40 
					                                         f32 %166 = OpConstant 3,674022E-40 
					                                         f32 %174 = OpConstant 3,674022E-40 
					                                         f32 %191 = OpConstant 3,674022E-40 
					                                         f32 %221 = OpConstant 3,674022E-40 
					                                Private f32* %229 = OpVariable Private 
					                                Private f32* %234 = OpVariable Private 
					                                         i32 %261 = OpConstant 3 
					                                         i32 %279 = OpConstant 2 
					        UniformConstant read_only Texture2D* %299 = OpVariable UniformConstant 
					                    UniformConstant sampler* %301 = OpVariable UniformConstant 
					                                         u32 %307 = OpConstant 3 
					                                         f32 %342 = OpConstant 3,674022E-40 
					                                         f32 %344 = OpConstant 3,674022E-40 
					        UniformConstant read_only Texture2D* %350 = OpVariable UniformConstant 
					                    UniformConstant sampler* %352 = OpVariable UniformConstant 
					                                         i32 %358 = OpConstant 4 
					                                             %364 = OpTypePointer Input %24 
					                                Input f32_4* %365 = OpVariable Input 
					                                             %371 = OpTypePointer Output %24 
					                               Output f32_4* %372 = OpVariable Output 
					                                             %375 = OpTypePointer Input %6 
					                                             %379 = OpTypePointer Output %6 
					                                       f32_3 %383 = OpConstantComposite %342 %342 %342 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                          read_only Texture2D %13 = OpLoad %12 
					                                      sampler %17 = OpLoad %16 
					                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
					                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 3 
					                                                      OpStore %9 %26 
					                                 Private f32* %30 = OpAccessChain %9 %28 
					                                          f32 %31 = OpLoad %30 
					                                 Private f32* %33 = OpAccessChain %9 %32 
					                                          f32 %34 = OpLoad %33 
					                                          f32 %35 = OpFMul %31 %34 
					                                 Private f32* %36 = OpAccessChain %9 %32 
					                                                      OpStore %36 %35 
					                                        f32_3 %37 = OpLoad %9 
					                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
					                                        f32_2 %41 = OpFMul %38 %40 
					                                        f32_2 %44 = OpFAdd %41 %43 
					                                        f32_3 %45 = OpLoad %9 
					                                        f32_3 %46 = OpVectorShuffle %45 %44 3 4 2 
					                                                      OpStore %9 %46 
					                                        f32_3 %48 = OpLoad %9 
					                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
					                                        f32_3 %50 = OpLoad %9 
					                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
					                                          f32 %52 = OpDot %49 %51 
					                                                      OpStore %47 %52 
					                                          f32 %53 = OpLoad %47 
					                                          f32 %55 = OpExtInst %1 37 %53 %54 
					                                                      OpStore %47 %55 
					                                          f32 %56 = OpLoad %47 
					                                          f32 %57 = OpFNegate %56 
					                                          f32 %58 = OpFAdd %57 %54 
					                                                      OpStore %47 %58 
					                                          f32 %59 = OpLoad %47 
					                                          f32 %60 = OpExtInst %1 31 %59 
					                                 Private f32* %61 = OpAccessChain %9 %28 
					                                                      OpStore %61 %60 
					                                        f32_3 %66 = OpLoad vs_TEXCOORD1 
					                                        f32_3 %67 = OpLoad %9 
					                                          f32 %68 = OpDot %66 %67 
					                                 Private f32* %69 = OpAccessChain %63 %32 
					                                                      OpStore %69 %68 
					                                        f32_3 %71 = OpLoad vs_TEXCOORD2 
					                                        f32_3 %72 = OpLoad %9 
					                                          f32 %73 = OpDot %71 %72 
					                                 Private f32* %75 = OpAccessChain %63 %74 
					                                                      OpStore %75 %73 
					                                        f32_3 %77 = OpLoad vs_TEXCOORD3 
					                                        f32_3 %78 = OpLoad %9 
					                                          f32 %79 = OpDot %77 %78 
					                                 Private f32* %80 = OpAccessChain %63 %28 
					                                                      OpStore %80 %79 
					                                        f32_4 %81 = OpLoad %63 
					                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
					                                        f32_4 %83 = OpLoad %63 
					                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
					                                          f32 %85 = OpDot %82 %84 
					                                 Private f32* %86 = OpAccessChain %9 %32 
					                                                      OpStore %86 %85 
					                                 Private f32* %87 = OpAccessChain %9 %32 
					                                          f32 %88 = OpLoad %87 
					                                          f32 %89 = OpExtInst %1 32 %88 
					                                 Private f32* %90 = OpAccessChain %9 %32 
					                                                      OpStore %90 %89 
					                                        f32_3 %91 = OpLoad %9 
					                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
					                                        f32_4 %93 = OpLoad %63 
					                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
					                                        f32_3 %95 = OpFMul %92 %94 
					                                                      OpStore %9 %95 
					                                        f32_3 %97 = OpLoad vs_TEXCOORD4 
					                                        f32_3 %98 = OpFNegate %97 
					                              Uniform f32_3* %107 = OpAccessChain %103 %105 
					                                       f32_3 %108 = OpLoad %107 
					                                       f32_3 %109 = OpFAdd %98 %108 
					                                       f32_4 %110 = OpLoad %63 
					                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
					                                                      OpStore %63 %111 
					                                       f32_4 %112 = OpLoad %63 
					                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
					                                       f32_4 %114 = OpLoad %63 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                         f32 %116 = OpDot %113 %115 
					                                                      OpStore %47 %116 
					                                         f32 %117 = OpLoad %47 
					                                         f32 %118 = OpExtInst %1 32 %117 
					                                                      OpStore %47 %118 
					                                         f32 %120 = OpLoad %47 
					                                       f32_3 %121 = OpCompositeConstruct %120 %120 %120 
					                                       f32_4 %122 = OpLoad %63 
					                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
					                                       f32_3 %124 = OpFMul %121 %123 
					                                                      OpStore %119 %124 
					                                       f32_4 %125 = OpLoad %63 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
					                                         f32 %127 = OpLoad %47 
					                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
					                                       f32_3 %129 = OpFMul %126 %128 
					                              Uniform f32_4* %132 = OpAccessChain %103 %130 
					                                       f32_4 %133 = OpLoad %132 
					                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
					                                       f32_3 %135 = OpFAdd %129 %134 
					                                       f32_4 %136 = OpLoad %63 
					                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
					                                                      OpStore %63 %137 
					                                       f32_3 %138 = OpLoad %9 
					                                       f32_3 %139 = OpLoad %119 
					                                         f32 %140 = OpDot %138 %139 
					                                                      OpStore %47 %140 
					                                       f32_3 %141 = OpLoad %9 
					                              Uniform f32_4* %142 = OpAccessChain %103 %130 
					                                       f32_4 %143 = OpLoad %142 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
					                                         f32 %145 = OpDot %141 %144 
					                                Private f32* %146 = OpAccessChain %9 %32 
					                                                      OpStore %146 %145 
					                                Private f32* %147 = OpAccessChain %9 %32 
					                                         f32 %148 = OpLoad %147 
					                                         f32 %150 = OpExtInst %1 43 %148 %149 %54 
					                                Private f32* %151 = OpAccessChain %9 %32 
					                                                      OpStore %151 %150 
					                                         f32 %153 = OpLoad %47 
					                                         f32 %154 = OpExtInst %1 4 %153 
					                                         f32 %155 = OpFNegate %154 
					                                         f32 %156 = OpFAdd %155 %54 
					                                                      OpStore %152 %156 
					                                         f32 %158 = OpLoad %47 
					                                         f32 %159 = OpExtInst %1 4 %158 
					                                Private f32* %160 = OpAccessChain %9 %32 
					                                         f32 %161 = OpLoad %160 
					                                         f32 %162 = OpFAdd %159 %161 
					                                                      OpStore %157 %162 
					                                         f32 %163 = OpLoad %157 
					                                         f32 %165 = OpFAdd %163 %164 
					                                                      OpStore %157 %165 
					                                         f32 %167 = OpLoad %157 
					                                         f32 %168 = OpFDiv %166 %167 
					                                                      OpStore %157 %168 
					                                Private f32* %169 = OpAccessChain %9 %32 
					                                         f32 %170 = OpLoad %169 
					                                         f32 %171 = OpLoad %157 
					                                         f32 %172 = OpFMul %170 %171 
					                                                      OpStore %157 %172 
					                                         f32 %173 = OpLoad %157 
					                                         f32 %175 = OpFMul %173 %174 
					                                                      OpStore %157 %175 
					                                         f32 %176 = OpLoad %152 
					                                         f32 %177 = OpLoad %152 
					                                         f32 %178 = OpFMul %176 %177 
					                                                      OpStore %47 %178 
					                                         f32 %179 = OpLoad %47 
					                                         f32 %180 = OpLoad %47 
					                                         f32 %181 = OpFMul %179 %180 
					                                                      OpStore %47 %181 
					                                         f32 %182 = OpLoad %152 
					                                         f32 %183 = OpLoad %47 
					                                         f32 %184 = OpFMul %182 %183 
					                                                      OpStore %152 %184 
					                                       f32_4 %185 = OpLoad %63 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_4 %187 = OpLoad %63 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                         f32 %189 = OpDot %186 %188 
					                                                      OpStore %47 %189 
					                                         f32 %190 = OpLoad %47 
					                                         f32 %192 = OpExtInst %1 40 %190 %191 
					                                                      OpStore %47 %192 
					                                         f32 %193 = OpLoad %47 
					                                         f32 %194 = OpExtInst %1 32 %193 
					                                                      OpStore %47 %194 
					                                         f32 %195 = OpLoad %47 
					                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
					                                       f32_4 %197 = OpLoad %63 
					                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
					                                       f32_3 %199 = OpFMul %196 %198 
					                                       f32_4 %200 = OpLoad %63 
					                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
					                                                      OpStore %63 %201 
					                              Uniform f32_4* %202 = OpAccessChain %103 %130 
					                                       f32_4 %203 = OpLoad %202 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
					                                       f32_4 %205 = OpLoad %63 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
					                                         f32 %207 = OpDot %204 %206 
					                                                      OpStore %47 %207 
					                                         f32 %208 = OpLoad %47 
					                                         f32 %209 = OpExtInst %1 43 %208 %149 %54 
					                                                      OpStore %47 %209 
					                                         f32 %210 = OpLoad %47 
					                                       f32_2 %211 = OpCompositeConstruct %210 %210 
					                                         f32 %212 = OpLoad %47 
					                                       f32_2 %213 = OpCompositeConstruct %212 %212 
					                                         f32 %214 = OpDot %211 %213 
					                                Private f32* %215 = OpAccessChain %63 %32 
					                                                      OpStore %215 %214 
					                                         f32 %216 = OpLoad %47 
					                                         f32 %217 = OpFNegate %216 
					                                         f32 %218 = OpFAdd %217 %54 
					                                                      OpStore %47 %218 
					                                Private f32* %219 = OpAccessChain %63 %32 
					                                         f32 %220 = OpLoad %219 
					                                         f32 %222 = OpFAdd %220 %221 
					                                Private f32* %223 = OpAccessChain %63 %32 
					                                                      OpStore %223 %222 
					                                Private f32* %224 = OpAccessChain %63 %32 
					                                         f32 %225 = OpLoad %224 
					                                         f32 %226 = OpLoad %152 
					                                         f32 %227 = OpFMul %225 %226 
					                                         f32 %228 = OpFAdd %227 %54 
					                                                      OpStore %152 %228 
					                                Private f32* %230 = OpAccessChain %9 %32 
					                                         f32 %231 = OpLoad %230 
					                                         f32 %232 = OpFNegate %231 
					                                         f32 %233 = OpFAdd %232 %54 
					                                                      OpStore %229 %233 
					                                         f32 %235 = OpLoad %229 
					                                         f32 %236 = OpLoad %229 
					                                         f32 %237 = OpFMul %235 %236 
					                                                      OpStore %234 %237 
					                                         f32 %238 = OpLoad %234 
					                                         f32 %239 = OpLoad %234 
					                                         f32 %240 = OpFMul %238 %239 
					                                                      OpStore %234 %240 
					                                         f32 %241 = OpLoad %229 
					                                         f32 %242 = OpLoad %234 
					                                         f32 %243 = OpFMul %241 %242 
					                                                      OpStore %229 %243 
					                                Private f32* %244 = OpAccessChain %63 %32 
					                                         f32 %245 = OpLoad %244 
					                                         f32 %246 = OpLoad %229 
					                                         f32 %247 = OpFMul %245 %246 
					                                         f32 %248 = OpFAdd %247 %54 
					                                Private f32* %249 = OpAccessChain %63 %32 
					                                                      OpStore %249 %248 
					                                         f32 %250 = OpLoad %152 
					                                Private f32* %251 = OpAccessChain %63 %32 
					                                         f32 %252 = OpLoad %251 
					                                         f32 %253 = OpFMul %250 %252 
					                                                      OpStore %152 %253 
					                                Private f32* %254 = OpAccessChain %9 %32 
					                                         f32 %255 = OpLoad %254 
					                                         f32 %256 = OpLoad %152 
					                                         f32 %257 = OpFMul %255 %256 
					                                Private f32* %258 = OpAccessChain %9 %32 
					                                                      OpStore %258 %257 
					                                       f32_3 %259 = OpLoad vs_TEXCOORD4 
					                                       f32_2 %260 = OpVectorShuffle %259 %259 1 1 
					                              Uniform f32_4* %262 = OpAccessChain %103 %261 %130 
					                                       f32_4 %263 = OpLoad %262 
					                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
					                                       f32_2 %265 = OpFMul %260 %264 
					                                       f32_4 %266 = OpLoad %63 
					                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 2 3 
					                                                      OpStore %63 %267 
					                              Uniform f32_4* %268 = OpAccessChain %103 %261 %105 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
					                                       f32_3 %271 = OpLoad vs_TEXCOORD4 
					                                       f32_2 %272 = OpVectorShuffle %271 %271 0 0 
					                                       f32_2 %273 = OpFMul %270 %272 
					                                       f32_4 %274 = OpLoad %63 
					                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
					                                       f32_2 %276 = OpFAdd %273 %275 
					                                       f32_4 %277 = OpLoad %63 
					                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
					                                                      OpStore %63 %278 
					                              Uniform f32_4* %280 = OpAccessChain %103 %261 %279 
					                                       f32_4 %281 = OpLoad %280 
					                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
					                                       f32_3 %283 = OpLoad vs_TEXCOORD4 
					                                       f32_2 %284 = OpVectorShuffle %283 %283 2 2 
					                                       f32_2 %285 = OpFMul %282 %284 
					                                       f32_4 %286 = OpLoad %63 
					                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
					                                       f32_2 %288 = OpFAdd %285 %287 
					                                       f32_4 %289 = OpLoad %63 
					                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
					                                                      OpStore %63 %290 
					                                       f32_4 %291 = OpLoad %63 
					                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
					                              Uniform f32_4* %293 = OpAccessChain %103 %261 %261 
					                                       f32_4 %294 = OpLoad %293 
					                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
					                                       f32_2 %296 = OpFAdd %292 %295 
					                                       f32_4 %297 = OpLoad %63 
					                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
					                                                      OpStore %63 %298 
					                         read_only Texture2D %300 = OpLoad %299 
					                                     sampler %302 = OpLoad %301 
					                  read_only Texture2DSampled %303 = OpSampledImage %300 %302 
					                                       f32_4 %304 = OpLoad %63 
					                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
					                                       f32_4 %306 = OpImageSampleImplicitLod %303 %305 
					                                         f32 %308 = OpCompositeExtract %306 3 
					                                                      OpStore %152 %308 
					                                         f32 %309 = OpLoad %152 
					                                       f32_3 %310 = OpCompositeConstruct %309 %309 %309 
					                              Uniform f32_4* %311 = OpAccessChain %103 %279 
					                                       f32_4 %312 = OpLoad %311 
					                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
					                                       f32_3 %314 = OpFMul %310 %313 
					                                       f32_4 %315 = OpLoad %63 
					                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
					                                                      OpStore %63 %316 
					                                       f32_3 %317 = OpLoad %9 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 0 0 0 
					                                       f32_4 %319 = OpLoad %63 
					                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
					                                       f32_3 %321 = OpFMul %318 %320 
					                                                      OpStore %119 %321 
					                                         f32 %322 = OpLoad %157 
					                                       f32_3 %323 = OpCompositeConstruct %322 %322 %322 
					                                       f32_4 %324 = OpLoad %63 
					                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
					                                       f32_3 %326 = OpFMul %323 %325 
					                                                      OpStore %9 %326 
					                                         f32 %327 = OpLoad %47 
					                                         f32 %328 = OpLoad %47 
					                                         f32 %329 = OpFMul %327 %328 
					                                Private f32* %330 = OpAccessChain %63 %32 
					                                                      OpStore %330 %329 
					                                Private f32* %331 = OpAccessChain %63 %32 
					                                         f32 %332 = OpLoad %331 
					                                Private f32* %333 = OpAccessChain %63 %32 
					                                         f32 %334 = OpLoad %333 
					                                         f32 %335 = OpFMul %332 %334 
					                                Private f32* %336 = OpAccessChain %63 %32 
					                                                      OpStore %336 %335 
					                                         f32 %337 = OpLoad %47 
					                                Private f32* %338 = OpAccessChain %63 %32 
					                                         f32 %339 = OpLoad %338 
					                                         f32 %340 = OpFMul %337 %339 
					                                                      OpStore %47 %340 
					                                         f32 %341 = OpLoad %47 
					                                         f32 %343 = OpFMul %341 %342 
					                                         f32 %345 = OpFAdd %343 %344 
					                                                      OpStore %47 %345 
					                                         f32 %346 = OpLoad %47 
					                                       f32_3 %347 = OpCompositeConstruct %346 %346 %346 
					                                       f32_3 %348 = OpLoad %9 
					                                       f32_3 %349 = OpFMul %347 %348 
					                                                      OpStore %9 %349 
					                         read_only Texture2D %351 = OpLoad %350 
					                                     sampler %353 = OpLoad %352 
					                  read_only Texture2DSampled %354 = OpSampledImage %351 %353 
					                                       f32_2 %355 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %356 = OpImageSampleImplicitLod %354 %355 
					                                                      OpStore %63 %356 
					                                       f32_4 %357 = OpLoad %63 
					                              Uniform f32_4* %359 = OpAccessChain %103 %358 
					                                       f32_4 %360 = OpLoad %359 
					                                       f32_4 %361 = OpFMul %357 %360 
					                                                      OpStore %63 %361 
					                                       f32_4 %362 = OpLoad %63 
					                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
					                                       f32_4 %366 = OpLoad %365 
					                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
					                                       f32_3 %368 = OpFMul %363 %367 
					                                       f32_4 %369 = OpLoad %63 
					                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
					                                                      OpStore %63 %370 
					                                Private f32* %373 = OpAccessChain %63 %307 
					                                         f32 %374 = OpLoad %373 
					                                  Input f32* %376 = OpAccessChain %365 %307 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %374 %377 
					                                 Output f32* %380 = OpAccessChain %372 %307 
					                                                      OpStore %380 %378 
					                                       f32_4 %381 = OpLoad %63 
					                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
					                                       f32_3 %384 = OpFMul %382 %383 
					                                       f32_4 %385 = OpLoad %63 
					                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
					                                                      OpStore %63 %386 
					                                       f32_4 %387 = OpLoad %63 
					                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
					                                       f32_3 %389 = OpLoad %119 
					                                       f32_3 %390 = OpFMul %388 %389 
					                                       f32_3 %391 = OpLoad %9 
					                                       f32_3 %392 = OpFAdd %390 %391 
					                                       f32_4 %393 = OpLoad %372 
					                                       f32_4 %394 = OpVectorShuffle %393 %392 4 5 6 3 
					                                                      OpStore %372 %394 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat10 = -abs(u_xlat9) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat11) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = max(u_xlat11, 0.00100000005);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat6 = (-u_xlat1.x) + 1.0;
					    u_xlat3 = u_xlat3 + -0.5;
					    u_xlat1.x = u_xlat3 * u_xlat10 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat3 = u_xlat3 * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat1.x * u_xlat3;
					    u_xlat3 = u_xlat0.x * u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat3 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat3 = u_xlat3 + 9.99999975e-06;
					    u_xlat3 = 0.5 / u_xlat3;
					    u_xlat3 = u_xlat3 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD7 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "FOG_LINEAR" "POINT" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 316
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %82 %87 %94 %95 %109 %144 %217 %227 %231 %247 %264 %265 %267 %301 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %80 0 BuiltIn 80 
					                                                      OpMemberDecorate %80 1 BuiltIn 80 
					                                                      OpMemberDecorate %80 2 BuiltIn 80 
					                                                      OpDecorate %80 Block 
					                                                      OpDecorate vs_TEXCOORD7 Location 87 
					                                                      OpDecorate vs_TEXCOORD0 Location 94 
					                                                      OpDecorate %95 Location 95 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %144 Location 144 
					                                                      OpDecorate vs_TEXCOORD1 Location 217 
					                                                      OpDecorate vs_TEXCOORD2 Location 227 
					                                                      OpDecorate vs_TEXCOORD3 Location 231 
					                                                      OpDecorate vs_TEXCOORD4 Location 247 
					                                                      OpDecorate %264 Location 264 
					                                                      OpDecorate %265 Location 265 
					                                                      OpDecorate vs_TEXCOORD5 Location 267 
					                                                      OpDecorate vs_TEXCOORD6 Location 301 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeArray %7 %15 
					                                              %20 = OpTypeStruct %16 %17 %7 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %37 = OpConstant 2 
					                               Private f32_4* %45 = OpVariable Private 
					                                          i32 %47 = OpConstant 3 
					                               Private f32_4* %51 = OpVariable Private 
					                                          u32 %78 = OpConstant 1 
					                                              %79 = OpTypeArray %6 %78 
					                                              %80 = OpTypeStruct %7 %6 %79 
					                                              %81 = OpTypePointer Output %80 
					         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
					                                              %84 = OpTypePointer Output %7 
					                                              %86 = OpTypePointer Output %6 
					                         Output f32* vs_TEXCOORD7 = OpVariable Output 
					                                          u32 %88 = OpConstant 2 
					                                              %89 = OpTypePointer Private %6 
					                                              %92 = OpTypeVector %6 2 
					                                              %93 = OpTypePointer Output %92 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                 Input f32_4* %95 = OpVariable Input 
					                                          i32 %98 = OpConstant 5 
					                                             %107 = OpTypeVector %6 3 
					                                             %108 = OpTypePointer Input %107 
					                                Input f32_3* %109 = OpVariable Input 
					                                         u32 %127 = OpConstant 0 
					                                Private f32* %129 = OpVariable Private 
					                                Input f32_4* %144 = OpVariable Input 
					                                             %189 = OpTypePointer Private %107 
					                              Private f32_3* %190 = OpVariable Private 
					                                         u32 %204 = OpConstant 3 
					                                             %205 = OpTypePointer Input %6 
					                                             %208 = OpTypePointer Uniform %6 
					                                             %216 = OpTypePointer Output %107 
					                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %264 = OpVariable Output 
					                                Input f32_4* %265 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %268 = OpConstant 3,674022E-40 
					                                       f32_4 %269 = OpConstantComposite %268 %268 %268 %268 
					                                         i32 %272 = OpConstant 4 
					                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
					                                        f32_4 %31 = OpLoad %30 
					                                        f32_4 %32 = OpLoad %11 
					                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
					                                        f32_4 %34 = OpFMul %31 %33 
					                                        f32_4 %35 = OpLoad %9 
					                                        f32_4 %36 = OpFAdd %34 %35 
					                                                      OpStore %9 %36 
					                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_4 %40 = OpLoad %11 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
					                                        f32_4 %42 = OpFMul %39 %41 
					                                        f32_4 %43 = OpLoad %9 
					                                        f32_4 %44 = OpFAdd %42 %43 
					                                                      OpStore %9 %44 
					                                        f32_4 %46 = OpLoad %9 
					                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpFAdd %46 %49 
					                                                      OpStore %45 %50 
					                                        f32_4 %52 = OpLoad %45 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
					                               Uniform f32_4* %54 = OpAccessChain %22 %47 %25 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_4 %56 = OpFMul %53 %55 
					                                                      OpStore %51 %56 
					                               Uniform f32_4* %57 = OpAccessChain %22 %47 %24 
					                                        f32_4 %58 = OpLoad %57 
					                                        f32_4 %59 = OpLoad %45 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
					                                        f32_4 %61 = OpFMul %58 %60 
					                                        f32_4 %62 = OpLoad %51 
					                                        f32_4 %63 = OpFAdd %61 %62 
					                                                      OpStore %51 %63 
					                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpLoad %45 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
					                                        f32_4 %68 = OpFMul %65 %67 
					                                        f32_4 %69 = OpLoad %51 
					                                        f32_4 %70 = OpFAdd %68 %69 
					                                                      OpStore %51 %70 
					                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
					                                        f32_4 %72 = OpLoad %71 
					                                        f32_4 %73 = OpLoad %45 
					                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
					                                        f32_4 %75 = OpFMul %72 %74 
					                                        f32_4 %76 = OpLoad %51 
					                                        f32_4 %77 = OpFAdd %75 %76 
					                                                      OpStore %45 %77 
					                                        f32_4 %83 = OpLoad %45 
					                                Output f32_4* %85 = OpAccessChain %82 %24 
					                                                      OpStore %85 %83 
					                                 Private f32* %90 = OpAccessChain %45 %88 
					                                          f32 %91 = OpLoad %90 
					                                                      OpStore vs_TEXCOORD7 %91 
					                                        f32_4 %96 = OpLoad %95 
					                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
					                               Uniform f32_4* %99 = OpAccessChain %22 %98 
					                                       f32_4 %100 = OpLoad %99 
					                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
					                                       f32_2 %102 = OpFMul %97 %101 
					                              Uniform f32_4* %103 = OpAccessChain %22 %98 
					                                       f32_4 %104 = OpLoad %103 
					                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
					                                       f32_2 %106 = OpFAdd %102 %105 
					                                                      OpStore vs_TEXCOORD0 %106 
					                                       f32_3 %110 = OpLoad %109 
					                              Uniform f32_4* %111 = OpAccessChain %22 %25 %24 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
					                                         f32 %114 = OpDot %110 %113 
					                                Private f32* %115 = OpAccessChain %45 %78 
					                                                      OpStore %115 %114 
					                                       f32_3 %116 = OpLoad %109 
					                              Uniform f32_4* %117 = OpAccessChain %22 %25 %25 
					                                       f32_4 %118 = OpLoad %117 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                         f32 %120 = OpDot %116 %119 
					                                Private f32* %121 = OpAccessChain %45 %88 
					                                                      OpStore %121 %120 
					                                       f32_3 %122 = OpLoad %109 
					                              Uniform f32_4* %123 = OpAccessChain %22 %25 %37 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %128 = OpAccessChain %45 %127 
					                                                      OpStore %128 %126 
					                                       f32_4 %130 = OpLoad %45 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                       f32_4 %132 = OpLoad %45 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %131 %133 
					                                                      OpStore %129 %134 
					                                         f32 %135 = OpLoad %129 
					                                         f32 %136 = OpExtInst %1 32 %135 
					                                                      OpStore %129 %136 
					                                         f32 %137 = OpLoad %129 
					                                       f32_3 %138 = OpCompositeConstruct %137 %137 %137 
					                                       f32_4 %139 = OpLoad %45 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                       f32_3 %141 = OpFMul %138 %140 
					                                       f32_4 %142 = OpLoad %45 
					                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
					                                                      OpStore %45 %143 
					                                       f32_4 %145 = OpLoad %144 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 1 1 1 
					                              Uniform f32_4* %147 = OpAccessChain %22 %24 %25 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 1 2 0 
					                                       f32_3 %150 = OpFMul %146 %149 
					                                       f32_4 %151 = OpLoad %51 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %51 %152 
					                              Uniform f32_4* %153 = OpAccessChain %22 %24 %24 
					                                       f32_4 %154 = OpLoad %153 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 1 2 0 
					                                       f32_4 %156 = OpLoad %144 
					                                       f32_3 %157 = OpVectorShuffle %156 %156 0 0 0 
					                                       f32_3 %158 = OpFMul %155 %157 
					                                       f32_4 %159 = OpLoad %51 
					                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
					                                       f32_3 %161 = OpFAdd %158 %160 
					                                       f32_4 %162 = OpLoad %51 
					                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
					                                                      OpStore %51 %163 
					                              Uniform f32_4* %164 = OpAccessChain %22 %24 %37 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 1 2 0 
					                                       f32_4 %167 = OpLoad %144 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 2 2 2 
					                                       f32_3 %169 = OpFMul %166 %168 
					                                       f32_4 %170 = OpLoad %51 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                       f32_3 %172 = OpFAdd %169 %171 
					                                       f32_4 %173 = OpLoad %51 
					                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
					                                                      OpStore %51 %174 
					                                       f32_4 %175 = OpLoad %51 
					                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
					                                       f32_4 %177 = OpLoad %51 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpDot %176 %178 
					                                                      OpStore %129 %179 
					                                         f32 %180 = OpLoad %129 
					                                         f32 %181 = OpExtInst %1 32 %180 
					                                                      OpStore %129 %181 
					                                         f32 %182 = OpLoad %129 
					                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
					                                       f32_4 %184 = OpLoad %51 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                       f32_3 %186 = OpFMul %183 %185 
					                                       f32_4 %187 = OpLoad %51 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %51 %188 
					                                       f32_4 %191 = OpLoad %45 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
					                                       f32_4 %193 = OpLoad %51 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                       f32_3 %195 = OpFMul %192 %194 
					                                                      OpStore %190 %195 
					                                       f32_4 %196 = OpLoad %45 
					                                       f32_3 %197 = OpVectorShuffle %196 %196 2 0 1 
					                                       f32_4 %198 = OpLoad %51 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 1 2 0 
					                                       f32_3 %200 = OpFMul %197 %199 
					                                       f32_3 %201 = OpLoad %190 
					                                       f32_3 %202 = OpFNegate %201 
					                                       f32_3 %203 = OpFAdd %200 %202 
					                                                      OpStore %190 %203 
					                                  Input f32* %206 = OpAccessChain %144 %204 
					                                         f32 %207 = OpLoad %206 
					                                Uniform f32* %209 = OpAccessChain %22 %37 %204 
					                                         f32 %210 = OpLoad %209 
					                                         f32 %211 = OpFMul %207 %210 
					                                                      OpStore %129 %211 
					                                         f32 %212 = OpLoad %129 
					                                       f32_3 %213 = OpCompositeConstruct %212 %212 %212 
					                                       f32_3 %214 = OpLoad %190 
					                                       f32_3 %215 = OpFMul %213 %214 
					                                                      OpStore %190 %215 
					                                Private f32* %218 = OpAccessChain %190 %127 
					                                         f32 %219 = OpLoad %218 
					                                 Output f32* %220 = OpAccessChain vs_TEXCOORD1 %78 
					                                                      OpStore %220 %219 
					                                Private f32* %221 = OpAccessChain %51 %88 
					                                         f32 %222 = OpLoad %221 
					                                 Output f32* %223 = OpAccessChain vs_TEXCOORD1 %127 
					                                                      OpStore %223 %222 
					                                Private f32* %224 = OpAccessChain %45 %78 
					                                         f32 %225 = OpLoad %224 
					                                 Output f32* %226 = OpAccessChain vs_TEXCOORD1 %88 
					                                                      OpStore %226 %225 
					                                Private f32* %228 = OpAccessChain %51 %127 
					                                         f32 %229 = OpLoad %228 
					                                 Output f32* %230 = OpAccessChain vs_TEXCOORD2 %127 
					                                                      OpStore %230 %229 
					                                Private f32* %232 = OpAccessChain %51 %78 
					                                         f32 %233 = OpLoad %232 
					                                 Output f32* %234 = OpAccessChain vs_TEXCOORD3 %127 
					                                                      OpStore %234 %233 
					                                Private f32* %235 = OpAccessChain %45 %88 
					                                         f32 %236 = OpLoad %235 
					                                 Output f32* %237 = OpAccessChain vs_TEXCOORD2 %88 
					                                                      OpStore %237 %236 
					                                Private f32* %238 = OpAccessChain %45 %127 
					                                         f32 %239 = OpLoad %238 
					                                 Output f32* %240 = OpAccessChain vs_TEXCOORD3 %88 
					                                                      OpStore %240 %239 
					                                Private f32* %241 = OpAccessChain %190 %78 
					                                         f32 %242 = OpLoad %241 
					                                 Output f32* %243 = OpAccessChain vs_TEXCOORD2 %78 
					                                                      OpStore %243 %242 
					                                Private f32* %244 = OpAccessChain %190 %88 
					                                         f32 %245 = OpLoad %244 
					                                 Output f32* %246 = OpAccessChain vs_TEXCOORD3 %78 
					                                                      OpStore %246 %245 
					                              Uniform f32_4* %248 = OpAccessChain %22 %24 %47 
					                                       f32_4 %249 = OpLoad %248 
					                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
					                                       f32_4 %251 = OpLoad %11 
					                                       f32_3 %252 = OpVectorShuffle %251 %251 3 3 3 
					                                       f32_3 %253 = OpFMul %250 %252 
					                                       f32_4 %254 = OpLoad %9 
					                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
					                                       f32_3 %256 = OpFAdd %253 %255 
					                                                      OpStore vs_TEXCOORD4 %256 
					                              Uniform f32_4* %257 = OpAccessChain %22 %24 %47 
					                                       f32_4 %258 = OpLoad %257 
					                                       f32_4 %259 = OpLoad %11 
					                                       f32_4 %260 = OpVectorShuffle %259 %259 3 3 3 3 
					                                       f32_4 %261 = OpFMul %258 %260 
					                                       f32_4 %262 = OpLoad %9 
					                                       f32_4 %263 = OpFAdd %261 %262 
					                                                      OpStore %9 %263 
					                                       f32_4 %266 = OpLoad %265 
					                                                      OpStore %264 %266 
					                                                      OpStore vs_TEXCOORD5 %269 
					                                       f32_4 %270 = OpLoad %9 
					                                       f32_3 %271 = OpVectorShuffle %270 %270 1 1 1 
					                              Uniform f32_4* %273 = OpAccessChain %22 %272 %25 
					                                       f32_4 %274 = OpLoad %273 
					                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
					                                       f32_3 %276 = OpFMul %271 %275 
					                                       f32_4 %277 = OpLoad %45 
					                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 6 3 
					                                                      OpStore %45 %278 
					                              Uniform f32_4* %279 = OpAccessChain %22 %272 %24 
					                                       f32_4 %280 = OpLoad %279 
					                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
					                                       f32_4 %282 = OpLoad %9 
					                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
					                                       f32_3 %284 = OpFMul %281 %283 
					                                       f32_4 %285 = OpLoad %45 
					                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
					                                       f32_3 %287 = OpFAdd %284 %286 
					                                       f32_4 %288 = OpLoad %45 
					                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
					                                                      OpStore %45 %289 
					                              Uniform f32_4* %290 = OpAccessChain %22 %272 %37 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_4 %293 = OpLoad %9 
					                                       f32_3 %294 = OpVectorShuffle %293 %293 2 2 2 
					                                       f32_3 %295 = OpFMul %292 %294 
					                                       f32_4 %296 = OpLoad %45 
					                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
					                                       f32_3 %298 = OpFAdd %295 %297 
					                                       f32_4 %299 = OpLoad %9 
					                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
					                                                      OpStore %9 %300 
					                              Uniform f32_4* %302 = OpAccessChain %22 %272 %47 
					                                       f32_4 %303 = OpLoad %302 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
					                                       f32_3 %307 = OpFMul %304 %306 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFAdd %307 %309 
					                                                      OpStore vs_TEXCOORD6 %310 
					                                 Output f32* %311 = OpAccessChain %82 %24 %78 
					                                         f32 %312 = OpLoad %311 
					                                         f32 %313 = OpFNegate %312 
					                                 Output f32* %314 = OpAccessChain %82 %24 %78 
					                                                      OpStore %314 %313 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 471
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %22 %66 %72 %79 %102 %407 %414 %439 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpDecorate %12 DescriptorSet 12 
					                                                      OpDecorate %12 Binding 12 
					                                                      OpDecorate %16 DescriptorSet 16 
					                                                      OpDecorate %16 Binding 16 
					                                                      OpDecorate vs_TEXCOORD0 Location 22 
					                                                      OpDecorate vs_TEXCOORD1 Location 66 
					                                                      OpDecorate vs_TEXCOORD2 Location 72 
					                                                      OpDecorate vs_TEXCOORD3 Location 79 
					                                                      OpDecorate vs_TEXCOORD4 Location 102 
					                                                      OpDecorate %106 ArrayStride 106 
					                                                      OpMemberDecorate %107 0 Offset 107 
					                                                      OpMemberDecorate %107 1 Offset 107 
					                                                      OpMemberDecorate %107 2 Offset 107 
					                                                      OpMemberDecorate %107 3 Offset 107 
					                                                      OpMemberDecorate %107 4 Offset 107 
					                                                      OpMemberDecorate %107 5 Offset 107 
					                                                      OpMemberDecorate %107 6 Offset 107 
					                                                      OpDecorate %107 Block 
					                                                      OpDecorate %109 DescriptorSet 109 
					                                                      OpDecorate %109 Binding 109 
					                                                      OpDecorate %314 DescriptorSet 314 
					                                                      OpDecorate %314 Binding 314 
					                                                      OpDecorate %316 DescriptorSet 316 
					                                                      OpDecorate %316 Binding 316 
					                                                      OpDecorate %392 DescriptorSet 392 
					                                                      OpDecorate %392 Binding 392 
					                                                      OpDecorate %394 DescriptorSet 394 
					                                                      OpDecorate %394 Binding 394 
					                                                      OpDecorate %407 Location 407 
					                                                      OpDecorate %414 Location 414 
					                                                      OpDecorate vs_TEXCOORD7 Location 439 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %11 = OpTypePointer UniformConstant %10 
					         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                              %14 = OpTypeSampler 
					                                              %15 = OpTypePointer UniformConstant %14 
					                     UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                              %18 = OpTypeSampledImage %10 
					                                              %20 = OpTypeVector %6 2 
					                                              %21 = OpTypePointer Input %20 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                              %25 = OpTypeVector %6 3 
					                                              %29 = OpTypeInt 32 0 
					                                          u32 %30 = OpConstant 2 
					                                              %31 = OpTypePointer Private %6 
					                                          u32 %34 = OpConstant 0 
					                                          f32 %41 = OpConstant 3,674022E-40 
					                                        f32_2 %42 = OpConstantComposite %41 %41 
					                                          f32 %44 = OpConstant 3,674022E-40 
					                                        f32_2 %45 = OpConstantComposite %44 %44 
					                                 Private f32* %49 = OpVariable Private 
					                                          f32 %56 = OpConstant 3,674022E-40 
					                               Private f32_4* %64 = OpVariable Private 
					                                              %65 = OpTypePointer Input %25 
					                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %77 = OpConstant 1 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                                         u32 %105 = OpConstant 4 
					                                             %106 = OpTypeArray %7 %105 
					                                             %107 = OpTypeStruct %25 %7 %7 %7 %7 %106 %7 
					                                             %108 = OpTypePointer Uniform %107 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %109 = OpVariable Uniform 
					                                             %110 = OpTypeInt 32 1 
					                                         i32 %111 = OpConstant 0 
					                                             %112 = OpTypePointer Uniform %25 
					                                Private f32* %137 = OpVariable Private 
					                                             %142 = OpTypePointer Private %25 
					                              Private f32_3* %143 = OpVariable Private 
					                                         i32 %160 = OpConstant 2 
					                                             %161 = OpTypePointer Uniform %7 
					                                Private f32* %166 = OpVariable Private 
					                                         f32 %191 = OpConstant 3,674022E-40 
					                                         f32 %209 = OpConstant 3,674022E-40 
					                                Private f32* %221 = OpVariable Private 
					                                Private f32* %227 = OpVariable Private 
					                                         f32 %233 = OpConstant 3,674022E-40 
					                                Private f32* %240 = OpVariable Private 
					                                Private f32* %245 = OpVariable Private 
					                                         i32 %269 = OpConstant 5 
					                                         i32 %270 = OpConstant 1 
					                                         i32 %301 = OpConstant 3 
					        UniformConstant read_only Texture2D* %314 = OpVariable UniformConstant 
					                    UniformConstant sampler* %316 = OpVariable UniformConstant 
					                                         i32 %326 = OpConstant 4 
					                                         f32 %344 = OpConstant 3,674022E-40 
					                                         f32 %346 = OpConstant 3,674022E-40 
					                                         f32 %356 = OpConstant 3,674022E-40 
					                                         f32 %381 = OpConstant 3,674022E-40 
					                                         f32 %383 = OpConstant 3,674022E-40 
					        UniformConstant read_only Texture2D* %392 = OpVariable UniformConstant 
					                    UniformConstant sampler* %394 = OpVariable UniformConstant 
					                                         i32 %400 = OpConstant 6 
					                                             %406 = OpTypePointer Input %7 
					                                Input f32_4* %407 = OpVariable Input 
					                                             %413 = OpTypePointer Output %7 
					                               Output f32_4* %414 = OpVariable Output 
					                                         u32 %415 = OpConstant 3 
					                                             %418 = OpTypePointer Input %6 
					                                             %422 = OpTypePointer Output %6 
					                                       f32_3 %426 = OpConstantComposite %381 %381 %381 
					                          Input f32* vs_TEXCOORD7 = OpVariable Input 
					                                             %441 = OpTypePointer Uniform %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                          read_only Texture2D %13 = OpLoad %12 
					                                      sampler %17 = OpLoad %16 
					                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
					                                        f32_3 %26 = OpVectorShuffle %24 %24 0 1 3 
					                                        f32_4 %27 = OpLoad %9 
					                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
					                                                      OpStore %9 %28 
					                                 Private f32* %32 = OpAccessChain %9 %30 
					                                          f32 %33 = OpLoad %32 
					                                 Private f32* %35 = OpAccessChain %9 %34 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %37 = OpFMul %33 %36 
					                                 Private f32* %38 = OpAccessChain %9 %34 
					                                                      OpStore %38 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
					                                        f32_2 %43 = OpFMul %40 %42 
					                                        f32_2 %46 = OpFAdd %43 %45 
					                                        f32_4 %47 = OpLoad %9 
					                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
					                                                      OpStore %9 %48 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
					                                          f32 %54 = OpDot %51 %53 
					                                                      OpStore %49 %54 
					                                          f32 %55 = OpLoad %49 
					                                          f32 %57 = OpExtInst %1 37 %55 %56 
					                                                      OpStore %49 %57 
					                                          f32 %58 = OpLoad %49 
					                                          f32 %59 = OpFNegate %58 
					                                          f32 %60 = OpFAdd %59 %56 
					                                                      OpStore %49 %60 
					                                          f32 %61 = OpLoad %49 
					                                          f32 %62 = OpExtInst %1 31 %61 
					                                 Private f32* %63 = OpAccessChain %9 %30 
					                                                      OpStore %63 %62 
					                                        f32_3 %67 = OpLoad vs_TEXCOORD1 
					                                        f32_4 %68 = OpLoad %9 
					                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
					                                          f32 %70 = OpDot %67 %69 
					                                 Private f32* %71 = OpAccessChain %64 %34 
					                                                      OpStore %71 %70 
					                                        f32_3 %73 = OpLoad vs_TEXCOORD2 
					                                        f32_4 %74 = OpLoad %9 
					                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
					                                          f32 %76 = OpDot %73 %75 
					                                 Private f32* %78 = OpAccessChain %64 %77 
					                                                      OpStore %78 %76 
					                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
					                                        f32_4 %81 = OpLoad %9 
					                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
					                                          f32 %83 = OpDot %80 %82 
					                                 Private f32* %84 = OpAccessChain %64 %30 
					                                                      OpStore %84 %83 
					                                        f32_4 %85 = OpLoad %64 
					                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
					                                        f32_4 %87 = OpLoad %64 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                          f32 %89 = OpDot %86 %88 
					                                 Private f32* %90 = OpAccessChain %9 %34 
					                                                      OpStore %90 %89 
					                                 Private f32* %91 = OpAccessChain %9 %34 
					                                          f32 %92 = OpLoad %91 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                 Private f32* %94 = OpAccessChain %9 %34 
					                                                      OpStore %94 %93 
					                                        f32_4 %95 = OpLoad %9 
					                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
					                                        f32_4 %97 = OpLoad %64 
					                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
					                                        f32_3 %99 = OpFMul %96 %98 
					                                       f32_4 %100 = OpLoad %9 
					                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
					                                                      OpStore %9 %101 
					                                       f32_3 %103 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %104 = OpFNegate %103 
					                              Uniform f32_3* %113 = OpAccessChain %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                                       f32_3 %115 = OpFAdd %104 %114 
					                                       f32_4 %116 = OpLoad %64 
					                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
					                                                      OpStore %64 %117 
					                                       f32_4 %118 = OpLoad %64 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_4 %120 = OpLoad %64 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
					                                         f32 %122 = OpDot %119 %121 
					                                                      OpStore %49 %122 
					                                         f32 %123 = OpLoad %49 
					                                         f32 %124 = OpExtInst %1 32 %123 
					                                                      OpStore %49 %124 
					                                         f32 %125 = OpLoad %49 
					                                       f32_3 %126 = OpCompositeConstruct %125 %125 %125 
					                                       f32_4 %127 = OpLoad %64 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                       f32_3 %129 = OpFMul %126 %128 
					                                       f32_4 %130 = OpLoad %64 
					                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
					                                                      OpStore %64 %131 
					                                       f32_4 %132 = OpLoad %9 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                       f32_4 %134 = OpLoad %64 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %133 %135 
					                                                      OpStore %49 %136 
					                                         f32 %138 = OpLoad %49 
					                                         f32 %139 = OpExtInst %1 4 %138 
					                                         f32 %140 = OpFNegate %139 
					                                         f32 %141 = OpFAdd %140 %56 
					                                                      OpStore %137 %141 
					                                         f32 %144 = OpLoad %137 
					                                         f32 %145 = OpLoad %137 
					                                         f32 %146 = OpFMul %144 %145 
					                                Private f32* %147 = OpAccessChain %143 %34 
					                                                      OpStore %147 %146 
					                                Private f32* %148 = OpAccessChain %143 %34 
					                                         f32 %149 = OpLoad %148 
					                                Private f32* %150 = OpAccessChain %143 %34 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFMul %149 %151 
					                                Private f32* %153 = OpAccessChain %143 %34 
					                                                      OpStore %153 %152 
					                                         f32 %154 = OpLoad %137 
					                                Private f32* %155 = OpAccessChain %143 %34 
					                                         f32 %156 = OpLoad %155 
					                                         f32 %157 = OpFMul %154 %156 
					                                                      OpStore %137 %157 
					                                       f32_3 %158 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %159 = OpFNegate %158 
					                              Uniform f32_4* %162 = OpAccessChain %109 %160 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFAdd %159 %164 
					                                                      OpStore %143 %165 
					                                       f32_3 %167 = OpLoad %143 
					                                       f32_3 %168 = OpLoad %143 
					                                         f32 %169 = OpDot %167 %168 
					                                                      OpStore %166 %169 
					                                         f32 %170 = OpLoad %166 
					                                         f32 %171 = OpExtInst %1 32 %170 
					                                                      OpStore %166 %171 
					                                       f32_3 %172 = OpLoad %143 
					                                         f32 %173 = OpLoad %166 
					                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
					                                       f32_3 %175 = OpFMul %172 %174 
					                                       f32_4 %176 = OpLoad %64 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_3 %178 = OpFAdd %175 %177 
					                                       f32_4 %179 = OpLoad %64 
					                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
					                                                      OpStore %64 %180 
					                                         f32 %181 = OpLoad %166 
					                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
					                                       f32_3 %183 = OpLoad %143 
					                                       f32_3 %184 = OpFMul %182 %183 
					                                                      OpStore %143 %184 
					                                       f32_4 %185 = OpLoad %64 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_4 %187 = OpLoad %64 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                         f32 %189 = OpDot %186 %188 
					                                                      OpStore %166 %189 
					                                         f32 %190 = OpLoad %166 
					                                         f32 %192 = OpExtInst %1 40 %190 %191 
					                                                      OpStore %166 %192 
					                                         f32 %193 = OpLoad %166 
					                                         f32 %194 = OpExtInst %1 32 %193 
					                                                      OpStore %166 %194 
					                                       f32_4 %195 = OpLoad %64 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                         f32 %197 = OpLoad %166 
					                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
					                                       f32_3 %199 = OpFMul %196 %198 
					                                       f32_4 %200 = OpLoad %64 
					                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
					                                                      OpStore %64 %201 
					                                       f32_3 %202 = OpLoad %143 
					                                       f32_4 %203 = OpLoad %64 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
					                                         f32 %205 = OpDot %202 %204 
					                                Private f32* %206 = OpAccessChain %64 %34 
					                                                      OpStore %206 %205 
					                                Private f32* %207 = OpAccessChain %64 %34 
					                                         f32 %208 = OpLoad %207 
					                                         f32 %210 = OpExtInst %1 43 %208 %209 %56 
					                                Private f32* %211 = OpAccessChain %64 %34 
					                                                      OpStore %211 %210 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                                       f32_3 %214 = OpLoad %143 
					                                         f32 %215 = OpDot %213 %214 
					                                Private f32* %216 = OpAccessChain %9 %34 
					                                                      OpStore %216 %215 
					                                Private f32* %217 = OpAccessChain %9 %34 
					                                         f32 %218 = OpLoad %217 
					                                         f32 %219 = OpExtInst %1 43 %218 %209 %56 
					                                Private f32* %220 = OpAccessChain %9 %34 
					                                                      OpStore %220 %219 
					                                       f32_4 %222 = OpLoad %64 
					                                       f32_2 %223 = OpVectorShuffle %222 %222 0 0 
					                                       f32_4 %224 = OpLoad %64 
					                                       f32_2 %225 = OpVectorShuffle %224 %224 0 0 
					                                         f32 %226 = OpDot %223 %225 
					                                                      OpStore %221 %226 
					                                Private f32* %228 = OpAccessChain %64 %34 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFNegate %229 
					                                         f32 %231 = OpFAdd %230 %56 
					                                                      OpStore %227 %231 
					                                         f32 %232 = OpLoad %221 
					                                         f32 %234 = OpFAdd %232 %233 
					                                                      OpStore %221 %234 
					                                         f32 %235 = OpLoad %221 
					                                         f32 %236 = OpLoad %137 
					                                         f32 %237 = OpFMul %235 %236 
					                                         f32 %238 = OpFAdd %237 %56 
					                                Private f32* %239 = OpAccessChain %64 %34 
					                                                      OpStore %239 %238 
					                                Private f32* %241 = OpAccessChain %9 %34 
					                                         f32 %242 = OpLoad %241 
					                                         f32 %243 = OpFNegate %242 
					                                         f32 %244 = OpFAdd %243 %56 
					                                                      OpStore %240 %244 
					                                         f32 %246 = OpLoad %240 
					                                         f32 %247 = OpLoad %240 
					                                         f32 %248 = OpFMul %246 %247 
					                                                      OpStore %245 %248 
					                                         f32 %249 = OpLoad %245 
					                                         f32 %250 = OpLoad %245 
					                                         f32 %251 = OpFMul %249 %250 
					                                                      OpStore %245 %251 
					                                         f32 %252 = OpLoad %240 
					                                         f32 %253 = OpLoad %245 
					                                         f32 %254 = OpFMul %252 %253 
					                                                      OpStore %240 %254 
					                                         f32 %255 = OpLoad %221 
					                                         f32 %256 = OpLoad %240 
					                                         f32 %257 = OpFMul %255 %256 
					                                         f32 %258 = OpFAdd %257 %56 
					                                                      OpStore %221 %258 
					                                Private f32* %259 = OpAccessChain %64 %34 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpLoad %221 
					                                         f32 %262 = OpFMul %260 %261 
					                                                      OpStore %221 %262 
					                                Private f32* %263 = OpAccessChain %9 %34 
					                                         f32 %264 = OpLoad %263 
					                                         f32 %265 = OpLoad %221 
					                                         f32 %266 = OpFMul %264 %265 
					                                                      OpStore %221 %266 
					                                       f32_3 %267 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %268 = OpVectorShuffle %267 %267 1 1 1 
					                              Uniform f32_4* %271 = OpAccessChain %109 %269 %270 
					                                       f32_4 %272 = OpLoad %271 
					                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
					                                       f32_3 %274 = OpFMul %268 %273 
					                                       f32_4 %275 = OpLoad %64 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
					                                                      OpStore %64 %276 
					                              Uniform f32_4* %277 = OpAccessChain %109 %269 %111 
					                                       f32_4 %278 = OpLoad %277 
					                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
					                                       f32_3 %280 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %281 = OpVectorShuffle %280 %280 0 0 0 
					                                       f32_3 %282 = OpFMul %279 %281 
					                                       f32_4 %283 = OpLoad %64 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
					                                       f32_3 %285 = OpFAdd %282 %284 
					                                       f32_4 %286 = OpLoad %64 
					                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
					                                                      OpStore %64 %287 
					                              Uniform f32_4* %288 = OpAccessChain %109 %269 %160 
					                                       f32_4 %289 = OpLoad %288 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
					                                       f32_3 %291 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 2 2 2 
					                                       f32_3 %293 = OpFMul %290 %292 
					                                       f32_4 %294 = OpLoad %64 
					                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
					                                       f32_3 %296 = OpFAdd %293 %295 
					                                       f32_4 %297 = OpLoad %64 
					                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 6 3 
					                                                      OpStore %64 %298 
					                                       f32_4 %299 = OpLoad %64 
					                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
					                              Uniform f32_4* %302 = OpAccessChain %109 %269 %301 
					                                       f32_4 %303 = OpLoad %302 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_3 %305 = OpFAdd %300 %304 
					                                       f32_4 %306 = OpLoad %64 
					                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
					                                                      OpStore %64 %307 
					                                       f32_4 %308 = OpLoad %64 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_4 %310 = OpLoad %64 
					                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
					                                         f32 %312 = OpDot %309 %311 
					                                Private f32* %313 = OpAccessChain %64 %34 
					                                                      OpStore %313 %312 
					                         read_only Texture2D %315 = OpLoad %314 
					                                     sampler %317 = OpLoad %316 
					                  read_only Texture2DSampled %318 = OpSampledImage %315 %317 
					                                       f32_4 %319 = OpLoad %64 
					                                       f32_2 %320 = OpVectorShuffle %319 %319 0 0 
					                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
					                                         f32 %322 = OpCompositeExtract %321 0 
					                                Private f32* %323 = OpAccessChain %64 %34 
					                                                      OpStore %323 %322 
					                                       f32_4 %324 = OpLoad %64 
					                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
					                              Uniform f32_4* %327 = OpAccessChain %109 %326 
					                                       f32_4 %328 = OpLoad %327 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_3 %330 = OpFMul %325 %329 
					                                       f32_4 %331 = OpLoad %64 
					                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
					                                                      OpStore %64 %332 
					                                         f32 %333 = OpLoad %221 
					                                       f32_3 %334 = OpCompositeConstruct %333 %333 %333 
					                                       f32_4 %335 = OpLoad %64 
					                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
					                                       f32_3 %337 = OpFMul %334 %336 
					                                                      OpStore %143 %337 
					                                         f32 %338 = OpLoad %49 
					                                         f32 %339 = OpExtInst %1 4 %338 
					                                Private f32* %340 = OpAccessChain %9 %34 
					                                         f32 %341 = OpLoad %340 
					                                         f32 %342 = OpFAdd %339 %341 
					                                                      OpStore %221 %342 
					                                         f32 %343 = OpLoad %221 
					                                         f32 %345 = OpFAdd %343 %344 
					                                                      OpStore %221 %345 
					                                         f32 %347 = OpLoad %221 
					                                         f32 %348 = OpFDiv %346 %347 
					                                                      OpStore %221 %348 
					                                Private f32* %349 = OpAccessChain %9 %34 
					                                         f32 %350 = OpLoad %349 
					                                         f32 %351 = OpLoad %221 
					                                         f32 %352 = OpFMul %350 %351 
					                                Private f32* %353 = OpAccessChain %9 %34 
					                                                      OpStore %353 %352 
					                                Private f32* %354 = OpAccessChain %9 %34 
					                                         f32 %355 = OpLoad %354 
					                                         f32 %357 = OpFMul %355 %356 
					                                Private f32* %358 = OpAccessChain %9 %34 
					                                                      OpStore %358 %357 
					                                       f32_4 %359 = OpLoad %64 
					                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
					                                       f32_4 %361 = OpLoad %9 
					                                       f32_3 %362 = OpVectorShuffle %361 %361 0 0 0 
					                                       f32_3 %363 = OpFMul %360 %362 
					                                       f32_4 %364 = OpLoad %9 
					                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 2 6 
					                                                      OpStore %9 %365 
					                                         f32 %366 = OpLoad %227 
					                                         f32 %367 = OpLoad %227 
					                                         f32 %368 = OpFMul %366 %367 
					                                Private f32* %369 = OpAccessChain %64 %34 
					                                                      OpStore %369 %368 
					                                Private f32* %370 = OpAccessChain %64 %34 
					                                         f32 %371 = OpLoad %370 
					                                Private f32* %372 = OpAccessChain %64 %34 
					                                         f32 %373 = OpLoad %372 
					                                         f32 %374 = OpFMul %371 %373 
					                                Private f32* %375 = OpAccessChain %64 %34 
					                                                      OpStore %375 %374 
					                                         f32 %376 = OpLoad %227 
					                                Private f32* %377 = OpAccessChain %64 %34 
					                                         f32 %378 = OpLoad %377 
					                                         f32 %379 = OpFMul %376 %378 
					                                                      OpStore %227 %379 
					                                         f32 %380 = OpLoad %227 
					                                         f32 %382 = OpFMul %380 %381 
					                                         f32 %384 = OpFAdd %382 %383 
					                                                      OpStore %227 %384 
					                                         f32 %385 = OpLoad %227 
					                                       f32_3 %386 = OpCompositeConstruct %385 %385 %385 
					                                       f32_4 %387 = OpLoad %9 
					                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 3 
					                                       f32_3 %389 = OpFMul %386 %388 
					                                       f32_4 %390 = OpLoad %9 
					                                       f32_4 %391 = OpVectorShuffle %390 %389 4 5 6 3 
					                                                      OpStore %9 %391 
					                         read_only Texture2D %393 = OpLoad %392 
					                                     sampler %395 = OpLoad %394 
					                  read_only Texture2DSampled %396 = OpSampledImage %393 %395 
					                                       f32_2 %397 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %398 = OpImageSampleImplicitLod %396 %397 
					                                                      OpStore %64 %398 
					                                       f32_4 %399 = OpLoad %64 
					                              Uniform f32_4* %401 = OpAccessChain %109 %400 
					                                       f32_4 %402 = OpLoad %401 
					                                       f32_4 %403 = OpFMul %399 %402 
					                                                      OpStore %64 %403 
					                                       f32_4 %404 = OpLoad %64 
					                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
					                                       f32_4 %408 = OpLoad %407 
					                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
					                                       f32_3 %410 = OpFMul %405 %409 
					                                       f32_4 %411 = OpLoad %64 
					                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
					                                                      OpStore %64 %412 
					                                Private f32* %416 = OpAccessChain %64 %415 
					                                         f32 %417 = OpLoad %416 
					                                  Input f32* %419 = OpAccessChain %407 %415 
					                                         f32 %420 = OpLoad %419 
					                                         f32 %421 = OpFMul %417 %420 
					                                 Output f32* %423 = OpAccessChain %414 %415 
					                                                      OpStore %423 %421 
					                                       f32_4 %424 = OpLoad %64 
					                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
					                                       f32_3 %427 = OpFMul %425 %426 
					                                       f32_4 %428 = OpLoad %64 
					                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 6 3 
					                                                      OpStore %64 %429 
					                                       f32_4 %430 = OpLoad %64 
					                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
					                                       f32_3 %432 = OpLoad %143 
					                                       f32_3 %433 = OpFMul %431 %432 
					                                       f32_4 %434 = OpLoad %9 
					                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
					                                       f32_3 %436 = OpFAdd %433 %435 
					                                       f32_4 %437 = OpLoad %9 
					                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
					                                                      OpStore %9 %438 
					                                         f32 %440 = OpLoad vs_TEXCOORD7 
					                                Uniform f32* %442 = OpAccessChain %109 %270 %77 
					                                         f32 %443 = OpLoad %442 
					                                         f32 %444 = OpFDiv %440 %443 
					                                                      OpStore %49 %444 
					                                         f32 %445 = OpLoad %49 
					                                         f32 %446 = OpFNegate %445 
					                                         f32 %447 = OpFAdd %446 %56 
					                                                      OpStore %49 %447 
					                                         f32 %448 = OpLoad %49 
					                                Uniform f32* %449 = OpAccessChain %109 %270 %30 
					                                         f32 %450 = OpLoad %449 
					                                         f32 %451 = OpFMul %448 %450 
					                                                      OpStore %49 %451 
					                                         f32 %452 = OpLoad %49 
					                                         f32 %453 = OpExtInst %1 40 %452 %209 
					                                                      OpStore %49 %453 
					                                         f32 %454 = OpLoad %49 
					                                Uniform f32* %455 = OpAccessChain %109 %301 %30 
					                                         f32 %456 = OpLoad %455 
					                                         f32 %457 = OpFMul %454 %456 
					                                Uniform f32* %458 = OpAccessChain %109 %301 %415 
					                                         f32 %459 = OpLoad %458 
					                                         f32 %460 = OpFAdd %457 %459 
					                                                      OpStore %49 %460 
					                                         f32 %461 = OpLoad %49 
					                                         f32 %462 = OpExtInst %1 43 %461 %209 %56 
					                                                      OpStore %49 %462 
					                                       f32_4 %463 = OpLoad %9 
					                                       f32_3 %464 = OpVectorShuffle %463 %463 0 1 2 
					                                         f32 %465 = OpLoad %49 
					                                       f32_3 %466 = OpCompositeConstruct %465 %465 %465 
					                                       f32_3 %467 = OpFMul %464 %466 
					                                       f32_4 %468 = OpLoad %414 
					                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 6 3 
					                                                      OpStore %414 %469 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = -abs(u_xlat9) + 1.0;
					    u_xlat6 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat6 = u_xlat6 + 9.99999975e-06;
					    u_xlat6 = 0.5 / u_xlat6;
					    u_xlat6 = u_xlat6 * 0.999999881;
					    u_xlat6 = u_xlat0.x * u_xlat6;
					    u_xlat2.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat6 = u_xlat3 * u_xlat3;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat3 = u_xlat3 * u_xlat6;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat9 = dot(vec2(u_xlat6), vec2(u_xlat6));
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat3 = u_xlat9 * u_xlat3 + 1.0;
					    u_xlat1.x = (-u_xlat0.x) + 1.0;
					    u_xlat4 = u_xlat1.x * u_xlat1.x;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * u_xlat4;
					    u_xlat9 = u_xlat9 * u_xlat1.x + 1.0;
					    u_xlat3 = u_xlat3 * u_xlat9;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat2 * _Color;
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat2.w * vs_COLOR0.w;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyw + u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 266
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %97 %104 %105 %118 %153 %225 %235 %239 %255 %256 %258 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpMemberDecorate %19 4 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate vs_TEXCOORD4 Location 52 
					                                                      OpMemberDecorate %90 0 BuiltIn 90 
					                                                      OpMemberDecorate %90 1 BuiltIn 90 
					                                                      OpMemberDecorate %90 2 BuiltIn 90 
					                                                      OpDecorate %90 Block 
					                                                      OpDecorate vs_TEXCOORD7 Location 97 
					                                                      OpDecorate vs_TEXCOORD0 Location 104 
					                                                      OpDecorate %105 Location 105 
					                                                      OpDecorate %118 Location 118 
					                                                      OpDecorate %153 Location 153 
					                                                      OpDecorate vs_TEXCOORD1 Location 225 
					                                                      OpDecorate vs_TEXCOORD2 Location 235 
					                                                      OpDecorate vs_TEXCOORD3 Location 239 
					                                                      OpDecorate %255 Location 255 
					                                                      OpDecorate %256 Location 256 
					                                                      OpDecorate vs_TEXCOORD5 Location 258 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %7 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                                          u32 %88 = OpConstant 1 
					                                              %89 = OpTypeArray %6 %88 
					                                              %90 = OpTypeStruct %7 %6 %89 
					                                              %91 = OpTypePointer Output %90 
					         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
					                                              %94 = OpTypePointer Output %7 
					                                              %96 = OpTypePointer Output %6 
					                         Output f32* vs_TEXCOORD7 = OpVariable Output 
					                                          u32 %98 = OpConstant 2 
					                                              %99 = OpTypePointer Private %6 
					                                             %102 = OpTypeVector %6 2 
					                                             %103 = OpTypePointer Output %102 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                Input f32_4* %105 = OpVariable Input 
					                                         i32 %108 = OpConstant 4 
					                                             %117 = OpTypePointer Input %50 
					                                Input f32_3* %118 = OpVariable Input 
					                                         u32 %136 = OpConstant 0 
					                                Private f32* %138 = OpVariable Private 
					                                Input f32_4* %153 = OpVariable Input 
					                                             %198 = OpTypePointer Private %50 
					                              Private f32_3* %199 = OpVariable Private 
					                                         u32 %213 = OpConstant 3 
					                                             %214 = OpTypePointer Input %6 
					                                             %217 = OpTypePointer Uniform %6 
					                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                               Output f32_4* %255 = OpVariable Output 
					                                Input f32_4* %256 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %259 = OpConstant 3,674022E-40 
					                                       f32_4 %260 = OpConstantComposite %259 %259 %259 %259 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore vs_TEXCOORD4 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %46 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %46 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
					                                        f32_4 %82 = OpLoad %81 
					                                        f32_4 %83 = OpLoad %44 
					                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
					                                        f32_4 %85 = OpFMul %82 %84 
					                                        f32_4 %86 = OpLoad %9 
					                                        f32_4 %87 = OpFAdd %85 %86 
					                                                      OpStore %9 %87 
					                                        f32_4 %93 = OpLoad %9 
					                                Output f32_4* %95 = OpAccessChain %92 %23 
					                                                      OpStore %95 %93 
					                                Private f32* %100 = OpAccessChain %9 %98 
					                                         f32 %101 = OpLoad %100 
					                                                      OpStore vs_TEXCOORD7 %101 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                              Uniform f32_4* %109 = OpAccessChain %21 %108 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
					                                       f32_2 %112 = OpFMul %107 %111 
					                              Uniform f32_4* %113 = OpAccessChain %21 %108 
					                                       f32_4 %114 = OpLoad %113 
					                                       f32_2 %115 = OpVectorShuffle %114 %114 2 3 
					                                       f32_2 %116 = OpFAdd %112 %115 
					                                                      OpStore vs_TEXCOORD0 %116 
					                                       f32_3 %119 = OpLoad %118 
					                              Uniform f32_4* %120 = OpAccessChain %21 %24 %23 
					                                       f32_4 %121 = OpLoad %120 
					                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
					                                         f32 %123 = OpDot %119 %122 
					                                Private f32* %124 = OpAccessChain %9 %88 
					                                                      OpStore %124 %123 
					                                       f32_3 %125 = OpLoad %118 
					                              Uniform f32_4* %126 = OpAccessChain %21 %24 %24 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                         f32 %129 = OpDot %125 %128 
					                                Private f32* %130 = OpAccessChain %9 %98 
					                                                      OpStore %130 %129 
					                                       f32_3 %131 = OpLoad %118 
					                              Uniform f32_4* %132 = OpAccessChain %21 %24 %36 
					                                       f32_4 %133 = OpLoad %132 
					                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
					                                         f32 %135 = OpDot %131 %134 
					                                Private f32* %137 = OpAccessChain %9 %136 
					                                                      OpStore %137 %135 
					                                       f32_4 %139 = OpLoad %9 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                       f32_4 %141 = OpLoad %9 
					                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
					                                         f32 %143 = OpDot %140 %142 
					                                                      OpStore %138 %143 
					                                         f32 %144 = OpLoad %138 
					                                         f32 %145 = OpExtInst %1 32 %144 
					                                                      OpStore %138 %145 
					                                         f32 %146 = OpLoad %138 
					                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
					                                       f32_4 %148 = OpLoad %9 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
					                                       f32_3 %150 = OpFMul %147 %149 
					                                       f32_4 %151 = OpLoad %9 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %9 %152 
					                                       f32_4 %154 = OpLoad %153 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 1 1 1 
					                              Uniform f32_4* %156 = OpAccessChain %21 %23 %24 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 1 2 0 
					                                       f32_3 %159 = OpFMul %155 %158 
					                                       f32_4 %160 = OpLoad %44 
					                                       f32_4 %161 = OpVectorShuffle %160 %159 4 5 6 3 
					                                                      OpStore %44 %161 
					                              Uniform f32_4* %162 = OpAccessChain %21 %23 %23 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 1 2 0 
					                                       f32_4 %165 = OpLoad %153 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 0 0 
					                                       f32_3 %167 = OpFMul %164 %166 
					                                       f32_4 %168 = OpLoad %44 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFAdd %167 %169 
					                                       f32_4 %171 = OpLoad %44 
					                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
					                                                      OpStore %44 %172 
					                              Uniform f32_4* %173 = OpAccessChain %21 %23 %36 
					                                       f32_4 %174 = OpLoad %173 
					                                       f32_3 %175 = OpVectorShuffle %174 %174 1 2 0 
					                                       f32_4 %176 = OpLoad %153 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 2 2 2 
					                                       f32_3 %178 = OpFMul %175 %177 
					                                       f32_4 %179 = OpLoad %44 
					                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
					                                       f32_3 %181 = OpFAdd %178 %180 
					                                       f32_4 %182 = OpLoad %44 
					                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
					                                                      OpStore %44 %183 
					                                       f32_4 %184 = OpLoad %44 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                       f32_4 %186 = OpLoad %44 
					                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
					                                         f32 %188 = OpDot %185 %187 
					                                                      OpStore %138 %188 
					                                         f32 %189 = OpLoad %138 
					                                         f32 %190 = OpExtInst %1 32 %189 
					                                                      OpStore %138 %190 
					                                         f32 %191 = OpLoad %138 
					                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
					                                       f32_4 %193 = OpLoad %44 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                       f32_3 %195 = OpFMul %192 %194 
					                                       f32_4 %196 = OpLoad %44 
					                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
					                                                      OpStore %44 %197 
					                                       f32_4 %200 = OpLoad %9 
					                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
					                                       f32_4 %202 = OpLoad %44 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
					                                       f32_3 %204 = OpFMul %201 %203 
					                                                      OpStore %199 %204 
					                                       f32_4 %205 = OpLoad %9 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 2 0 1 
					                                       f32_4 %207 = OpLoad %44 
					                                       f32_3 %208 = OpVectorShuffle %207 %207 1 2 0 
					                                       f32_3 %209 = OpFMul %206 %208 
					                                       f32_3 %210 = OpLoad %199 
					                                       f32_3 %211 = OpFNegate %210 
					                                       f32_3 %212 = OpFAdd %209 %211 
					                                                      OpStore %199 %212 
					                                  Input f32* %215 = OpAccessChain %153 %213 
					                                         f32 %216 = OpLoad %215 
					                                Uniform f32* %218 = OpAccessChain %21 %36 %213 
					                                         f32 %219 = OpLoad %218 
					                                         f32 %220 = OpFMul %216 %219 
					                                                      OpStore %138 %220 
					                                         f32 %221 = OpLoad %138 
					                                       f32_3 %222 = OpCompositeConstruct %221 %221 %221 
					                                       f32_3 %223 = OpLoad %199 
					                                       f32_3 %224 = OpFMul %222 %223 
					                                                      OpStore %199 %224 
					                                Private f32* %226 = OpAccessChain %199 %136 
					                                         f32 %227 = OpLoad %226 
					                                 Output f32* %228 = OpAccessChain vs_TEXCOORD1 %88 
					                                                      OpStore %228 %227 
					                                Private f32* %229 = OpAccessChain %44 %98 
					                                         f32 %230 = OpLoad %229 
					                                 Output f32* %231 = OpAccessChain vs_TEXCOORD1 %136 
					                                                      OpStore %231 %230 
					                                Private f32* %232 = OpAccessChain %9 %88 
					                                         f32 %233 = OpLoad %232 
					                                 Output f32* %234 = OpAccessChain vs_TEXCOORD1 %98 
					                                                      OpStore %234 %233 
					                                Private f32* %236 = OpAccessChain %44 %136 
					                                         f32 %237 = OpLoad %236 
					                                 Output f32* %238 = OpAccessChain vs_TEXCOORD2 %136 
					                                                      OpStore %238 %237 
					                                Private f32* %240 = OpAccessChain %44 %88 
					                                         f32 %241 = OpLoad %240 
					                                 Output f32* %242 = OpAccessChain vs_TEXCOORD3 %136 
					                                                      OpStore %242 %241 
					                                Private f32* %243 = OpAccessChain %9 %98 
					                                         f32 %244 = OpLoad %243 
					                                 Output f32* %245 = OpAccessChain vs_TEXCOORD2 %98 
					                                                      OpStore %245 %244 
					                                Private f32* %246 = OpAccessChain %9 %136 
					                                         f32 %247 = OpLoad %246 
					                                 Output f32* %248 = OpAccessChain vs_TEXCOORD3 %98 
					                                                      OpStore %248 %247 
					                                Private f32* %249 = OpAccessChain %199 %88 
					                                         f32 %250 = OpLoad %249 
					                                 Output f32* %251 = OpAccessChain vs_TEXCOORD2 %88 
					                                                      OpStore %251 %250 
					                                Private f32* %252 = OpAccessChain %199 %98 
					                                         f32 %253 = OpLoad %252 
					                                 Output f32* %254 = OpAccessChain vs_TEXCOORD3 %88 
					                                                      OpStore %254 %253 
					                                       f32_4 %257 = OpLoad %256 
					                                                      OpStore %255 %257 
					                                                      OpStore vs_TEXCOORD5 %260 
					                                 Output f32* %261 = OpAccessChain %92 %23 %88 
					                                         f32 %262 = OpLoad %261 
					                                         f32 %263 = OpFNegate %262 
					                                 Output f32* %264 = OpAccessChain %92 %23 %88 
					                                                      OpStore %264 %263 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 372
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %22 %67 %73 %80 %100 %306 %313 %338 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpDecorate %12 DescriptorSet 12 
					                                                      OpDecorate %12 Binding 12 
					                                                      OpDecorate %16 DescriptorSet 16 
					                                                      OpDecorate %16 Binding 16 
					                                                      OpDecorate vs_TEXCOORD0 Location 22 
					                                                      OpDecorate vs_TEXCOORD1 Location 67 
					                                                      OpDecorate vs_TEXCOORD2 Location 73 
					                                                      OpDecorate vs_TEXCOORD3 Location 80 
					                                                      OpDecorate vs_TEXCOORD4 Location 100 
					                                                      OpMemberDecorate %103 0 Offset 103 
					                                                      OpMemberDecorate %103 1 Offset 103 
					                                                      OpMemberDecorate %103 2 Offset 103 
					                                                      OpMemberDecorate %103 3 Offset 103 
					                                                      OpMemberDecorate %103 4 Offset 103 
					                                                      OpMemberDecorate %103 5 Offset 103 
					                                                      OpDecorate %103 Block 
					                                                      OpDecorate %105 DescriptorSet 105 
					                                                      OpDecorate %105 Binding 105 
					                                                      OpDecorate %291 DescriptorSet 291 
					                                                      OpDecorate %291 Binding 291 
					                                                      OpDecorate %293 DescriptorSet 293 
					                                                      OpDecorate %293 Binding 293 
					                                                      OpDecorate %306 Location 306 
					                                                      OpDecorate %313 Location 313 
					                                                      OpDecorate vs_TEXCOORD7 Location 338 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %11 = OpTypePointer UniformConstant %10 
					         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                              %14 = OpTypeSampler 
					                                              %15 = OpTypePointer UniformConstant %14 
					                     UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                              %18 = OpTypeSampledImage %10 
					                                              %20 = OpTypeVector %6 2 
					                                              %21 = OpTypePointer Input %20 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                              %25 = OpTypeVector %6 3 
					                                              %29 = OpTypeInt 32 0 
					                                          u32 %30 = OpConstant 2 
					                                              %31 = OpTypePointer Private %6 
					                                          u32 %34 = OpConstant 0 
					                                          f32 %41 = OpConstant 3,674022E-40 
					                                        f32_2 %42 = OpConstantComposite %41 %41 
					                                          f32 %44 = OpConstant 3,674022E-40 
					                                        f32_2 %45 = OpConstantComposite %44 %44 
					                                 Private f32* %49 = OpVariable Private 
					                                          f32 %56 = OpConstant 3,674022E-40 
					                                              %64 = OpTypePointer Private %25 
					                               Private f32_3* %65 = OpVariable Private 
					                                              %66 = OpTypePointer Input %25 
					                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %78 = OpConstant 1 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                                             %103 = OpTypeStruct %25 %7 %7 %7 %7 %7 
					                                             %104 = OpTypePointer Uniform %103 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4;}* %105 = OpVariable Uniform 
					                                             %106 = OpTypeInt 32 1 
					                                         i32 %107 = OpConstant 0 
					                                             %108 = OpTypePointer Uniform %25 
					                              Private f32_4* %117 = OpVariable Private 
					                                         i32 %128 = OpConstant 2 
					                                             %129 = OpTypePointer Uniform %7 
					                                         f32 %148 = OpConstant 3,674022E-40 
					                                Private f32* %151 = OpVariable Private 
					                                Private f32* %156 = OpVariable Private 
					                                         f32 %163 = OpConstant 3,674022E-40 
					                                         f32 %165 = OpConstant 3,674022E-40 
					                                         f32 %173 = OpConstant 3,674022E-40 
					                                         i32 %177 = OpConstant 4 
					                                         f32 %197 = OpConstant 3,674022E-40 
					                                         f32 %221 = OpConstant 3,674022E-40 
					                                Private f32* %232 = OpVariable Private 
					                                         f32 %282 = OpConstant 3,674022E-40 
					                                         f32 %284 = OpConstant 3,674022E-40 
					        UniformConstant read_only Texture2D* %291 = OpVariable UniformConstant 
					                    UniformConstant sampler* %293 = OpVariable UniformConstant 
					                                         i32 %299 = OpConstant 5 
					                                             %305 = OpTypePointer Input %7 
					                                Input f32_4* %306 = OpVariable Input 
					                                             %312 = OpTypePointer Output %7 
					                               Output f32_4* %313 = OpVariable Output 
					                                         u32 %314 = OpConstant 3 
					                                             %317 = OpTypePointer Input %6 
					                                             %321 = OpTypePointer Output %6 
					                                       f32_3 %325 = OpConstantComposite %282 %282 %282 
					                          Input f32* vs_TEXCOORD7 = OpVariable Input 
					                                         i32 %340 = OpConstant 1 
					                                             %341 = OpTypePointer Uniform %6 
					                                         i32 %355 = OpConstant 3 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                          read_only Texture2D %13 = OpLoad %12 
					                                      sampler %17 = OpLoad %16 
					                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
					                                        f32_3 %26 = OpVectorShuffle %24 %24 0 1 3 
					                                        f32_4 %27 = OpLoad %9 
					                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
					                                                      OpStore %9 %28 
					                                 Private f32* %32 = OpAccessChain %9 %30 
					                                          f32 %33 = OpLoad %32 
					                                 Private f32* %35 = OpAccessChain %9 %34 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %37 = OpFMul %33 %36 
					                                 Private f32* %38 = OpAccessChain %9 %34 
					                                                      OpStore %38 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
					                                        f32_2 %43 = OpFMul %40 %42 
					                                        f32_2 %46 = OpFAdd %43 %45 
					                                        f32_4 %47 = OpLoad %9 
					                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
					                                                      OpStore %9 %48 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
					                                          f32 %54 = OpDot %51 %53 
					                                                      OpStore %49 %54 
					                                          f32 %55 = OpLoad %49 
					                                          f32 %57 = OpExtInst %1 37 %55 %56 
					                                                      OpStore %49 %57 
					                                          f32 %58 = OpLoad %49 
					                                          f32 %59 = OpFNegate %58 
					                                          f32 %60 = OpFAdd %59 %56 
					                                                      OpStore %49 %60 
					                                          f32 %61 = OpLoad %49 
					                                          f32 %62 = OpExtInst %1 31 %61 
					                                 Private f32* %63 = OpAccessChain %9 %30 
					                                                      OpStore %63 %62 
					                                        f32_3 %68 = OpLoad vs_TEXCOORD1 
					                                        f32_4 %69 = OpLoad %9 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
					                                          f32 %71 = OpDot %68 %70 
					                                 Private f32* %72 = OpAccessChain %65 %34 
					                                                      OpStore %72 %71 
					                                        f32_3 %74 = OpLoad vs_TEXCOORD2 
					                                        f32_4 %75 = OpLoad %9 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
					                                          f32 %77 = OpDot %74 %76 
					                                 Private f32* %79 = OpAccessChain %65 %78 
					                                                      OpStore %79 %77 
					                                        f32_3 %81 = OpLoad vs_TEXCOORD3 
					                                        f32_4 %82 = OpLoad %9 
					                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
					                                          f32 %84 = OpDot %81 %83 
					                                 Private f32* %85 = OpAccessChain %65 %30 
					                                                      OpStore %85 %84 
					                                        f32_3 %86 = OpLoad %65 
					                                        f32_3 %87 = OpLoad %65 
					                                          f32 %88 = OpDot %86 %87 
					                                 Private f32* %89 = OpAccessChain %9 %34 
					                                                      OpStore %89 %88 
					                                 Private f32* %90 = OpAccessChain %9 %34 
					                                          f32 %91 = OpLoad %90 
					                                          f32 %92 = OpExtInst %1 32 %91 
					                                 Private f32* %93 = OpAccessChain %9 %34 
					                                                      OpStore %93 %92 
					                                        f32_4 %94 = OpLoad %9 
					                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
					                                        f32_3 %96 = OpLoad %65 
					                                        f32_3 %97 = OpFMul %95 %96 
					                                        f32_4 %98 = OpLoad %9 
					                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 6 3 
					                                                      OpStore %9 %99 
					                                       f32_3 %101 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %102 = OpFNegate %101 
					                              Uniform f32_3* %109 = OpAccessChain %105 %107 
					                                       f32_3 %110 = OpLoad %109 
					                                       f32_3 %111 = OpFAdd %102 %110 
					                                                      OpStore %65 %111 
					                                       f32_3 %112 = OpLoad %65 
					                                       f32_3 %113 = OpLoad %65 
					                                         f32 %114 = OpDot %112 %113 
					                                                      OpStore %49 %114 
					                                         f32 %115 = OpLoad %49 
					                                         f32 %116 = OpExtInst %1 32 %115 
					                                                      OpStore %49 %116 
					                                         f32 %118 = OpLoad %49 
					                                       f32_3 %119 = OpCompositeConstruct %118 %118 %118 
					                                       f32_3 %120 = OpLoad %65 
					                                       f32_3 %121 = OpFMul %119 %120 
					                                       f32_4 %122 = OpLoad %117 
					                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
					                                                      OpStore %117 %123 
					                                       f32_3 %124 = OpLoad %65 
					                                         f32 %125 = OpLoad %49 
					                                       f32_3 %126 = OpCompositeConstruct %125 %125 %125 
					                                       f32_3 %127 = OpFMul %124 %126 
					                              Uniform f32_4* %130 = OpAccessChain %105 %128 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_3 %133 = OpFAdd %127 %132 
					                                                      OpStore %65 %133 
					                                       f32_4 %134 = OpLoad %9 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                       f32_4 %136 = OpLoad %117 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                         f32 %138 = OpDot %135 %137 
					                                                      OpStore %49 %138 
					                                       f32_4 %139 = OpLoad %9 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                              Uniform f32_4* %141 = OpAccessChain %105 %128 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %140 %143 
					                                Private f32* %145 = OpAccessChain %9 %34 
					                                                      OpStore %145 %144 
					                                Private f32* %146 = OpAccessChain %9 %34 
					                                         f32 %147 = OpLoad %146 
					                                         f32 %149 = OpExtInst %1 43 %147 %148 %56 
					                                Private f32* %150 = OpAccessChain %9 %34 
					                                                      OpStore %150 %149 
					                                         f32 %152 = OpLoad %49 
					                                         f32 %153 = OpExtInst %1 4 %152 
					                                         f32 %154 = OpFNegate %153 
					                                         f32 %155 = OpFAdd %154 %56 
					                                                      OpStore %151 %155 
					                                         f32 %157 = OpLoad %49 
					                                         f32 %158 = OpExtInst %1 4 %157 
					                                Private f32* %159 = OpAccessChain %9 %34 
					                                         f32 %160 = OpLoad %159 
					                                         f32 %161 = OpFAdd %158 %160 
					                                                      OpStore %156 %161 
					                                         f32 %162 = OpLoad %156 
					                                         f32 %164 = OpFAdd %162 %163 
					                                                      OpStore %156 %164 
					                                         f32 %166 = OpLoad %156 
					                                         f32 %167 = OpFDiv %165 %166 
					                                                      OpStore %156 %167 
					                                Private f32* %168 = OpAccessChain %9 %34 
					                                         f32 %169 = OpLoad %168 
					                                         f32 %170 = OpLoad %156 
					                                         f32 %171 = OpFMul %169 %170 
					                                                      OpStore %156 %171 
					                                         f32 %172 = OpLoad %156 
					                                         f32 %174 = OpFMul %172 %173 
					                                                      OpStore %156 %174 
					                                         f32 %175 = OpLoad %156 
					                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
					                              Uniform f32_4* %178 = OpAccessChain %105 %177 
					                                       f32_4 %179 = OpLoad %178 
					                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
					                                       f32_3 %181 = OpFMul %176 %180 
					                                       f32_4 %182 = OpLoad %117 
					                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
					                                                      OpStore %117 %183 
					                                         f32 %184 = OpLoad %151 
					                                         f32 %185 = OpLoad %151 
					                                         f32 %186 = OpFMul %184 %185 
					                                                      OpStore %156 %186 
					                                         f32 %187 = OpLoad %156 
					                                         f32 %188 = OpLoad %156 
					                                         f32 %189 = OpFMul %187 %188 
					                                                      OpStore %156 %189 
					                                         f32 %190 = OpLoad %151 
					                                         f32 %191 = OpLoad %156 
					                                         f32 %192 = OpFMul %190 %191 
					                                                      OpStore %151 %192 
					                                       f32_3 %193 = OpLoad %65 
					                                       f32_3 %194 = OpLoad %65 
					                                         f32 %195 = OpDot %193 %194 
					                                                      OpStore %156 %195 
					                                         f32 %196 = OpLoad %156 
					                                         f32 %198 = OpExtInst %1 40 %196 %197 
					                                                      OpStore %156 %198 
					                                         f32 %199 = OpLoad %156 
					                                         f32 %200 = OpExtInst %1 32 %199 
					                                                      OpStore %156 %200 
					                                         f32 %201 = OpLoad %156 
					                                       f32_3 %202 = OpCompositeConstruct %201 %201 %201 
					                                       f32_3 %203 = OpLoad %65 
					                                       f32_3 %204 = OpFMul %202 %203 
					                                                      OpStore %65 %204 
					                              Uniform f32_4* %205 = OpAccessChain %105 %128 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
					                                       f32_3 %208 = OpLoad %65 
					                                         f32 %209 = OpDot %207 %208 
					                                                      OpStore %156 %209 
					                                         f32 %210 = OpLoad %156 
					                                         f32 %211 = OpExtInst %1 43 %210 %148 %56 
					                                                      OpStore %156 %211 
					                                         f32 %212 = OpLoad %156 
					                                       f32_2 %213 = OpCompositeConstruct %212 %212 
					                                         f32 %214 = OpLoad %156 
					                                       f32_2 %215 = OpCompositeConstruct %214 %214 
					                                         f32 %216 = OpDot %213 %215 
					                                                      OpStore %49 %216 
					                                         f32 %217 = OpLoad %156 
					                                         f32 %218 = OpFNegate %217 
					                                         f32 %219 = OpFAdd %218 %56 
					                                                      OpStore %156 %219 
					                                         f32 %220 = OpLoad %49 
					                                         f32 %222 = OpFAdd %220 %221 
					                                                      OpStore %49 %222 
					                                         f32 %223 = OpLoad %49 
					                                         f32 %224 = OpLoad %151 
					                                         f32 %225 = OpFMul %223 %224 
					                                         f32 %226 = OpFAdd %225 %56 
					                                                      OpStore %151 %226 
					                                Private f32* %227 = OpAccessChain %9 %34 
					                                         f32 %228 = OpLoad %227 
					                                         f32 %229 = OpFNegate %228 
					                                         f32 %230 = OpFAdd %229 %56 
					                                Private f32* %231 = OpAccessChain %65 %34 
					                                                      OpStore %231 %230 
					                                Private f32* %233 = OpAccessChain %65 %34 
					                                         f32 %234 = OpLoad %233 
					                                Private f32* %235 = OpAccessChain %65 %34 
					                                         f32 %236 = OpLoad %235 
					                                         f32 %237 = OpFMul %234 %236 
					                                                      OpStore %232 %237 
					                                         f32 %238 = OpLoad %232 
					                                         f32 %239 = OpLoad %232 
					                                         f32 %240 = OpFMul %238 %239 
					                                                      OpStore %232 %240 
					                                Private f32* %241 = OpAccessChain %65 %34 
					                                         f32 %242 = OpLoad %241 
					                                         f32 %243 = OpLoad %232 
					                                         f32 %244 = OpFMul %242 %243 
					                                Private f32* %245 = OpAccessChain %65 %34 
					                                                      OpStore %245 %244 
					                                         f32 %246 = OpLoad %49 
					                                Private f32* %247 = OpAccessChain %65 %34 
					                                         f32 %248 = OpLoad %247 
					                                         f32 %249 = OpFMul %246 %248 
					                                         f32 %250 = OpFAdd %249 %56 
					                                                      OpStore %49 %250 
					                                         f32 %251 = OpLoad %151 
					                                         f32 %252 = OpLoad %49 
					                                         f32 %253 = OpFMul %251 %252 
					                                                      OpStore %151 %253 
					                                Private f32* %254 = OpAccessChain %9 %34 
					                                         f32 %255 = OpLoad %254 
					                                         f32 %256 = OpLoad %151 
					                                         f32 %257 = OpFMul %255 %256 
					                                Private f32* %258 = OpAccessChain %9 %34 
					                                                      OpStore %258 %257 
					                                       f32_4 %259 = OpLoad %9 
					                                       f32_3 %260 = OpVectorShuffle %259 %259 0 0 0 
					                              Uniform f32_4* %261 = OpAccessChain %105 %177 
					                                       f32_4 %262 = OpLoad %261 
					                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
					                                       f32_3 %264 = OpFMul %260 %263 
					                                       f32_4 %265 = OpLoad %9 
					                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 2 6 
					                                                      OpStore %9 %266 
					                                         f32 %267 = OpLoad %156 
					                                         f32 %268 = OpLoad %156 
					                                         f32 %269 = OpFMul %267 %268 
					                                Private f32* %270 = OpAccessChain %65 %34 
					                                                      OpStore %270 %269 
					                                Private f32* %271 = OpAccessChain %65 %34 
					                                         f32 %272 = OpLoad %271 
					                                Private f32* %273 = OpAccessChain %65 %34 
					                                         f32 %274 = OpLoad %273 
					                                         f32 %275 = OpFMul %272 %274 
					                                Private f32* %276 = OpAccessChain %65 %34 
					                                                      OpStore %276 %275 
					                                         f32 %277 = OpLoad %156 
					                                Private f32* %278 = OpAccessChain %65 %34 
					                                         f32 %279 = OpLoad %278 
					                                         f32 %280 = OpFMul %277 %279 
					                                                      OpStore %156 %280 
					                                         f32 %281 = OpLoad %156 
					                                         f32 %283 = OpFMul %281 %282 
					                                         f32 %285 = OpFAdd %283 %284 
					                                                      OpStore %156 %285 
					                                         f32 %286 = OpLoad %156 
					                                       f32_3 %287 = OpCompositeConstruct %286 %286 %286 
					                                       f32_4 %288 = OpLoad %117 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
					                                       f32_3 %290 = OpFMul %287 %289 
					                                                      OpStore %65 %290 
					                         read_only Texture2D %292 = OpLoad %291 
					                                     sampler %294 = OpLoad %293 
					                  read_only Texture2DSampled %295 = OpSampledImage %292 %294 
					                                       f32_2 %296 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %297 = OpImageSampleImplicitLod %295 %296 
					                                                      OpStore %117 %297 
					                                       f32_4 %298 = OpLoad %117 
					                              Uniform f32_4* %300 = OpAccessChain %105 %299 
					                                       f32_4 %301 = OpLoad %300 
					                                       f32_4 %302 = OpFMul %298 %301 
					                                                      OpStore %117 %302 
					                                       f32_4 %303 = OpLoad %117 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_4 %307 = OpLoad %306 
					                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
					                                       f32_3 %309 = OpFMul %304 %308 
					                                       f32_4 %310 = OpLoad %117 
					                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
					                                                      OpStore %117 %311 
					                                Private f32* %315 = OpAccessChain %117 %314 
					                                         f32 %316 = OpLoad %315 
					                                  Input f32* %318 = OpAccessChain %306 %314 
					                                         f32 %319 = OpLoad %318 
					                                         f32 %320 = OpFMul %316 %319 
					                                 Output f32* %322 = OpAccessChain %313 %314 
					                                                      OpStore %322 %320 
					                                       f32_4 %323 = OpLoad %117 
					                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
					                                       f32_3 %326 = OpFMul %324 %325 
					                                       f32_4 %327 = OpLoad %117 
					                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
					                                                      OpStore %117 %328 
					                                       f32_4 %329 = OpLoad %117 
					                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
					                                       f32_4 %331 = OpLoad %9 
					                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 3 
					                                       f32_3 %333 = OpFMul %330 %332 
					                                       f32_3 %334 = OpLoad %65 
					                                       f32_3 %335 = OpFAdd %333 %334 
					                                       f32_4 %336 = OpLoad %9 
					                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
					                                                      OpStore %9 %337 
					                                         f32 %339 = OpLoad vs_TEXCOORD7 
					                                Uniform f32* %342 = OpAccessChain %105 %340 %78 
					                                         f32 %343 = OpLoad %342 
					                                         f32 %344 = OpFDiv %339 %343 
					                                                      OpStore %49 %344 
					                                         f32 %345 = OpLoad %49 
					                                         f32 %346 = OpFNegate %345 
					                                         f32 %347 = OpFAdd %346 %56 
					                                                      OpStore %49 %347 
					                                         f32 %348 = OpLoad %49 
					                                Uniform f32* %349 = OpAccessChain %105 %340 %30 
					                                         f32 %350 = OpLoad %349 
					                                         f32 %351 = OpFMul %348 %350 
					                                                      OpStore %49 %351 
					                                         f32 %352 = OpLoad %49 
					                                         f32 %353 = OpExtInst %1 40 %352 %148 
					                                                      OpStore %49 %353 
					                                         f32 %354 = OpLoad %49 
					                                Uniform f32* %356 = OpAccessChain %105 %355 %30 
					                                         f32 %357 = OpLoad %356 
					                                         f32 %358 = OpFMul %354 %357 
					                                Uniform f32* %359 = OpAccessChain %105 %355 %314 
					                                         f32 %360 = OpLoad %359 
					                                         f32 %361 = OpFAdd %358 %360 
					                                                      OpStore %49 %361 
					                                         f32 %362 = OpLoad %49 
					                                         f32 %363 = OpExtInst %1 43 %362 %148 %56 
					                                                      OpStore %49 %363 
					                                       f32_4 %364 = OpLoad %9 
					                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
					                                         f32 %366 = OpLoad %49 
					                                       f32_3 %367 = OpCompositeConstruct %366 %366 %366 
					                                       f32_3 %368 = OpFMul %365 %367 
					                                       f32_4 %369 = OpLoad %313 
					                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
					                                                      OpStore %313 %370 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					float u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat0.z = sqrt(u_xlat12);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat13 = -abs(u_xlat12) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat13 = u_xlat13 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat14) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = max(u_xlat14, 0.00100000005);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat14);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat8 = (-u_xlat1.x) + 1.0;
					    u_xlat4 = u_xlat4 + -0.5;
					    u_xlat1.x = u_xlat4 * u_xlat13 + 1.0;
					    u_xlat5 = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat4 = u_xlat4 * u_xlat5 + 1.0;
					    u_xlat4 = u_xlat1.x * u_xlat4;
					    u_xlat4 = u_xlat0.x * u_xlat4;
					    u_xlat1 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat4) * u_xlat1.xyz;
					    u_xlat4 = abs(u_xlat12) + u_xlat0.x;
					    u_xlat4 = u_xlat4 + 9.99999975e-06;
					    u_xlat4 = 0.5 / u_xlat4;
					    u_xlat4 = u_xlat4 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat8 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = u_xlat8 * u_xlat1.x;
					    u_xlat8 = u_xlat8 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD7 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 303
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %82 %87 %94 %95 %109 %144 %217 %227 %231 %247 %264 %265 %267 %290 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %80 0 BuiltIn 80 
					                                                      OpMemberDecorate %80 1 BuiltIn 80 
					                                                      OpMemberDecorate %80 2 BuiltIn 80 
					                                                      OpDecorate %80 Block 
					                                                      OpDecorate vs_TEXCOORD7 Location 87 
					                                                      OpDecorate vs_TEXCOORD0 Location 94 
					                                                      OpDecorate %95 Location 95 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %144 Location 144 
					                                                      OpDecorate vs_TEXCOORD1 Location 217 
					                                                      OpDecorate vs_TEXCOORD2 Location 227 
					                                                      OpDecorate vs_TEXCOORD3 Location 231 
					                                                      OpDecorate vs_TEXCOORD4 Location 247 
					                                                      OpDecorate %264 Location 264 
					                                                      OpDecorate %265 Location 265 
					                                                      OpDecorate vs_TEXCOORD5 Location 267 
					                                                      OpDecorate vs_TEXCOORD6 Location 290 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeArray %7 %15 
					                                              %20 = OpTypeStruct %16 %17 %7 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %37 = OpConstant 2 
					                               Private f32_4* %45 = OpVariable Private 
					                                          i32 %47 = OpConstant 3 
					                               Private f32_4* %51 = OpVariable Private 
					                                          u32 %78 = OpConstant 1 
					                                              %79 = OpTypeArray %6 %78 
					                                              %80 = OpTypeStruct %7 %6 %79 
					                                              %81 = OpTypePointer Output %80 
					         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
					                                              %84 = OpTypePointer Output %7 
					                                              %86 = OpTypePointer Output %6 
					                         Output f32* vs_TEXCOORD7 = OpVariable Output 
					                                          u32 %88 = OpConstant 2 
					                                              %89 = OpTypePointer Private %6 
					                                              %92 = OpTypeVector %6 2 
					                                              %93 = OpTypePointer Output %92 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                 Input f32_4* %95 = OpVariable Input 
					                                          i32 %98 = OpConstant 5 
					                                             %107 = OpTypeVector %6 3 
					                                             %108 = OpTypePointer Input %107 
					                                Input f32_3* %109 = OpVariable Input 
					                                         u32 %127 = OpConstant 0 
					                                Private f32* %129 = OpVariable Private 
					                                Input f32_4* %144 = OpVariable Input 
					                                             %189 = OpTypePointer Private %107 
					                              Private f32_3* %190 = OpVariable Private 
					                                         u32 %204 = OpConstant 3 
					                                             %205 = OpTypePointer Input %6 
					                                             %208 = OpTypePointer Uniform %6 
					                                             %216 = OpTypePointer Output %107 
					                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %264 = OpVariable Output 
					                                Input f32_4* %265 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %268 = OpConstant 3,674022E-40 
					                                       f32_4 %269 = OpConstantComposite %268 %268 %268 %268 
					                                         i32 %272 = OpConstant 4 
					                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
					                                        f32_4 %31 = OpLoad %30 
					                                        f32_4 %32 = OpLoad %11 
					                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
					                                        f32_4 %34 = OpFMul %31 %33 
					                                        f32_4 %35 = OpLoad %9 
					                                        f32_4 %36 = OpFAdd %34 %35 
					                                                      OpStore %9 %36 
					                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_4 %40 = OpLoad %11 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
					                                        f32_4 %42 = OpFMul %39 %41 
					                                        f32_4 %43 = OpLoad %9 
					                                        f32_4 %44 = OpFAdd %42 %43 
					                                                      OpStore %9 %44 
					                                        f32_4 %46 = OpLoad %9 
					                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpFAdd %46 %49 
					                                                      OpStore %45 %50 
					                                        f32_4 %52 = OpLoad %45 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
					                               Uniform f32_4* %54 = OpAccessChain %22 %47 %25 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_4 %56 = OpFMul %53 %55 
					                                                      OpStore %51 %56 
					                               Uniform f32_4* %57 = OpAccessChain %22 %47 %24 
					                                        f32_4 %58 = OpLoad %57 
					                                        f32_4 %59 = OpLoad %45 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
					                                        f32_4 %61 = OpFMul %58 %60 
					                                        f32_4 %62 = OpLoad %51 
					                                        f32_4 %63 = OpFAdd %61 %62 
					                                                      OpStore %51 %63 
					                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpLoad %45 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
					                                        f32_4 %68 = OpFMul %65 %67 
					                                        f32_4 %69 = OpLoad %51 
					                                        f32_4 %70 = OpFAdd %68 %69 
					                                                      OpStore %51 %70 
					                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
					                                        f32_4 %72 = OpLoad %71 
					                                        f32_4 %73 = OpLoad %45 
					                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
					                                        f32_4 %75 = OpFMul %72 %74 
					                                        f32_4 %76 = OpLoad %51 
					                                        f32_4 %77 = OpFAdd %75 %76 
					                                                      OpStore %45 %77 
					                                        f32_4 %83 = OpLoad %45 
					                                Output f32_4* %85 = OpAccessChain %82 %24 
					                                                      OpStore %85 %83 
					                                 Private f32* %90 = OpAccessChain %45 %88 
					                                          f32 %91 = OpLoad %90 
					                                                      OpStore vs_TEXCOORD7 %91 
					                                        f32_4 %96 = OpLoad %95 
					                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
					                               Uniform f32_4* %99 = OpAccessChain %22 %98 
					                                       f32_4 %100 = OpLoad %99 
					                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
					                                       f32_2 %102 = OpFMul %97 %101 
					                              Uniform f32_4* %103 = OpAccessChain %22 %98 
					                                       f32_4 %104 = OpLoad %103 
					                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
					                                       f32_2 %106 = OpFAdd %102 %105 
					                                                      OpStore vs_TEXCOORD0 %106 
					                                       f32_3 %110 = OpLoad %109 
					                              Uniform f32_4* %111 = OpAccessChain %22 %25 %24 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
					                                         f32 %114 = OpDot %110 %113 
					                                Private f32* %115 = OpAccessChain %45 %78 
					                                                      OpStore %115 %114 
					                                       f32_3 %116 = OpLoad %109 
					                              Uniform f32_4* %117 = OpAccessChain %22 %25 %25 
					                                       f32_4 %118 = OpLoad %117 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                         f32 %120 = OpDot %116 %119 
					                                Private f32* %121 = OpAccessChain %45 %88 
					                                                      OpStore %121 %120 
					                                       f32_3 %122 = OpLoad %109 
					                              Uniform f32_4* %123 = OpAccessChain %22 %25 %37 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %128 = OpAccessChain %45 %127 
					                                                      OpStore %128 %126 
					                                       f32_4 %130 = OpLoad %45 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                       f32_4 %132 = OpLoad %45 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %131 %133 
					                                                      OpStore %129 %134 
					                                         f32 %135 = OpLoad %129 
					                                         f32 %136 = OpExtInst %1 32 %135 
					                                                      OpStore %129 %136 
					                                         f32 %137 = OpLoad %129 
					                                       f32_3 %138 = OpCompositeConstruct %137 %137 %137 
					                                       f32_4 %139 = OpLoad %45 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                       f32_3 %141 = OpFMul %138 %140 
					                                       f32_4 %142 = OpLoad %45 
					                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
					                                                      OpStore %45 %143 
					                                       f32_4 %145 = OpLoad %144 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 1 1 1 
					                              Uniform f32_4* %147 = OpAccessChain %22 %24 %25 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 1 2 0 
					                                       f32_3 %150 = OpFMul %146 %149 
					                                       f32_4 %151 = OpLoad %51 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %51 %152 
					                              Uniform f32_4* %153 = OpAccessChain %22 %24 %24 
					                                       f32_4 %154 = OpLoad %153 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 1 2 0 
					                                       f32_4 %156 = OpLoad %144 
					                                       f32_3 %157 = OpVectorShuffle %156 %156 0 0 0 
					                                       f32_3 %158 = OpFMul %155 %157 
					                                       f32_4 %159 = OpLoad %51 
					                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
					                                       f32_3 %161 = OpFAdd %158 %160 
					                                       f32_4 %162 = OpLoad %51 
					                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
					                                                      OpStore %51 %163 
					                              Uniform f32_4* %164 = OpAccessChain %22 %24 %37 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 1 2 0 
					                                       f32_4 %167 = OpLoad %144 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 2 2 2 
					                                       f32_3 %169 = OpFMul %166 %168 
					                                       f32_4 %170 = OpLoad %51 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                       f32_3 %172 = OpFAdd %169 %171 
					                                       f32_4 %173 = OpLoad %51 
					                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
					                                                      OpStore %51 %174 
					                                       f32_4 %175 = OpLoad %51 
					                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
					                                       f32_4 %177 = OpLoad %51 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpDot %176 %178 
					                                                      OpStore %129 %179 
					                                         f32 %180 = OpLoad %129 
					                                         f32 %181 = OpExtInst %1 32 %180 
					                                                      OpStore %129 %181 
					                                         f32 %182 = OpLoad %129 
					                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
					                                       f32_4 %184 = OpLoad %51 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                       f32_3 %186 = OpFMul %183 %185 
					                                       f32_4 %187 = OpLoad %51 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %51 %188 
					                                       f32_4 %191 = OpLoad %45 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
					                                       f32_4 %193 = OpLoad %51 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                       f32_3 %195 = OpFMul %192 %194 
					                                                      OpStore %190 %195 
					                                       f32_4 %196 = OpLoad %45 
					                                       f32_3 %197 = OpVectorShuffle %196 %196 2 0 1 
					                                       f32_4 %198 = OpLoad %51 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 1 2 0 
					                                       f32_3 %200 = OpFMul %197 %199 
					                                       f32_3 %201 = OpLoad %190 
					                                       f32_3 %202 = OpFNegate %201 
					                                       f32_3 %203 = OpFAdd %200 %202 
					                                                      OpStore %190 %203 
					                                  Input f32* %206 = OpAccessChain %144 %204 
					                                         f32 %207 = OpLoad %206 
					                                Uniform f32* %209 = OpAccessChain %22 %37 %204 
					                                         f32 %210 = OpLoad %209 
					                                         f32 %211 = OpFMul %207 %210 
					                                                      OpStore %129 %211 
					                                         f32 %212 = OpLoad %129 
					                                       f32_3 %213 = OpCompositeConstruct %212 %212 %212 
					                                       f32_3 %214 = OpLoad %190 
					                                       f32_3 %215 = OpFMul %213 %214 
					                                                      OpStore %190 %215 
					                                Private f32* %218 = OpAccessChain %190 %127 
					                                         f32 %219 = OpLoad %218 
					                                 Output f32* %220 = OpAccessChain vs_TEXCOORD1 %78 
					                                                      OpStore %220 %219 
					                                Private f32* %221 = OpAccessChain %51 %88 
					                                         f32 %222 = OpLoad %221 
					                                 Output f32* %223 = OpAccessChain vs_TEXCOORD1 %127 
					                                                      OpStore %223 %222 
					                                Private f32* %224 = OpAccessChain %45 %78 
					                                         f32 %225 = OpLoad %224 
					                                 Output f32* %226 = OpAccessChain vs_TEXCOORD1 %88 
					                                                      OpStore %226 %225 
					                                Private f32* %228 = OpAccessChain %51 %127 
					                                         f32 %229 = OpLoad %228 
					                                 Output f32* %230 = OpAccessChain vs_TEXCOORD2 %127 
					                                                      OpStore %230 %229 
					                                Private f32* %232 = OpAccessChain %51 %78 
					                                         f32 %233 = OpLoad %232 
					                                 Output f32* %234 = OpAccessChain vs_TEXCOORD3 %127 
					                                                      OpStore %234 %233 
					                                Private f32* %235 = OpAccessChain %45 %88 
					                                         f32 %236 = OpLoad %235 
					                                 Output f32* %237 = OpAccessChain vs_TEXCOORD2 %88 
					                                                      OpStore %237 %236 
					                                Private f32* %238 = OpAccessChain %45 %127 
					                                         f32 %239 = OpLoad %238 
					                                 Output f32* %240 = OpAccessChain vs_TEXCOORD3 %88 
					                                                      OpStore %240 %239 
					                                Private f32* %241 = OpAccessChain %190 %78 
					                                         f32 %242 = OpLoad %241 
					                                 Output f32* %243 = OpAccessChain vs_TEXCOORD2 %78 
					                                                      OpStore %243 %242 
					                                Private f32* %244 = OpAccessChain %190 %88 
					                                         f32 %245 = OpLoad %244 
					                                 Output f32* %246 = OpAccessChain vs_TEXCOORD3 %78 
					                                                      OpStore %246 %245 
					                              Uniform f32_4* %248 = OpAccessChain %22 %24 %47 
					                                       f32_4 %249 = OpLoad %248 
					                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
					                                       f32_4 %251 = OpLoad %11 
					                                       f32_3 %252 = OpVectorShuffle %251 %251 3 3 3 
					                                       f32_3 %253 = OpFMul %250 %252 
					                                       f32_4 %254 = OpLoad %9 
					                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
					                                       f32_3 %256 = OpFAdd %253 %255 
					                                                      OpStore vs_TEXCOORD4 %256 
					                              Uniform f32_4* %257 = OpAccessChain %22 %24 %47 
					                                       f32_4 %258 = OpLoad %257 
					                                       f32_4 %259 = OpLoad %11 
					                                       f32_4 %260 = OpVectorShuffle %259 %259 3 3 3 3 
					                                       f32_4 %261 = OpFMul %258 %260 
					                                       f32_4 %262 = OpLoad %9 
					                                       f32_4 %263 = OpFAdd %261 %262 
					                                                      OpStore %9 %263 
					                                       f32_4 %266 = OpLoad %265 
					                                                      OpStore %264 %266 
					                                                      OpStore vs_TEXCOORD5 %269 
					                                       f32_4 %270 = OpLoad %9 
					                                       f32_4 %271 = OpVectorShuffle %270 %270 1 1 1 1 
					                              Uniform f32_4* %273 = OpAccessChain %22 %272 %25 
					                                       f32_4 %274 = OpLoad %273 
					                                       f32_4 %275 = OpFMul %271 %274 
					                                                      OpStore %45 %275 
					                              Uniform f32_4* %276 = OpAccessChain %22 %272 %24 
					                                       f32_4 %277 = OpLoad %276 
					                                       f32_4 %278 = OpLoad %9 
					                                       f32_4 %279 = OpVectorShuffle %278 %278 0 0 0 0 
					                                       f32_4 %280 = OpFMul %277 %279 
					                                       f32_4 %281 = OpLoad %45 
					                                       f32_4 %282 = OpFAdd %280 %281 
					                                                      OpStore %45 %282 
					                              Uniform f32_4* %283 = OpAccessChain %22 %272 %37 
					                                       f32_4 %284 = OpLoad %283 
					                                       f32_4 %285 = OpLoad %9 
					                                       f32_4 %286 = OpVectorShuffle %285 %285 2 2 2 2 
					                                       f32_4 %287 = OpFMul %284 %286 
					                                       f32_4 %288 = OpLoad %45 
					                                       f32_4 %289 = OpFAdd %287 %288 
					                                                      OpStore %45 %289 
					                              Uniform f32_4* %291 = OpAccessChain %22 %272 %47 
					                                       f32_4 %292 = OpLoad %291 
					                                       f32_4 %293 = OpLoad %9 
					                                       f32_4 %294 = OpVectorShuffle %293 %293 3 3 3 3 
					                                       f32_4 %295 = OpFMul %292 %294 
					                                       f32_4 %296 = OpLoad %45 
					                                       f32_4 %297 = OpFAdd %295 %296 
					                                                      OpStore vs_TEXCOORD6 %297 
					                                 Output f32* %298 = OpAccessChain %82 %24 %78 
					                                         f32 %299 = OpLoad %298 
					                                         f32 %300 = OpFNegate %299 
					                                 Output f32* %301 = OpAccessChain %82 %24 %78 
					                                                      OpStore %301 %300 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 494
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %22 %66 %72 %79 %102 %431 %438 %462 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpDecorate %12 DescriptorSet 12 
					                                                      OpDecorate %12 Binding 12 
					                                                      OpDecorate %16 DescriptorSet 16 
					                                                      OpDecorate %16 Binding 16 
					                                                      OpDecorate vs_TEXCOORD0 Location 22 
					                                                      OpDecorate vs_TEXCOORD1 Location 66 
					                                                      OpDecorate vs_TEXCOORD2 Location 72 
					                                                      OpDecorate vs_TEXCOORD3 Location 79 
					                                                      OpDecorate vs_TEXCOORD4 Location 102 
					                                                      OpDecorate %106 ArrayStride 106 
					                                                      OpMemberDecorate %107 0 Offset 107 
					                                                      OpMemberDecorate %107 1 Offset 107 
					                                                      OpMemberDecorate %107 2 Offset 107 
					                                                      OpMemberDecorate %107 3 Offset 107 
					                                                      OpMemberDecorate %107 4 Offset 107 
					                                                      OpMemberDecorate %107 5 Offset 107 
					                                                      OpMemberDecorate %107 6 Offset 107 
					                                                      OpDecorate %107 Block 
					                                                      OpDecorate %109 DescriptorSet 109 
					                                                      OpDecorate %109 Binding 109 
					                                                      OpDecorate %307 DescriptorSet 307 
					                                                      OpDecorate %307 Binding 307 
					                                                      OpDecorate %309 DescriptorSet 309 
					                                                      OpDecorate %309 Binding 309 
					                                                      OpDecorate %329 DescriptorSet 329 
					                                                      OpDecorate %329 Binding 329 
					                                                      OpDecorate %331 DescriptorSet 331 
					                                                      OpDecorate %331 Binding 331 
					                                                      OpDecorate %416 DescriptorSet 416 
					                                                      OpDecorate %416 Binding 416 
					                                                      OpDecorate %418 DescriptorSet 418 
					                                                      OpDecorate %418 Binding 418 
					                                                      OpDecorate %431 Location 431 
					                                                      OpDecorate %438 Location 438 
					                                                      OpDecorate vs_TEXCOORD7 Location 462 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %11 = OpTypePointer UniformConstant %10 
					         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                              %14 = OpTypeSampler 
					                                              %15 = OpTypePointer UniformConstant %14 
					                     UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                              %18 = OpTypeSampledImage %10 
					                                              %20 = OpTypeVector %6 2 
					                                              %21 = OpTypePointer Input %20 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                              %25 = OpTypeVector %6 3 
					                                              %29 = OpTypeInt 32 0 
					                                          u32 %30 = OpConstant 2 
					                                              %31 = OpTypePointer Private %6 
					                                          u32 %34 = OpConstant 0 
					                                          f32 %41 = OpConstant 3,674022E-40 
					                                        f32_2 %42 = OpConstantComposite %41 %41 
					                                          f32 %44 = OpConstant 3,674022E-40 
					                                        f32_2 %45 = OpConstantComposite %44 %44 
					                                 Private f32* %49 = OpVariable Private 
					                                          f32 %56 = OpConstant 3,674022E-40 
					                               Private f32_4* %64 = OpVariable Private 
					                                              %65 = OpTypePointer Input %25 
					                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %77 = OpConstant 1 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                                         u32 %105 = OpConstant 4 
					                                             %106 = OpTypeArray %7 %105 
					                                             %107 = OpTypeStruct %25 %7 %7 %7 %7 %106 %7 
					                                             %108 = OpTypePointer Uniform %107 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %109 = OpVariable Uniform 
					                                             %110 = OpTypeInt 32 1 
					                                         i32 %111 = OpConstant 0 
					                                             %112 = OpTypePointer Uniform %25 
					                                Private f32* %137 = OpVariable Private 
					                                             %142 = OpTypePointer Private %25 
					                              Private f32_3* %143 = OpVariable Private 
					                                         i32 %160 = OpConstant 2 
					                                             %161 = OpTypePointer Uniform %7 
					                                Private f32* %166 = OpVariable Private 
					                                         f32 %191 = OpConstant 3,674022E-40 
					                                         f32 %209 = OpConstant 3,674022E-40 
					                                Private f32* %221 = OpVariable Private 
					                                Private f32* %227 = OpVariable Private 
					                                         f32 %233 = OpConstant 3,674022E-40 
					                                Private f32* %240 = OpVariable Private 
					                                Private f32* %245 = OpVariable Private 
					                                         i32 %269 = OpConstant 5 
					                                         i32 %270 = OpConstant 1 
					                                         i32 %289 = OpConstant 3 
					                                         f32 %302 = OpConstant 3,674022E-40 
					                                       f32_2 %303 = OpConstantComposite %302 %302 
					        UniformConstant read_only Texture2D* %307 = OpVariable UniformConstant 
					                    UniformConstant sampler* %309 = OpVariable UniformConstant 
					                                         u32 %315 = OpConstant 3 
					                                             %317 = OpTypeBool 
					                                             %318 = OpTypePointer Private %317 
					                               Private bool* %319 = OpVariable Private 
					        UniformConstant read_only Texture2D* %329 = OpVariable UniformConstant 
					                    UniformConstant sampler* %331 = OpVariable UniformConstant 
					                                         i32 %351 = OpConstant 4 
					                                         f32 %369 = OpConstant 3,674022E-40 
					                                         f32 %380 = OpConstant 3,674022E-40 
					                                         f32 %405 = OpConstant 3,674022E-40 
					                                         f32 %407 = OpConstant 3,674022E-40 
					        UniformConstant read_only Texture2D* %416 = OpVariable UniformConstant 
					                    UniformConstant sampler* %418 = OpVariable UniformConstant 
					                                         i32 %424 = OpConstant 6 
					                                             %430 = OpTypePointer Input %7 
					                                Input f32_4* %431 = OpVariable Input 
					                                             %437 = OpTypePointer Output %7 
					                               Output f32_4* %438 = OpVariable Output 
					                                             %441 = OpTypePointer Input %6 
					                                             %445 = OpTypePointer Output %6 
					                                       f32_3 %449 = OpConstantComposite %405 %405 %405 
					                          Input f32* vs_TEXCOORD7 = OpVariable Input 
					                                             %464 = OpTypePointer Uniform %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                          read_only Texture2D %13 = OpLoad %12 
					                                      sampler %17 = OpLoad %16 
					                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
					                                        f32_3 %26 = OpVectorShuffle %24 %24 0 1 3 
					                                        f32_4 %27 = OpLoad %9 
					                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
					                                                      OpStore %9 %28 
					                                 Private f32* %32 = OpAccessChain %9 %30 
					                                          f32 %33 = OpLoad %32 
					                                 Private f32* %35 = OpAccessChain %9 %34 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %37 = OpFMul %33 %36 
					                                 Private f32* %38 = OpAccessChain %9 %34 
					                                                      OpStore %38 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
					                                        f32_2 %43 = OpFMul %40 %42 
					                                        f32_2 %46 = OpFAdd %43 %45 
					                                        f32_4 %47 = OpLoad %9 
					                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
					                                                      OpStore %9 %48 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
					                                          f32 %54 = OpDot %51 %53 
					                                                      OpStore %49 %54 
					                                          f32 %55 = OpLoad %49 
					                                          f32 %57 = OpExtInst %1 37 %55 %56 
					                                                      OpStore %49 %57 
					                                          f32 %58 = OpLoad %49 
					                                          f32 %59 = OpFNegate %58 
					                                          f32 %60 = OpFAdd %59 %56 
					                                                      OpStore %49 %60 
					                                          f32 %61 = OpLoad %49 
					                                          f32 %62 = OpExtInst %1 31 %61 
					                                 Private f32* %63 = OpAccessChain %9 %30 
					                                                      OpStore %63 %62 
					                                        f32_3 %67 = OpLoad vs_TEXCOORD1 
					                                        f32_4 %68 = OpLoad %9 
					                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
					                                          f32 %70 = OpDot %67 %69 
					                                 Private f32* %71 = OpAccessChain %64 %34 
					                                                      OpStore %71 %70 
					                                        f32_3 %73 = OpLoad vs_TEXCOORD2 
					                                        f32_4 %74 = OpLoad %9 
					                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
					                                          f32 %76 = OpDot %73 %75 
					                                 Private f32* %78 = OpAccessChain %64 %77 
					                                                      OpStore %78 %76 
					                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
					                                        f32_4 %81 = OpLoad %9 
					                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
					                                          f32 %83 = OpDot %80 %82 
					                                 Private f32* %84 = OpAccessChain %64 %30 
					                                                      OpStore %84 %83 
					                                        f32_4 %85 = OpLoad %64 
					                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
					                                        f32_4 %87 = OpLoad %64 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                          f32 %89 = OpDot %86 %88 
					                                 Private f32* %90 = OpAccessChain %9 %34 
					                                                      OpStore %90 %89 
					                                 Private f32* %91 = OpAccessChain %9 %34 
					                                          f32 %92 = OpLoad %91 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                 Private f32* %94 = OpAccessChain %9 %34 
					                                                      OpStore %94 %93 
					                                        f32_4 %95 = OpLoad %9 
					                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
					                                        f32_4 %97 = OpLoad %64 
					                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
					                                        f32_3 %99 = OpFMul %96 %98 
					                                       f32_4 %100 = OpLoad %9 
					                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
					                                                      OpStore %9 %101 
					                                       f32_3 %103 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %104 = OpFNegate %103 
					                              Uniform f32_3* %113 = OpAccessChain %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                                       f32_3 %115 = OpFAdd %104 %114 
					                                       f32_4 %116 = OpLoad %64 
					                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
					                                                      OpStore %64 %117 
					                                       f32_4 %118 = OpLoad %64 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_4 %120 = OpLoad %64 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
					                                         f32 %122 = OpDot %119 %121 
					                                                      OpStore %49 %122 
					                                         f32 %123 = OpLoad %49 
					                                         f32 %124 = OpExtInst %1 32 %123 
					                                                      OpStore %49 %124 
					                                         f32 %125 = OpLoad %49 
					                                       f32_3 %126 = OpCompositeConstruct %125 %125 %125 
					                                       f32_4 %127 = OpLoad %64 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                       f32_3 %129 = OpFMul %126 %128 
					                                       f32_4 %130 = OpLoad %64 
					                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
					                                                      OpStore %64 %131 
					                                       f32_4 %132 = OpLoad %9 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                       f32_4 %134 = OpLoad %64 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %133 %135 
					                                                      OpStore %49 %136 
					                                         f32 %138 = OpLoad %49 
					                                         f32 %139 = OpExtInst %1 4 %138 
					                                         f32 %140 = OpFNegate %139 
					                                         f32 %141 = OpFAdd %140 %56 
					                                                      OpStore %137 %141 
					                                         f32 %144 = OpLoad %137 
					                                         f32 %145 = OpLoad %137 
					                                         f32 %146 = OpFMul %144 %145 
					                                Private f32* %147 = OpAccessChain %143 %34 
					                                                      OpStore %147 %146 
					                                Private f32* %148 = OpAccessChain %143 %34 
					                                         f32 %149 = OpLoad %148 
					                                Private f32* %150 = OpAccessChain %143 %34 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFMul %149 %151 
					                                Private f32* %153 = OpAccessChain %143 %34 
					                                                      OpStore %153 %152 
					                                         f32 %154 = OpLoad %137 
					                                Private f32* %155 = OpAccessChain %143 %34 
					                                         f32 %156 = OpLoad %155 
					                                         f32 %157 = OpFMul %154 %156 
					                                                      OpStore %137 %157 
					                                       f32_3 %158 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %159 = OpFNegate %158 
					                              Uniform f32_4* %162 = OpAccessChain %109 %160 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFAdd %159 %164 
					                                                      OpStore %143 %165 
					                                       f32_3 %167 = OpLoad %143 
					                                       f32_3 %168 = OpLoad %143 
					                                         f32 %169 = OpDot %167 %168 
					                                                      OpStore %166 %169 
					                                         f32 %170 = OpLoad %166 
					                                         f32 %171 = OpExtInst %1 32 %170 
					                                                      OpStore %166 %171 
					                                       f32_3 %172 = OpLoad %143 
					                                         f32 %173 = OpLoad %166 
					                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
					                                       f32_3 %175 = OpFMul %172 %174 
					                                       f32_4 %176 = OpLoad %64 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_3 %178 = OpFAdd %175 %177 
					                                       f32_4 %179 = OpLoad %64 
					                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
					                                                      OpStore %64 %180 
					                                         f32 %181 = OpLoad %166 
					                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
					                                       f32_3 %183 = OpLoad %143 
					                                       f32_3 %184 = OpFMul %182 %183 
					                                                      OpStore %143 %184 
					                                       f32_4 %185 = OpLoad %64 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_4 %187 = OpLoad %64 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                         f32 %189 = OpDot %186 %188 
					                                                      OpStore %166 %189 
					                                         f32 %190 = OpLoad %166 
					                                         f32 %192 = OpExtInst %1 40 %190 %191 
					                                                      OpStore %166 %192 
					                                         f32 %193 = OpLoad %166 
					                                         f32 %194 = OpExtInst %1 32 %193 
					                                                      OpStore %166 %194 
					                                       f32_4 %195 = OpLoad %64 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                         f32 %197 = OpLoad %166 
					                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
					                                       f32_3 %199 = OpFMul %196 %198 
					                                       f32_4 %200 = OpLoad %64 
					                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
					                                                      OpStore %64 %201 
					                                       f32_3 %202 = OpLoad %143 
					                                       f32_4 %203 = OpLoad %64 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
					                                         f32 %205 = OpDot %202 %204 
					                                Private f32* %206 = OpAccessChain %64 %34 
					                                                      OpStore %206 %205 
					                                Private f32* %207 = OpAccessChain %64 %34 
					                                         f32 %208 = OpLoad %207 
					                                         f32 %210 = OpExtInst %1 43 %208 %209 %56 
					                                Private f32* %211 = OpAccessChain %64 %34 
					                                                      OpStore %211 %210 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                                       f32_3 %214 = OpLoad %143 
					                                         f32 %215 = OpDot %213 %214 
					                                Private f32* %216 = OpAccessChain %9 %34 
					                                                      OpStore %216 %215 
					                                Private f32* %217 = OpAccessChain %9 %34 
					                                         f32 %218 = OpLoad %217 
					                                         f32 %219 = OpExtInst %1 43 %218 %209 %56 
					                                Private f32* %220 = OpAccessChain %9 %34 
					                                                      OpStore %220 %219 
					                                       f32_4 %222 = OpLoad %64 
					                                       f32_2 %223 = OpVectorShuffle %222 %222 0 0 
					                                       f32_4 %224 = OpLoad %64 
					                                       f32_2 %225 = OpVectorShuffle %224 %224 0 0 
					                                         f32 %226 = OpDot %223 %225 
					                                                      OpStore %221 %226 
					                                Private f32* %228 = OpAccessChain %64 %34 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFNegate %229 
					                                         f32 %231 = OpFAdd %230 %56 
					                                                      OpStore %227 %231 
					                                         f32 %232 = OpLoad %221 
					                                         f32 %234 = OpFAdd %232 %233 
					                                                      OpStore %221 %234 
					                                         f32 %235 = OpLoad %221 
					                                         f32 %236 = OpLoad %137 
					                                         f32 %237 = OpFMul %235 %236 
					                                         f32 %238 = OpFAdd %237 %56 
					                                Private f32* %239 = OpAccessChain %64 %34 
					                                                      OpStore %239 %238 
					                                Private f32* %241 = OpAccessChain %9 %34 
					                                         f32 %242 = OpLoad %241 
					                                         f32 %243 = OpFNegate %242 
					                                         f32 %244 = OpFAdd %243 %56 
					                                                      OpStore %240 %244 
					                                         f32 %246 = OpLoad %240 
					                                         f32 %247 = OpLoad %240 
					                                         f32 %248 = OpFMul %246 %247 
					                                                      OpStore %245 %248 
					                                         f32 %249 = OpLoad %245 
					                                         f32 %250 = OpLoad %245 
					                                         f32 %251 = OpFMul %249 %250 
					                                                      OpStore %245 %251 
					                                         f32 %252 = OpLoad %240 
					                                         f32 %253 = OpLoad %245 
					                                         f32 %254 = OpFMul %252 %253 
					                                                      OpStore %240 %254 
					                                         f32 %255 = OpLoad %221 
					                                         f32 %256 = OpLoad %240 
					                                         f32 %257 = OpFMul %255 %256 
					                                         f32 %258 = OpFAdd %257 %56 
					                                                      OpStore %221 %258 
					                                Private f32* %259 = OpAccessChain %64 %34 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpLoad %221 
					                                         f32 %262 = OpFMul %260 %261 
					                                                      OpStore %221 %262 
					                                Private f32* %263 = OpAccessChain %9 %34 
					                                         f32 %264 = OpLoad %263 
					                                         f32 %265 = OpLoad %221 
					                                         f32 %266 = OpFMul %264 %265 
					                                                      OpStore %221 %266 
					                                       f32_3 %267 = OpLoad vs_TEXCOORD4 
					                                       f32_4 %268 = OpVectorShuffle %267 %267 1 1 1 1 
					                              Uniform f32_4* %271 = OpAccessChain %109 %269 %270 
					                                       f32_4 %272 = OpLoad %271 
					                                       f32_4 %273 = OpFMul %268 %272 
					                                                      OpStore %64 %273 
					                              Uniform f32_4* %274 = OpAccessChain %109 %269 %111 
					                                       f32_4 %275 = OpLoad %274 
					                                       f32_3 %276 = OpLoad vs_TEXCOORD4 
					                                       f32_4 %277 = OpVectorShuffle %276 %276 0 0 0 0 
					                                       f32_4 %278 = OpFMul %275 %277 
					                                       f32_4 %279 = OpLoad %64 
					                                       f32_4 %280 = OpFAdd %278 %279 
					                                                      OpStore %64 %280 
					                              Uniform f32_4* %281 = OpAccessChain %109 %269 %160 
					                                       f32_4 %282 = OpLoad %281 
					                                       f32_3 %283 = OpLoad vs_TEXCOORD4 
					                                       f32_4 %284 = OpVectorShuffle %283 %283 2 2 2 2 
					                                       f32_4 %285 = OpFMul %282 %284 
					                                       f32_4 %286 = OpLoad %64 
					                                       f32_4 %287 = OpFAdd %285 %286 
					                                                      OpStore %64 %287 
					                                       f32_4 %288 = OpLoad %64 
					                              Uniform f32_4* %290 = OpAccessChain %109 %269 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_4 %292 = OpFAdd %288 %291 
					                                                      OpStore %64 %292 
					                                       f32_4 %293 = OpLoad %64 
					                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
					                                       f32_4 %295 = OpLoad %64 
					                                       f32_2 %296 = OpVectorShuffle %295 %295 3 3 
					                                       f32_2 %297 = OpFDiv %294 %296 
					                                       f32_3 %298 = OpLoad %143 
					                                       f32_3 %299 = OpVectorShuffle %298 %297 3 4 2 
					                                                      OpStore %143 %299 
					                                       f32_3 %300 = OpLoad %143 
					                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
					                                       f32_2 %304 = OpFAdd %301 %303 
					                                       f32_3 %305 = OpLoad %143 
					                                       f32_3 %306 = OpVectorShuffle %305 %304 3 4 2 
					                                                      OpStore %143 %306 
					                         read_only Texture2D %308 = OpLoad %307 
					                                     sampler %310 = OpLoad %309 
					                  read_only Texture2DSampled %311 = OpSampledImage %308 %310 
					                                       f32_3 %312 = OpLoad %143 
					                                       f32_2 %313 = OpVectorShuffle %312 %312 0 1 
					                                       f32_4 %314 = OpImageSampleImplicitLod %311 %313 
					                                         f32 %316 = OpCompositeExtract %314 3 
					                                                      OpStore %137 %316 
					                                Private f32* %320 = OpAccessChain %64 %30 
					                                         f32 %321 = OpLoad %320 
					                                        bool %322 = OpFOrdLessThan %209 %321 
					                                                      OpStore %319 %322 
					                                       f32_4 %323 = OpLoad %64 
					                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
					                                       f32_4 %325 = OpLoad %64 
					                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
					                                         f32 %327 = OpDot %324 %326 
					                                Private f32* %328 = OpAccessChain %64 %34 
					                                                      OpStore %328 %327 
					                         read_only Texture2D %330 = OpLoad %329 
					                                     sampler %332 = OpLoad %331 
					                  read_only Texture2DSampled %333 = OpSampledImage %330 %332 
					                                       f32_4 %334 = OpLoad %64 
					                                       f32_2 %335 = OpVectorShuffle %334 %334 0 0 
					                                       f32_4 %336 = OpImageSampleImplicitLod %333 %335 
					                                         f32 %337 = OpCompositeExtract %336 0 
					                                Private f32* %338 = OpAccessChain %64 %34 
					                                                      OpStore %338 %337 
					                                        bool %339 = OpLoad %319 
					                                         f32 %340 = OpSelect %339 %56 %209 
					                                                      OpStore %240 %340 
					                                         f32 %341 = OpLoad %137 
					                                         f32 %342 = OpLoad %240 
					                                         f32 %343 = OpFMul %341 %342 
					                                                      OpStore %240 %343 
					                                Private f32* %344 = OpAccessChain %64 %34 
					                                         f32 %345 = OpLoad %344 
					                                         f32 %346 = OpLoad %240 
					                                         f32 %347 = OpFMul %345 %346 
					                                Private f32* %348 = OpAccessChain %64 %34 
					                                                      OpStore %348 %347 
					                                       f32_4 %349 = OpLoad %64 
					                                       f32_3 %350 = OpVectorShuffle %349 %349 0 0 0 
					                              Uniform f32_4* %352 = OpAccessChain %109 %351 
					                                       f32_4 %353 = OpLoad %352 
					                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
					                                       f32_3 %355 = OpFMul %350 %354 
					                                       f32_4 %356 = OpLoad %64 
					                                       f32_4 %357 = OpVectorShuffle %356 %355 4 5 6 3 
					                                                      OpStore %64 %357 
					                                         f32 %358 = OpLoad %221 
					                                       f32_3 %359 = OpCompositeConstruct %358 %358 %358 
					                                       f32_4 %360 = OpLoad %64 
					                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
					                                       f32_3 %362 = OpFMul %359 %361 
					                                                      OpStore %143 %362 
					                                         f32 %363 = OpLoad %49 
					                                         f32 %364 = OpExtInst %1 4 %363 
					                                Private f32* %365 = OpAccessChain %9 %34 
					                                         f32 %366 = OpLoad %365 
					                                         f32 %367 = OpFAdd %364 %366 
					                                                      OpStore %221 %367 
					                                         f32 %368 = OpLoad %221 
					                                         f32 %370 = OpFAdd %368 %369 
					                                                      OpStore %221 %370 
					                                         f32 %371 = OpLoad %221 
					                                         f32 %372 = OpFDiv %302 %371 
					                                                      OpStore %221 %372 
					                                Private f32* %373 = OpAccessChain %9 %34 
					                                         f32 %374 = OpLoad %373 
					                                         f32 %375 = OpLoad %221 
					                                         f32 %376 = OpFMul %374 %375 
					                                Private f32* %377 = OpAccessChain %9 %34 
					                                                      OpStore %377 %376 
					                                Private f32* %378 = OpAccessChain %9 %34 
					                                         f32 %379 = OpLoad %378 
					                                         f32 %381 = OpFMul %379 %380 
					                                Private f32* %382 = OpAccessChain %9 %34 
					                                                      OpStore %382 %381 
					                                       f32_4 %383 = OpLoad %64 
					                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
					                                       f32_4 %385 = OpLoad %9 
					                                       f32_3 %386 = OpVectorShuffle %385 %385 0 0 0 
					                                       f32_3 %387 = OpFMul %384 %386 
					                                       f32_4 %388 = OpLoad %9 
					                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 2 6 
					                                                      OpStore %9 %389 
					                                         f32 %390 = OpLoad %227 
					                                         f32 %391 = OpLoad %227 
					                                         f32 %392 = OpFMul %390 %391 
					                                Private f32* %393 = OpAccessChain %64 %34 
					                                                      OpStore %393 %392 
					                                Private f32* %394 = OpAccessChain %64 %34 
					                                         f32 %395 = OpLoad %394 
					                                Private f32* %396 = OpAccessChain %64 %34 
					                                         f32 %397 = OpLoad %396 
					                                         f32 %398 = OpFMul %395 %397 
					                                Private f32* %399 = OpAccessChain %64 %34 
					                                                      OpStore %399 %398 
					                                         f32 %400 = OpLoad %227 
					                                Private f32* %401 = OpAccessChain %64 %34 
					                                         f32 %402 = OpLoad %401 
					                                         f32 %403 = OpFMul %400 %402 
					                                                      OpStore %227 %403 
					                                         f32 %404 = OpLoad %227 
					                                         f32 %406 = OpFMul %404 %405 
					                                         f32 %408 = OpFAdd %406 %407 
					                                                      OpStore %227 %408 
					                                         f32 %409 = OpLoad %227 
					                                       f32_3 %410 = OpCompositeConstruct %409 %409 %409 
					                                       f32_4 %411 = OpLoad %9 
					                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 3 
					                                       f32_3 %413 = OpFMul %410 %412 
					                                       f32_4 %414 = OpLoad %9 
					                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 6 3 
					                                                      OpStore %9 %415 
					                         read_only Texture2D %417 = OpLoad %416 
					                                     sampler %419 = OpLoad %418 
					                  read_only Texture2DSampled %420 = OpSampledImage %417 %419 
					                                       f32_2 %421 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %422 = OpImageSampleImplicitLod %420 %421 
					                                                      OpStore %64 %422 
					                                       f32_4 %423 = OpLoad %64 
					                              Uniform f32_4* %425 = OpAccessChain %109 %424 
					                                       f32_4 %426 = OpLoad %425 
					                                       f32_4 %427 = OpFMul %423 %426 
					                                                      OpStore %64 %427 
					                                       f32_4 %428 = OpLoad %64 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_4 %432 = OpLoad %431 
					                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
					                                       f32_3 %434 = OpFMul %429 %433 
					                                       f32_4 %435 = OpLoad %64 
					                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 6 3 
					                                                      OpStore %64 %436 
					                                Private f32* %439 = OpAccessChain %64 %315 
					                                         f32 %440 = OpLoad %439 
					                                  Input f32* %442 = OpAccessChain %431 %315 
					                                         f32 %443 = OpLoad %442 
					                                         f32 %444 = OpFMul %440 %443 
					                                 Output f32* %446 = OpAccessChain %438 %315 
					                                                      OpStore %446 %444 
					                                       f32_4 %447 = OpLoad %64 
					                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
					                                       f32_3 %450 = OpFMul %448 %449 
					                                       f32_4 %451 = OpLoad %64 
					                                       f32_4 %452 = OpVectorShuffle %451 %450 4 5 6 3 
					                                                      OpStore %64 %452 
					                                       f32_4 %453 = OpLoad %64 
					                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
					                                       f32_3 %455 = OpLoad %143 
					                                       f32_3 %456 = OpFMul %454 %455 
					                                       f32_4 %457 = OpLoad %9 
					                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
					                                       f32_3 %459 = OpFAdd %456 %458 
					                                       f32_4 %460 = OpLoad %9 
					                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
					                                                      OpStore %9 %461 
					                                         f32 %463 = OpLoad vs_TEXCOORD7 
					                                Uniform f32* %465 = OpAccessChain %109 %270 %77 
					                                         f32 %466 = OpLoad %465 
					                                         f32 %467 = OpFDiv %463 %466 
					                                                      OpStore %49 %467 
					                                         f32 %468 = OpLoad %49 
					                                         f32 %469 = OpFNegate %468 
					                                         f32 %470 = OpFAdd %469 %56 
					                                                      OpStore %49 %470 
					                                         f32 %471 = OpLoad %49 
					                                Uniform f32* %472 = OpAccessChain %109 %270 %30 
					                                         f32 %473 = OpLoad %472 
					                                         f32 %474 = OpFMul %471 %473 
					                                                      OpStore %49 %474 
					                                         f32 %475 = OpLoad %49 
					                                         f32 %476 = OpExtInst %1 40 %475 %209 
					                                                      OpStore %49 %476 
					                                         f32 %477 = OpLoad %49 
					                                Uniform f32* %478 = OpAccessChain %109 %289 %30 
					                                         f32 %479 = OpLoad %478 
					                                         f32 %480 = OpFMul %477 %479 
					                                Uniform f32* %481 = OpAccessChain %109 %289 %315 
					                                         f32 %482 = OpLoad %481 
					                                         f32 %483 = OpFAdd %480 %482 
					                                                      OpStore %49 %483 
					                                         f32 %484 = OpLoad %49 
					                                         f32 %485 = OpExtInst %1 43 %484 %209 %56 
					                                                      OpStore %49 %485 
					                                       f32_4 %486 = OpLoad %9 
					                                       f32_3 %487 = OpVectorShuffle %486 %486 0 1 2 
					                                         f32 %488 = OpLoad %49 
					                                       f32_3 %489 = OpCompositeConstruct %488 %488 %488 
					                                       f32_3 %490 = OpFMul %487 %489 
					                                       f32_4 %491 = OpLoad %438 
					                                       f32_4 %492 = OpVectorShuffle %491 %490 4 5 6 3 
					                                                      OpStore %438 %492 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(3) uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat10 = -abs(u_xlat9) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat11) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = max(u_xlat11, 0.00100000005);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat6 = (-u_xlat1.x) + 1.0;
					    u_xlat3 = u_xlat3 + -0.5;
					    u_xlat1.x = u_xlat3 * u_xlat10 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat3 = u_xlat3 * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat1.x * u_xlat3;
					    u_xlat3 = u_xlat0.x * u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat3 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat3 = u_xlat3 + 9.99999975e-06;
					    u_xlat3 = 0.5 / u_xlat3;
					    u_xlat3 = u_xlat3 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD7 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 316
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %82 %87 %94 %95 %109 %144 %217 %227 %231 %247 %264 %265 %267 %301 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %80 0 BuiltIn 80 
					                                                      OpMemberDecorate %80 1 BuiltIn 80 
					                                                      OpMemberDecorate %80 2 BuiltIn 80 
					                                                      OpDecorate %80 Block 
					                                                      OpDecorate vs_TEXCOORD7 Location 87 
					                                                      OpDecorate vs_TEXCOORD0 Location 94 
					                                                      OpDecorate %95 Location 95 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %144 Location 144 
					                                                      OpDecorate vs_TEXCOORD1 Location 217 
					                                                      OpDecorate vs_TEXCOORD2 Location 227 
					                                                      OpDecorate vs_TEXCOORD3 Location 231 
					                                                      OpDecorate vs_TEXCOORD4 Location 247 
					                                                      OpDecorate %264 Location 264 
					                                                      OpDecorate %265 Location 265 
					                                                      OpDecorate vs_TEXCOORD5 Location 267 
					                                                      OpDecorate vs_TEXCOORD6 Location 301 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeArray %7 %15 
					                                              %20 = OpTypeStruct %16 %17 %7 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %37 = OpConstant 2 
					                               Private f32_4* %45 = OpVariable Private 
					                                          i32 %47 = OpConstant 3 
					                               Private f32_4* %51 = OpVariable Private 
					                                          u32 %78 = OpConstant 1 
					                                              %79 = OpTypeArray %6 %78 
					                                              %80 = OpTypeStruct %7 %6 %79 
					                                              %81 = OpTypePointer Output %80 
					         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
					                                              %84 = OpTypePointer Output %7 
					                                              %86 = OpTypePointer Output %6 
					                         Output f32* vs_TEXCOORD7 = OpVariable Output 
					                                          u32 %88 = OpConstant 2 
					                                              %89 = OpTypePointer Private %6 
					                                              %92 = OpTypeVector %6 2 
					                                              %93 = OpTypePointer Output %92 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                 Input f32_4* %95 = OpVariable Input 
					                                          i32 %98 = OpConstant 5 
					                                             %107 = OpTypeVector %6 3 
					                                             %108 = OpTypePointer Input %107 
					                                Input f32_3* %109 = OpVariable Input 
					                                         u32 %127 = OpConstant 0 
					                                Private f32* %129 = OpVariable Private 
					                                Input f32_4* %144 = OpVariable Input 
					                                             %189 = OpTypePointer Private %107 
					                              Private f32_3* %190 = OpVariable Private 
					                                         u32 %204 = OpConstant 3 
					                                             %205 = OpTypePointer Input %6 
					                                             %208 = OpTypePointer Uniform %6 
					                                             %216 = OpTypePointer Output %107 
					                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %264 = OpVariable Output 
					                                Input f32_4* %265 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %268 = OpConstant 3,674022E-40 
					                                       f32_4 %269 = OpConstantComposite %268 %268 %268 %268 
					                                         i32 %272 = OpConstant 4 
					                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
					                                        f32_4 %31 = OpLoad %30 
					                                        f32_4 %32 = OpLoad %11 
					                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
					                                        f32_4 %34 = OpFMul %31 %33 
					                                        f32_4 %35 = OpLoad %9 
					                                        f32_4 %36 = OpFAdd %34 %35 
					                                                      OpStore %9 %36 
					                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_4 %40 = OpLoad %11 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
					                                        f32_4 %42 = OpFMul %39 %41 
					                                        f32_4 %43 = OpLoad %9 
					                                        f32_4 %44 = OpFAdd %42 %43 
					                                                      OpStore %9 %44 
					                                        f32_4 %46 = OpLoad %9 
					                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpFAdd %46 %49 
					                                                      OpStore %45 %50 
					                                        f32_4 %52 = OpLoad %45 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
					                               Uniform f32_4* %54 = OpAccessChain %22 %47 %25 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_4 %56 = OpFMul %53 %55 
					                                                      OpStore %51 %56 
					                               Uniform f32_4* %57 = OpAccessChain %22 %47 %24 
					                                        f32_4 %58 = OpLoad %57 
					                                        f32_4 %59 = OpLoad %45 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
					                                        f32_4 %61 = OpFMul %58 %60 
					                                        f32_4 %62 = OpLoad %51 
					                                        f32_4 %63 = OpFAdd %61 %62 
					                                                      OpStore %51 %63 
					                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpLoad %45 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
					                                        f32_4 %68 = OpFMul %65 %67 
					                                        f32_4 %69 = OpLoad %51 
					                                        f32_4 %70 = OpFAdd %68 %69 
					                                                      OpStore %51 %70 
					                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
					                                        f32_4 %72 = OpLoad %71 
					                                        f32_4 %73 = OpLoad %45 
					                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
					                                        f32_4 %75 = OpFMul %72 %74 
					                                        f32_4 %76 = OpLoad %51 
					                                        f32_4 %77 = OpFAdd %75 %76 
					                                                      OpStore %45 %77 
					                                        f32_4 %83 = OpLoad %45 
					                                Output f32_4* %85 = OpAccessChain %82 %24 
					                                                      OpStore %85 %83 
					                                 Private f32* %90 = OpAccessChain %45 %88 
					                                          f32 %91 = OpLoad %90 
					                                                      OpStore vs_TEXCOORD7 %91 
					                                        f32_4 %96 = OpLoad %95 
					                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
					                               Uniform f32_4* %99 = OpAccessChain %22 %98 
					                                       f32_4 %100 = OpLoad %99 
					                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
					                                       f32_2 %102 = OpFMul %97 %101 
					                              Uniform f32_4* %103 = OpAccessChain %22 %98 
					                                       f32_4 %104 = OpLoad %103 
					                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
					                                       f32_2 %106 = OpFAdd %102 %105 
					                                                      OpStore vs_TEXCOORD0 %106 
					                                       f32_3 %110 = OpLoad %109 
					                              Uniform f32_4* %111 = OpAccessChain %22 %25 %24 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
					                                         f32 %114 = OpDot %110 %113 
					                                Private f32* %115 = OpAccessChain %45 %78 
					                                                      OpStore %115 %114 
					                                       f32_3 %116 = OpLoad %109 
					                              Uniform f32_4* %117 = OpAccessChain %22 %25 %25 
					                                       f32_4 %118 = OpLoad %117 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                         f32 %120 = OpDot %116 %119 
					                                Private f32* %121 = OpAccessChain %45 %88 
					                                                      OpStore %121 %120 
					                                       f32_3 %122 = OpLoad %109 
					                              Uniform f32_4* %123 = OpAccessChain %22 %25 %37 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %128 = OpAccessChain %45 %127 
					                                                      OpStore %128 %126 
					                                       f32_4 %130 = OpLoad %45 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                       f32_4 %132 = OpLoad %45 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %131 %133 
					                                                      OpStore %129 %134 
					                                         f32 %135 = OpLoad %129 
					                                         f32 %136 = OpExtInst %1 32 %135 
					                                                      OpStore %129 %136 
					                                         f32 %137 = OpLoad %129 
					                                       f32_3 %138 = OpCompositeConstruct %137 %137 %137 
					                                       f32_4 %139 = OpLoad %45 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                       f32_3 %141 = OpFMul %138 %140 
					                                       f32_4 %142 = OpLoad %45 
					                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
					                                                      OpStore %45 %143 
					                                       f32_4 %145 = OpLoad %144 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 1 1 1 
					                              Uniform f32_4* %147 = OpAccessChain %22 %24 %25 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 1 2 0 
					                                       f32_3 %150 = OpFMul %146 %149 
					                                       f32_4 %151 = OpLoad %51 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %51 %152 
					                              Uniform f32_4* %153 = OpAccessChain %22 %24 %24 
					                                       f32_4 %154 = OpLoad %153 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 1 2 0 
					                                       f32_4 %156 = OpLoad %144 
					                                       f32_3 %157 = OpVectorShuffle %156 %156 0 0 0 
					                                       f32_3 %158 = OpFMul %155 %157 
					                                       f32_4 %159 = OpLoad %51 
					                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
					                                       f32_3 %161 = OpFAdd %158 %160 
					                                       f32_4 %162 = OpLoad %51 
					                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
					                                                      OpStore %51 %163 
					                              Uniform f32_4* %164 = OpAccessChain %22 %24 %37 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 1 2 0 
					                                       f32_4 %167 = OpLoad %144 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 2 2 2 
					                                       f32_3 %169 = OpFMul %166 %168 
					                                       f32_4 %170 = OpLoad %51 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                       f32_3 %172 = OpFAdd %169 %171 
					                                       f32_4 %173 = OpLoad %51 
					                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
					                                                      OpStore %51 %174 
					                                       f32_4 %175 = OpLoad %51 
					                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
					                                       f32_4 %177 = OpLoad %51 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpDot %176 %178 
					                                                      OpStore %129 %179 
					                                         f32 %180 = OpLoad %129 
					                                         f32 %181 = OpExtInst %1 32 %180 
					                                                      OpStore %129 %181 
					                                         f32 %182 = OpLoad %129 
					                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
					                                       f32_4 %184 = OpLoad %51 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                       f32_3 %186 = OpFMul %183 %185 
					                                       f32_4 %187 = OpLoad %51 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %51 %188 
					                                       f32_4 %191 = OpLoad %45 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
					                                       f32_4 %193 = OpLoad %51 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                       f32_3 %195 = OpFMul %192 %194 
					                                                      OpStore %190 %195 
					                                       f32_4 %196 = OpLoad %45 
					                                       f32_3 %197 = OpVectorShuffle %196 %196 2 0 1 
					                                       f32_4 %198 = OpLoad %51 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 1 2 0 
					                                       f32_3 %200 = OpFMul %197 %199 
					                                       f32_3 %201 = OpLoad %190 
					                                       f32_3 %202 = OpFNegate %201 
					                                       f32_3 %203 = OpFAdd %200 %202 
					                                                      OpStore %190 %203 
					                                  Input f32* %206 = OpAccessChain %144 %204 
					                                         f32 %207 = OpLoad %206 
					                                Uniform f32* %209 = OpAccessChain %22 %37 %204 
					                                         f32 %210 = OpLoad %209 
					                                         f32 %211 = OpFMul %207 %210 
					                                                      OpStore %129 %211 
					                                         f32 %212 = OpLoad %129 
					                                       f32_3 %213 = OpCompositeConstruct %212 %212 %212 
					                                       f32_3 %214 = OpLoad %190 
					                                       f32_3 %215 = OpFMul %213 %214 
					                                                      OpStore %190 %215 
					                                Private f32* %218 = OpAccessChain %190 %127 
					                                         f32 %219 = OpLoad %218 
					                                 Output f32* %220 = OpAccessChain vs_TEXCOORD1 %78 
					                                                      OpStore %220 %219 
					                                Private f32* %221 = OpAccessChain %51 %88 
					                                         f32 %222 = OpLoad %221 
					                                 Output f32* %223 = OpAccessChain vs_TEXCOORD1 %127 
					                                                      OpStore %223 %222 
					                                Private f32* %224 = OpAccessChain %45 %78 
					                                         f32 %225 = OpLoad %224 
					                                 Output f32* %226 = OpAccessChain vs_TEXCOORD1 %88 
					                                                      OpStore %226 %225 
					                                Private f32* %228 = OpAccessChain %51 %127 
					                                         f32 %229 = OpLoad %228 
					                                 Output f32* %230 = OpAccessChain vs_TEXCOORD2 %127 
					                                                      OpStore %230 %229 
					                                Private f32* %232 = OpAccessChain %51 %78 
					                                         f32 %233 = OpLoad %232 
					                                 Output f32* %234 = OpAccessChain vs_TEXCOORD3 %127 
					                                                      OpStore %234 %233 
					                                Private f32* %235 = OpAccessChain %45 %88 
					                                         f32 %236 = OpLoad %235 
					                                 Output f32* %237 = OpAccessChain vs_TEXCOORD2 %88 
					                                                      OpStore %237 %236 
					                                Private f32* %238 = OpAccessChain %45 %127 
					                                         f32 %239 = OpLoad %238 
					                                 Output f32* %240 = OpAccessChain vs_TEXCOORD3 %88 
					                                                      OpStore %240 %239 
					                                Private f32* %241 = OpAccessChain %190 %78 
					                                         f32 %242 = OpLoad %241 
					                                 Output f32* %243 = OpAccessChain vs_TEXCOORD2 %78 
					                                                      OpStore %243 %242 
					                                Private f32* %244 = OpAccessChain %190 %88 
					                                         f32 %245 = OpLoad %244 
					                                 Output f32* %246 = OpAccessChain vs_TEXCOORD3 %78 
					                                                      OpStore %246 %245 
					                              Uniform f32_4* %248 = OpAccessChain %22 %24 %47 
					                                       f32_4 %249 = OpLoad %248 
					                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
					                                       f32_4 %251 = OpLoad %11 
					                                       f32_3 %252 = OpVectorShuffle %251 %251 3 3 3 
					                                       f32_3 %253 = OpFMul %250 %252 
					                                       f32_4 %254 = OpLoad %9 
					                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
					                                       f32_3 %256 = OpFAdd %253 %255 
					                                                      OpStore vs_TEXCOORD4 %256 
					                              Uniform f32_4* %257 = OpAccessChain %22 %24 %47 
					                                       f32_4 %258 = OpLoad %257 
					                                       f32_4 %259 = OpLoad %11 
					                                       f32_4 %260 = OpVectorShuffle %259 %259 3 3 3 3 
					                                       f32_4 %261 = OpFMul %258 %260 
					                                       f32_4 %262 = OpLoad %9 
					                                       f32_4 %263 = OpFAdd %261 %262 
					                                                      OpStore %9 %263 
					                                       f32_4 %266 = OpLoad %265 
					                                                      OpStore %264 %266 
					                                                      OpStore vs_TEXCOORD5 %269 
					                                       f32_4 %270 = OpLoad %9 
					                                       f32_3 %271 = OpVectorShuffle %270 %270 1 1 1 
					                              Uniform f32_4* %273 = OpAccessChain %22 %272 %25 
					                                       f32_4 %274 = OpLoad %273 
					                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
					                                       f32_3 %276 = OpFMul %271 %275 
					                                       f32_4 %277 = OpLoad %45 
					                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 6 3 
					                                                      OpStore %45 %278 
					                              Uniform f32_4* %279 = OpAccessChain %22 %272 %24 
					                                       f32_4 %280 = OpLoad %279 
					                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
					                                       f32_4 %282 = OpLoad %9 
					                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
					                                       f32_3 %284 = OpFMul %281 %283 
					                                       f32_4 %285 = OpLoad %45 
					                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
					                                       f32_3 %287 = OpFAdd %284 %286 
					                                       f32_4 %288 = OpLoad %45 
					                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
					                                                      OpStore %45 %289 
					                              Uniform f32_4* %290 = OpAccessChain %22 %272 %37 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_4 %293 = OpLoad %9 
					                                       f32_3 %294 = OpVectorShuffle %293 %293 2 2 2 
					                                       f32_3 %295 = OpFMul %292 %294 
					                                       f32_4 %296 = OpLoad %45 
					                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
					                                       f32_3 %298 = OpFAdd %295 %297 
					                                       f32_4 %299 = OpLoad %9 
					                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
					                                                      OpStore %9 %300 
					                              Uniform f32_4* %302 = OpAccessChain %22 %272 %47 
					                                       f32_4 %303 = OpLoad %302 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
					                                       f32_3 %307 = OpFMul %304 %306 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFAdd %307 %309 
					                                                      OpStore vs_TEXCOORD6 %310 
					                                 Output f32* %311 = OpAccessChain %82 %24 %78 
					                                         f32 %312 = OpLoad %311 
					                                         f32 %313 = OpFNegate %312 
					                                 Output f32* %314 = OpAccessChain %82 %24 %78 
					                                                      OpStore %314 %313 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 487
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %22 %66 %72 %79 %102 %424 %431 %455 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpDecorate %12 DescriptorSet 12 
					                                                      OpDecorate %12 Binding 12 
					                                                      OpDecorate %16 DescriptorSet 16 
					                                                      OpDecorate %16 Binding 16 
					                                                      OpDecorate vs_TEXCOORD0 Location 22 
					                                                      OpDecorate vs_TEXCOORD1 Location 66 
					                                                      OpDecorate vs_TEXCOORD2 Location 72 
					                                                      OpDecorate vs_TEXCOORD3 Location 79 
					                                                      OpDecorate vs_TEXCOORD4 Location 102 
					                                                      OpDecorate %106 ArrayStride 106 
					                                                      OpMemberDecorate %107 0 Offset 107 
					                                                      OpMemberDecorate %107 1 Offset 107 
					                                                      OpMemberDecorate %107 2 Offset 107 
					                                                      OpMemberDecorate %107 3 Offset 107 
					                                                      OpMemberDecorate %107 4 Offset 107 
					                                                      OpMemberDecorate %107 5 Offset 107 
					                                                      OpMemberDecorate %107 6 Offset 107 
					                                                      OpDecorate %107 Block 
					                                                      OpDecorate %109 DescriptorSet 109 
					                                                      OpDecorate %109 Binding 109 
					                                                      OpDecorate %315 DescriptorSet 315 
					                                                      OpDecorate %315 Binding 315 
					                                                      OpDecorate %317 DescriptorSet 317 
					                                                      OpDecorate %317 Binding 317 
					                                                      OpDecorate %327 DescriptorSet 327 
					                                                      OpDecorate %327 Binding 327 
					                                                      OpDecorate %329 DescriptorSet 329 
					                                                      OpDecorate %329 Binding 329 
					                                                      OpDecorate %409 DescriptorSet 409 
					                                                      OpDecorate %409 Binding 409 
					                                                      OpDecorate %411 DescriptorSet 411 
					                                                      OpDecorate %411 Binding 411 
					                                                      OpDecorate %424 Location 424 
					                                                      OpDecorate %431 Location 431 
					                                                      OpDecorate vs_TEXCOORD7 Location 455 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %11 = OpTypePointer UniformConstant %10 
					         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                              %14 = OpTypeSampler 
					                                              %15 = OpTypePointer UniformConstant %14 
					                     UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                              %18 = OpTypeSampledImage %10 
					                                              %20 = OpTypeVector %6 2 
					                                              %21 = OpTypePointer Input %20 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                              %25 = OpTypeVector %6 3 
					                                              %29 = OpTypeInt 32 0 
					                                          u32 %30 = OpConstant 2 
					                                              %31 = OpTypePointer Private %6 
					                                          u32 %34 = OpConstant 0 
					                                          f32 %41 = OpConstant 3,674022E-40 
					                                        f32_2 %42 = OpConstantComposite %41 %41 
					                                          f32 %44 = OpConstant 3,674022E-40 
					                                        f32_2 %45 = OpConstantComposite %44 %44 
					                                 Private f32* %49 = OpVariable Private 
					                                          f32 %56 = OpConstant 3,674022E-40 
					                               Private f32_4* %64 = OpVariable Private 
					                                              %65 = OpTypePointer Input %25 
					                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %77 = OpConstant 1 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                                         u32 %105 = OpConstant 4 
					                                             %106 = OpTypeArray %7 %105 
					                                             %107 = OpTypeStruct %25 %7 %7 %7 %7 %106 %7 
					                                             %108 = OpTypePointer Uniform %107 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %109 = OpVariable Uniform 
					                                             %110 = OpTypeInt 32 1 
					                                         i32 %111 = OpConstant 0 
					                                             %112 = OpTypePointer Uniform %25 
					                                Private f32* %137 = OpVariable Private 
					                                             %142 = OpTypePointer Private %25 
					                              Private f32_3* %143 = OpVariable Private 
					                                         i32 %160 = OpConstant 2 
					                                             %161 = OpTypePointer Uniform %7 
					                                Private f32* %166 = OpVariable Private 
					                                         f32 %191 = OpConstant 3,674022E-40 
					                                         f32 %209 = OpConstant 3,674022E-40 
					                                Private f32* %221 = OpVariable Private 
					                                Private f32* %227 = OpVariable Private 
					                                         f32 %233 = OpConstant 3,674022E-40 
					                                Private f32* %240 = OpVariable Private 
					                                Private f32* %245 = OpVariable Private 
					                                         i32 %269 = OpConstant 5 
					                                         i32 %270 = OpConstant 1 
					                                         i32 %301 = OpConstant 3 
					                                             %313 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %314 = OpTypePointer UniformConstant %313 
					      UniformConstant read_only TextureCube* %315 = OpVariable UniformConstant 
					                    UniformConstant sampler* %317 = OpVariable UniformConstant 
					                                             %319 = OpTypeSampledImage %313 
					                                         u32 %324 = OpConstant 3 
					        UniformConstant read_only Texture2D* %327 = OpVariable UniformConstant 
					                    UniformConstant sampler* %329 = OpVariable UniformConstant 
					                                         i32 %343 = OpConstant 4 
					                                         f32 %361 = OpConstant 3,674022E-40 
					                                         f32 %363 = OpConstant 3,674022E-40 
					                                         f32 %373 = OpConstant 3,674022E-40 
					                                         f32 %398 = OpConstant 3,674022E-40 
					                                         f32 %400 = OpConstant 3,674022E-40 
					        UniformConstant read_only Texture2D* %409 = OpVariable UniformConstant 
					                    UniformConstant sampler* %411 = OpVariable UniformConstant 
					                                         i32 %417 = OpConstant 6 
					                                             %423 = OpTypePointer Input %7 
					                                Input f32_4* %424 = OpVariable Input 
					                                             %430 = OpTypePointer Output %7 
					                               Output f32_4* %431 = OpVariable Output 
					                                             %434 = OpTypePointer Input %6 
					                                             %438 = OpTypePointer Output %6 
					                                       f32_3 %442 = OpConstantComposite %398 %398 %398 
					                          Input f32* vs_TEXCOORD7 = OpVariable Input 
					                                             %457 = OpTypePointer Uniform %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                          read_only Texture2D %13 = OpLoad %12 
					                                      sampler %17 = OpLoad %16 
					                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %24 = OpImageSampleImplicitLod %19 %23 
					                                        f32_3 %26 = OpVectorShuffle %24 %24 0 1 3 
					                                        f32_4 %27 = OpLoad %9 
					                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
					                                                      OpStore %9 %28 
					                                 Private f32* %32 = OpAccessChain %9 %30 
					                                          f32 %33 = OpLoad %32 
					                                 Private f32* %35 = OpAccessChain %9 %34 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %37 = OpFMul %33 %36 
					                                 Private f32* %38 = OpAccessChain %9 %34 
					                                                      OpStore %38 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
					                                        f32_2 %43 = OpFMul %40 %42 
					                                        f32_2 %46 = OpFAdd %43 %45 
					                                        f32_4 %47 = OpLoad %9 
					                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
					                                                      OpStore %9 %48 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
					                                          f32 %54 = OpDot %51 %53 
					                                                      OpStore %49 %54 
					                                          f32 %55 = OpLoad %49 
					                                          f32 %57 = OpExtInst %1 37 %55 %56 
					                                                      OpStore %49 %57 
					                                          f32 %58 = OpLoad %49 
					                                          f32 %59 = OpFNegate %58 
					                                          f32 %60 = OpFAdd %59 %56 
					                                                      OpStore %49 %60 
					                                          f32 %61 = OpLoad %49 
					                                          f32 %62 = OpExtInst %1 31 %61 
					                                 Private f32* %63 = OpAccessChain %9 %30 
					                                                      OpStore %63 %62 
					                                        f32_3 %67 = OpLoad vs_TEXCOORD1 
					                                        f32_4 %68 = OpLoad %9 
					                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
					                                          f32 %70 = OpDot %67 %69 
					                                 Private f32* %71 = OpAccessChain %64 %34 
					                                                      OpStore %71 %70 
					                                        f32_3 %73 = OpLoad vs_TEXCOORD2 
					                                        f32_4 %74 = OpLoad %9 
					                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
					                                          f32 %76 = OpDot %73 %75 
					                                 Private f32* %78 = OpAccessChain %64 %77 
					                                                      OpStore %78 %76 
					                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
					                                        f32_4 %81 = OpLoad %9 
					                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
					                                          f32 %83 = OpDot %80 %82 
					                                 Private f32* %84 = OpAccessChain %64 %30 
					                                                      OpStore %84 %83 
					                                        f32_4 %85 = OpLoad %64 
					                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
					                                        f32_4 %87 = OpLoad %64 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                          f32 %89 = OpDot %86 %88 
					                                 Private f32* %90 = OpAccessChain %9 %34 
					                                                      OpStore %90 %89 
					                                 Private f32* %91 = OpAccessChain %9 %34 
					                                          f32 %92 = OpLoad %91 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                 Private f32* %94 = OpAccessChain %9 %34 
					                                                      OpStore %94 %93 
					                                        f32_4 %95 = OpLoad %9 
					                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
					                                        f32_4 %97 = OpLoad %64 
					                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
					                                        f32_3 %99 = OpFMul %96 %98 
					                                       f32_4 %100 = OpLoad %9 
					                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
					                                                      OpStore %9 %101 
					                                       f32_3 %103 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %104 = OpFNegate %103 
					                              Uniform f32_3* %113 = OpAccessChain %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                                       f32_3 %115 = OpFAdd %104 %114 
					                                       f32_4 %116 = OpLoad %64 
					                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
					                                                      OpStore %64 %117 
					                                       f32_4 %118 = OpLoad %64 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_4 %120 = OpLoad %64 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
					                                         f32 %122 = OpDot %119 %121 
					                                                      OpStore %49 %122 
					                                         f32 %123 = OpLoad %49 
					                                         f32 %124 = OpExtInst %1 32 %123 
					                                                      OpStore %49 %124 
					                                         f32 %125 = OpLoad %49 
					                                       f32_3 %126 = OpCompositeConstruct %125 %125 %125 
					                                       f32_4 %127 = OpLoad %64 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                       f32_3 %129 = OpFMul %126 %128 
					                                       f32_4 %130 = OpLoad %64 
					                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
					                                                      OpStore %64 %131 
					                                       f32_4 %132 = OpLoad %9 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                       f32_4 %134 = OpLoad %64 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %133 %135 
					                                                      OpStore %49 %136 
					                                         f32 %138 = OpLoad %49 
					                                         f32 %139 = OpExtInst %1 4 %138 
					                                         f32 %140 = OpFNegate %139 
					                                         f32 %141 = OpFAdd %140 %56 
					                                                      OpStore %137 %141 
					                                         f32 %144 = OpLoad %137 
					                                         f32 %145 = OpLoad %137 
					                                         f32 %146 = OpFMul %144 %145 
					                                Private f32* %147 = OpAccessChain %143 %34 
					                                                      OpStore %147 %146 
					                                Private f32* %148 = OpAccessChain %143 %34 
					                                         f32 %149 = OpLoad %148 
					                                Private f32* %150 = OpAccessChain %143 %34 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFMul %149 %151 
					                                Private f32* %153 = OpAccessChain %143 %34 
					                                                      OpStore %153 %152 
					                                         f32 %154 = OpLoad %137 
					                                Private f32* %155 = OpAccessChain %143 %34 
					                                         f32 %156 = OpLoad %155 
					                                         f32 %157 = OpFMul %154 %156 
					                                                      OpStore %137 %157 
					                                       f32_3 %158 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %159 = OpFNegate %158 
					                              Uniform f32_4* %162 = OpAccessChain %109 %160 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFAdd %159 %164 
					                                                      OpStore %143 %165 
					                                       f32_3 %167 = OpLoad %143 
					                                       f32_3 %168 = OpLoad %143 
					                                         f32 %169 = OpDot %167 %168 
					                                                      OpStore %166 %169 
					                                         f32 %170 = OpLoad %166 
					                                         f32 %171 = OpExtInst %1 32 %170 
					                                                      OpStore %166 %171 
					                                       f32_3 %172 = OpLoad %143 
					                                         f32 %173 = OpLoad %166 
					                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
					                                       f32_3 %175 = OpFMul %172 %174 
					                                       f32_4 %176 = OpLoad %64 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_3 %178 = OpFAdd %175 %177 
					                                       f32_4 %179 = OpLoad %64 
					                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
					                                                      OpStore %64 %180 
					                                         f32 %181 = OpLoad %166 
					                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
					                                       f32_3 %183 = OpLoad %143 
					                                       f32_3 %184 = OpFMul %182 %183 
					                                                      OpStore %143 %184 
					                                       f32_4 %185 = OpLoad %64 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_4 %187 = OpLoad %64 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                         f32 %189 = OpDot %186 %188 
					                                                      OpStore %166 %189 
					                                         f32 %190 = OpLoad %166 
					                                         f32 %192 = OpExtInst %1 40 %190 %191 
					                                                      OpStore %166 %192 
					                                         f32 %193 = OpLoad %166 
					                                         f32 %194 = OpExtInst %1 32 %193 
					                                                      OpStore %166 %194 
					                                       f32_4 %195 = OpLoad %64 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                         f32 %197 = OpLoad %166 
					                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
					                                       f32_3 %199 = OpFMul %196 %198 
					                                       f32_4 %200 = OpLoad %64 
					                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
					                                                      OpStore %64 %201 
					                                       f32_3 %202 = OpLoad %143 
					                                       f32_4 %203 = OpLoad %64 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
					                                         f32 %205 = OpDot %202 %204 
					                                Private f32* %206 = OpAccessChain %64 %34 
					                                                      OpStore %206 %205 
					                                Private f32* %207 = OpAccessChain %64 %34 
					                                         f32 %208 = OpLoad %207 
					                                         f32 %210 = OpExtInst %1 43 %208 %209 %56 
					                                Private f32* %211 = OpAccessChain %64 %34 
					                                                      OpStore %211 %210 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                                       f32_3 %214 = OpLoad %143 
					                                         f32 %215 = OpDot %213 %214 
					                                Private f32* %216 = OpAccessChain %9 %34 
					                                                      OpStore %216 %215 
					                                Private f32* %217 = OpAccessChain %9 %34 
					                                         f32 %218 = OpLoad %217 
					                                         f32 %219 = OpExtInst %1 43 %218 %209 %56 
					                                Private f32* %220 = OpAccessChain %9 %34 
					                                                      OpStore %220 %219 
					                                       f32_4 %222 = OpLoad %64 
					                                       f32_2 %223 = OpVectorShuffle %222 %222 0 0 
					                                       f32_4 %224 = OpLoad %64 
					                                       f32_2 %225 = OpVectorShuffle %224 %224 0 0 
					                                         f32 %226 = OpDot %223 %225 
					                                                      OpStore %221 %226 
					                                Private f32* %228 = OpAccessChain %64 %34 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFNegate %229 
					                                         f32 %231 = OpFAdd %230 %56 
					                                                      OpStore %227 %231 
					                                         f32 %232 = OpLoad %221 
					                                         f32 %234 = OpFAdd %232 %233 
					                                                      OpStore %221 %234 
					                                         f32 %235 = OpLoad %221 
					                                         f32 %236 = OpLoad %137 
					                                         f32 %237 = OpFMul %235 %236 
					                                         f32 %238 = OpFAdd %237 %56 
					                                Private f32* %239 = OpAccessChain %64 %34 
					                                                      OpStore %239 %238 
					                                Private f32* %241 = OpAccessChain %9 %34 
					                                         f32 %242 = OpLoad %241 
					                                         f32 %243 = OpFNegate %242 
					                                         f32 %244 = OpFAdd %243 %56 
					                                                      OpStore %240 %244 
					                                         f32 %246 = OpLoad %240 
					                                         f32 %247 = OpLoad %240 
					                                         f32 %248 = OpFMul %246 %247 
					                                                      OpStore %245 %248 
					                                         f32 %249 = OpLoad %245 
					                                         f32 %250 = OpLoad %245 
					                                         f32 %251 = OpFMul %249 %250 
					                                                      OpStore %245 %251 
					                                         f32 %252 = OpLoad %240 
					                                         f32 %253 = OpLoad %245 
					                                         f32 %254 = OpFMul %252 %253 
					                                                      OpStore %240 %254 
					                                         f32 %255 = OpLoad %221 
					                                         f32 %256 = OpLoad %240 
					                                         f32 %257 = OpFMul %255 %256 
					                                         f32 %258 = OpFAdd %257 %56 
					                                                      OpStore %221 %258 
					                                Private f32* %259 = OpAccessChain %64 %34 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpLoad %221 
					                                         f32 %262 = OpFMul %260 %261 
					                                                      OpStore %221 %262 
					                                Private f32* %263 = OpAccessChain %9 %34 
					                                         f32 %264 = OpLoad %263 
					                                         f32 %265 = OpLoad %221 
					                                         f32 %266 = OpFMul %264 %265 
					                                                      OpStore %221 %266 
					                                       f32_3 %267 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %268 = OpVectorShuffle %267 %267 1 1 1 
					                              Uniform f32_4* %271 = OpAccessChain %109 %269 %270 
					                                       f32_4 %272 = OpLoad %271 
					                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
					                                       f32_3 %274 = OpFMul %268 %273 
					                                       f32_4 %275 = OpLoad %64 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
					                                                      OpStore %64 %276 
					                              Uniform f32_4* %277 = OpAccessChain %109 %269 %111 
					                                       f32_4 %278 = OpLoad %277 
					                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
					                                       f32_3 %280 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %281 = OpVectorShuffle %280 %280 0 0 0 
					                                       f32_3 %282 = OpFMul %279 %281 
					                                       f32_4 %283 = OpLoad %64 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
					                                       f32_3 %285 = OpFAdd %282 %284 
					                                       f32_4 %286 = OpLoad %64 
					                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
					                                                      OpStore %64 %287 
					                              Uniform f32_4* %288 = OpAccessChain %109 %269 %160 
					                                       f32_4 %289 = OpLoad %288 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
					                                       f32_3 %291 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 2 2 2 
					                                       f32_3 %293 = OpFMul %290 %292 
					                                       f32_4 %294 = OpLoad %64 
					                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
					                                       f32_3 %296 = OpFAdd %293 %295 
					                                       f32_4 %297 = OpLoad %64 
					                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 6 3 
					                                                      OpStore %64 %298 
					                                       f32_4 %299 = OpLoad %64 
					                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
					                              Uniform f32_4* %302 = OpAccessChain %109 %269 %301 
					                                       f32_4 %303 = OpLoad %302 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_3 %305 = OpFAdd %300 %304 
					                                       f32_4 %306 = OpLoad %64 
					                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
					                                                      OpStore %64 %307 
					                                       f32_4 %308 = OpLoad %64 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_4 %310 = OpLoad %64 
					                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
					                                         f32 %312 = OpDot %309 %311 
					                                                      OpStore %137 %312 
					                       read_only TextureCube %316 = OpLoad %315 
					                                     sampler %318 = OpLoad %317 
					                read_only TextureCubeSampled %320 = OpSampledImage %316 %318 
					                                       f32_4 %321 = OpLoad %64 
					                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
					                                       f32_4 %323 = OpImageSampleImplicitLod %320 %322 
					                                         f32 %325 = OpCompositeExtract %323 3 
					                                Private f32* %326 = OpAccessChain %64 %34 
					                                                      OpStore %326 %325 
					                         read_only Texture2D %328 = OpLoad %327 
					                                     sampler %330 = OpLoad %329 
					                  read_only Texture2DSampled %331 = OpSampledImage %328 %330 
					                                         f32 %332 = OpLoad %137 
					                                       f32_2 %333 = OpCompositeConstruct %332 %332 
					                                       f32_4 %334 = OpImageSampleImplicitLod %331 %333 
					                                         f32 %335 = OpCompositeExtract %334 0 
					                                                      OpStore %240 %335 
					                                Private f32* %336 = OpAccessChain %64 %34 
					                                         f32 %337 = OpLoad %336 
					                                         f32 %338 = OpLoad %240 
					                                         f32 %339 = OpFMul %337 %338 
					                                Private f32* %340 = OpAccessChain %64 %34 
					                                                      OpStore %340 %339 
					                                       f32_4 %341 = OpLoad %64 
					                                       f32_3 %342 = OpVectorShuffle %341 %341 0 0 0 
					                              Uniform f32_4* %344 = OpAccessChain %109 %343 
					                                       f32_4 %345 = OpLoad %344 
					                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
					                                       f32_3 %347 = OpFMul %342 %346 
					                                       f32_4 %348 = OpLoad %64 
					                                       f32_4 %349 = OpVectorShuffle %348 %347 4 5 6 3 
					                                                      OpStore %64 %349 
					                                         f32 %350 = OpLoad %221 
					                                       f32_3 %351 = OpCompositeConstruct %350 %350 %350 
					                                       f32_4 %352 = OpLoad %64 
					                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
					                                       f32_3 %354 = OpFMul %351 %353 
					                                                      OpStore %143 %354 
					                                         f32 %355 = OpLoad %49 
					                                         f32 %356 = OpExtInst %1 4 %355 
					                                Private f32* %357 = OpAccessChain %9 %34 
					                                         f32 %358 = OpLoad %357 
					                                         f32 %359 = OpFAdd %356 %358 
					                                                      OpStore %221 %359 
					                                         f32 %360 = OpLoad %221 
					                                         f32 %362 = OpFAdd %360 %361 
					                                                      OpStore %221 %362 
					                                         f32 %364 = OpLoad %221 
					                                         f32 %365 = OpFDiv %363 %364 
					                                                      OpStore %221 %365 
					                                Private f32* %366 = OpAccessChain %9 %34 
					                                         f32 %367 = OpLoad %366 
					                                         f32 %368 = OpLoad %221 
					                                         f32 %369 = OpFMul %367 %368 
					                                Private f32* %370 = OpAccessChain %9 %34 
					                                                      OpStore %370 %369 
					                                Private f32* %371 = OpAccessChain %9 %34 
					                                         f32 %372 = OpLoad %371 
					                                         f32 %374 = OpFMul %372 %373 
					                                Private f32* %375 = OpAccessChain %9 %34 
					                                                      OpStore %375 %374 
					                                       f32_4 %376 = OpLoad %64 
					                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
					                                       f32_4 %378 = OpLoad %9 
					                                       f32_3 %379 = OpVectorShuffle %378 %378 0 0 0 
					                                       f32_3 %380 = OpFMul %377 %379 
					                                       f32_4 %381 = OpLoad %9 
					                                       f32_4 %382 = OpVectorShuffle %381 %380 4 5 2 6 
					                                                      OpStore %9 %382 
					                                         f32 %383 = OpLoad %227 
					                                         f32 %384 = OpLoad %227 
					                                         f32 %385 = OpFMul %383 %384 
					                                Private f32* %386 = OpAccessChain %64 %34 
					                                                      OpStore %386 %385 
					                                Private f32* %387 = OpAccessChain %64 %34 
					                                         f32 %388 = OpLoad %387 
					                                Private f32* %389 = OpAccessChain %64 %34 
					                                         f32 %390 = OpLoad %389 
					                                         f32 %391 = OpFMul %388 %390 
					                                Private f32* %392 = OpAccessChain %64 %34 
					                                                      OpStore %392 %391 
					                                         f32 %393 = OpLoad %227 
					                                Private f32* %394 = OpAccessChain %64 %34 
					                                         f32 %395 = OpLoad %394 
					                                         f32 %396 = OpFMul %393 %395 
					                                                      OpStore %227 %396 
					                                         f32 %397 = OpLoad %227 
					                                         f32 %399 = OpFMul %397 %398 
					                                         f32 %401 = OpFAdd %399 %400 
					                                                      OpStore %227 %401 
					                                         f32 %402 = OpLoad %227 
					                                       f32_3 %403 = OpCompositeConstruct %402 %402 %402 
					                                       f32_4 %404 = OpLoad %9 
					                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 3 
					                                       f32_3 %406 = OpFMul %403 %405 
					                                       f32_4 %407 = OpLoad %9 
					                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 6 3 
					                                                      OpStore %9 %408 
					                         read_only Texture2D %410 = OpLoad %409 
					                                     sampler %412 = OpLoad %411 
					                  read_only Texture2DSampled %413 = OpSampledImage %410 %412 
					                                       f32_2 %414 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %415 = OpImageSampleImplicitLod %413 %414 
					                                                      OpStore %64 %415 
					                                       f32_4 %416 = OpLoad %64 
					                              Uniform f32_4* %418 = OpAccessChain %109 %417 
					                                       f32_4 %419 = OpLoad %418 
					                                       f32_4 %420 = OpFMul %416 %419 
					                                                      OpStore %64 %420 
					                                       f32_4 %421 = OpLoad %64 
					                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
					                                       f32_4 %425 = OpLoad %424 
					                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
					                                       f32_3 %427 = OpFMul %422 %426 
					                                       f32_4 %428 = OpLoad %64 
					                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 6 3 
					                                                      OpStore %64 %429 
					                                Private f32* %432 = OpAccessChain %64 %324 
					                                         f32 %433 = OpLoad %432 
					                                  Input f32* %435 = OpAccessChain %424 %324 
					                                         f32 %436 = OpLoad %435 
					                                         f32 %437 = OpFMul %433 %436 
					                                 Output f32* %439 = OpAccessChain %431 %324 
					                                                      OpStore %439 %437 
					                                       f32_4 %440 = OpLoad %64 
					                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
					                                       f32_3 %443 = OpFMul %441 %442 
					                                       f32_4 %444 = OpLoad %64 
					                                       f32_4 %445 = OpVectorShuffle %444 %443 4 5 6 3 
					                                                      OpStore %64 %445 
					                                       f32_4 %446 = OpLoad %64 
					                                       f32_3 %447 = OpVectorShuffle %446 %446 0 1 2 
					                                       f32_3 %448 = OpLoad %143 
					                                       f32_3 %449 = OpFMul %447 %448 
					                                       f32_4 %450 = OpLoad %9 
					                                       f32_3 %451 = OpVectorShuffle %450 %450 0 1 2 
					                                       f32_3 %452 = OpFAdd %449 %451 
					                                       f32_4 %453 = OpLoad %9 
					                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
					                                                      OpStore %9 %454 
					                                         f32 %456 = OpLoad vs_TEXCOORD7 
					                                Uniform f32* %458 = OpAccessChain %109 %270 %77 
					                                         f32 %459 = OpLoad %458 
					                                         f32 %460 = OpFDiv %456 %459 
					                                                      OpStore %49 %460 
					                                         f32 %461 = OpLoad %49 
					                                         f32 %462 = OpFNegate %461 
					                                         f32 %463 = OpFAdd %462 %56 
					                                                      OpStore %49 %463 
					                                         f32 %464 = OpLoad %49 
					                                Uniform f32* %465 = OpAccessChain %109 %270 %30 
					                                         f32 %466 = OpLoad %465 
					                                         f32 %467 = OpFMul %464 %466 
					                                                      OpStore %49 %467 
					                                         f32 %468 = OpLoad %49 
					                                         f32 %469 = OpExtInst %1 40 %468 %209 
					                                                      OpStore %49 %469 
					                                         f32 %470 = OpLoad %49 
					                                Uniform f32* %471 = OpAccessChain %109 %301 %30 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFMul %470 %472 
					                                Uniform f32* %474 = OpAccessChain %109 %301 %324 
					                                         f32 %475 = OpLoad %474 
					                                         f32 %476 = OpFAdd %473 %475 
					                                                      OpStore %49 %476 
					                                         f32 %477 = OpLoad %49 
					                                         f32 %478 = OpExtInst %1 43 %477 %209 %56 
					                                                      OpStore %49 %478 
					                                       f32_4 %479 = OpLoad %9 
					                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
					                                         f32 %481 = OpLoad %49 
					                                       f32_3 %482 = OpCompositeConstruct %481 %481 %481 
					                                       f32_3 %483 = OpFMul %480 %482 
					                                       f32_4 %484 = OpLoad %431 
					                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 6 3 
					                                                      OpStore %431 %485 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _Color;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _Normal;
					UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = -abs(u_xlat9) + 1.0;
					    u_xlat6 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat6 = u_xlat6 + 9.99999975e-06;
					    u_xlat6 = 0.5 / u_xlat6;
					    u_xlat6 = u_xlat6 * 0.999999881;
					    u_xlat6 = u_xlat0.x * u_xlat6;
					    u_xlat9 = u_xlat3 * u_xlat3;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat3 = u_xlat3 * u_xlat9;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1.x = dot(vec2(u_xlat9), vec2(u_xlat9));
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat3 = u_xlat1.x * u_xlat3 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat3 * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat1.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9 = u_xlat9 * u_xlat1.x;
					    u_xlat9 = u_xlat9 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD7 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 322
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %82 %87 %101 %144 %154 %155 %168 %203 %281 %291 %295 %311 %312 %314 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %80 0 BuiltIn 80 
					                                                      OpMemberDecorate %80 1 BuiltIn 80 
					                                                      OpMemberDecorate %80 2 BuiltIn 80 
					                                                      OpDecorate %80 Block 
					                                                      OpDecorate vs_TEXCOORD7 Location 87 
					                                                      OpDecorate vs_TEXCOORD4 Location 101 
					                                                      OpDecorate vs_TEXCOORD6 Location 144 
					                                                      OpDecorate vs_TEXCOORD0 Location 154 
					                                                      OpDecorate %155 Location 155 
					                                                      OpDecorate %168 Location 168 
					                                                      OpDecorate %203 Location 203 
					                                                      OpDecorate vs_TEXCOORD1 Location 281 
					                                                      OpDecorate vs_TEXCOORD2 Location 291 
					                                                      OpDecorate vs_TEXCOORD3 Location 295 
					                                                      OpDecorate %311 Location 311 
					                                                      OpDecorate %312 Location 312 
					                                                      OpDecorate vs_TEXCOORD5 Location 314 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeArray %7 %15 
					                                              %20 = OpTypeStruct %16 %17 %7 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %37 = OpConstant 2 
					                               Private f32_4* %45 = OpVariable Private 
					                                          i32 %47 = OpConstant 3 
					                               Private f32_4* %51 = OpVariable Private 
					                                          u32 %78 = OpConstant 1 
					                                              %79 = OpTypeArray %6 %78 
					                                              %80 = OpTypeStruct %7 %6 %79 
					                                              %81 = OpTypePointer Output %80 
					         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
					                                              %84 = OpTypePointer Output %7 
					                                              %86 = OpTypePointer Output %6 
					                         Output f32* vs_TEXCOORD7 = OpVariable Output 
					                                          u32 %88 = OpConstant 2 
					                                              %89 = OpTypePointer Private %6 
					                                              %99 = OpTypeVector %6 3 
					                                             %100 = OpTypePointer Output %99 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                                             %111 = OpTypeVector %6 2 
					                                         i32 %114 = OpConstant 4 
					                                             %143 = OpTypePointer Output %111 
					                       Output f32_2* vs_TEXCOORD6 = OpVariable Output 
					                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                                Input f32_4* %155 = OpVariable Input 
					                                         i32 %158 = OpConstant 5 
					                                             %167 = OpTypePointer Input %99 
					                                Input f32_3* %168 = OpVariable Input 
					                                         u32 %186 = OpConstant 0 
					                                Private f32* %188 = OpVariable Private 
					                                Input f32_4* %203 = OpVariable Input 
					                                         u32 %266 = OpConstant 3 
					                                             %267 = OpTypePointer Input %6 
					                                             %270 = OpTypePointer Uniform %6 
					                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                               Output f32_4* %311 = OpVariable Output 
					                                Input f32_4* %312 = OpVariable Input 
					                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %315 = OpConstant 3,674022E-40 
					                                       f32_4 %316 = OpConstantComposite %315 %315 %315 %315 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
					                                        f32_4 %31 = OpLoad %30 
					                                        f32_4 %32 = OpLoad %11 
					                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
					                                        f32_4 %34 = OpFMul %31 %33 
					                                        f32_4 %35 = OpLoad %9 
					                                        f32_4 %36 = OpFAdd %34 %35 
					                                                      OpStore %9 %36 
					                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_4 %40 = OpLoad %11 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
					                                        f32_4 %42 = OpFMul %39 %41 
					                                        f32_4 %43 = OpLoad %9 
					                                        f32_4 %44 = OpFAdd %42 %43 
					                                                      OpStore %9 %44 
					                                        f32_4 %46 = OpLoad %9 
					                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpFAdd %46 %49 
					                                                      OpStore %45 %50 
					                                        f32_4 %52 = OpLoad %45 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
					                               Uniform f32_4* %54 = OpAccessChain %22 %47 %25 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_4 %56 = OpFMul %53 %55 
					                                                      OpStore %51 %56 
					                               Uniform f32_4* %57 = OpAccessChain %22 %47 %24 
					                                        f32_4 %58 = OpLoad %57 
					                                        f32_4 %59 = OpLoad %45 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
					                                        f32_4 %61 = OpFMul %58 %60 
					                                        f32_4 %62 = OpLoad %51 
					                                        f32_4 %63 = OpFAdd %61 %62 
					                                                      OpStore %51 %63 
					                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpLoad %45 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
					                                        f32_4 %68 = OpFMul %65 %67 
					                                        f32_4 %69 = OpLoad %51 
					                                        f32_4 %70 = OpFAdd %68 %69 
					                                                      OpStore %51 %70 
					                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
					                                        f32_4 %72 = OpLoad %71 
					                                        f32_4 %73 = OpLoad %45 
					                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
					                                        f32_4 %75 = OpFMul %72 %74 
					                                        f32_4 %76 = OpLoad %51 
					                                        f32_4 %77 = OpFAdd %75 %76 
					                                                      OpStore %45 %77 
					                                        f32_4 %83 = OpLoad %45 
					                                Output f32_4* %85 = OpAccessChain %82 %24 
					                                                      OpStore %85 %83 
					                                 Private f32* %90 = OpAccessChain %45 %88 
					                                          f32 %91 = OpLoad %90 
					                                                      OpStore vs_TEXCOORD7 %91 
					                               Uniform f32_4* %92 = OpAccessChain %22 %24 %47 
					                                        f32_4 %93 = OpLoad %92 
					                                        f32_4 %94 = OpLoad %11 
					                                        f32_4 %95 = OpVectorShuffle %94 %94 3 3 3 3 
					                                        f32_4 %96 = OpFMul %93 %95 
					                                        f32_4 %97 = OpLoad %9 
					                                        f32_4 %98 = OpFAdd %96 %97 
					                                                      OpStore %45 %98 
					                              Uniform f32_4* %102 = OpAccessChain %22 %24 %47 
					                                       f32_4 %103 = OpLoad %102 
					                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
					                                       f32_4 %105 = OpLoad %11 
					                                       f32_3 %106 = OpVectorShuffle %105 %105 3 3 3 
					                                       f32_3 %107 = OpFMul %104 %106 
					                                       f32_4 %108 = OpLoad %9 
					                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
					                                       f32_3 %110 = OpFAdd %107 %109 
					                                                      OpStore vs_TEXCOORD4 %110 
					                                       f32_4 %112 = OpLoad %45 
					                                       f32_2 %113 = OpVectorShuffle %112 %112 1 1 
					                              Uniform f32_4* %115 = OpAccessChain %22 %114 %25 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
					                                       f32_2 %118 = OpFMul %113 %117 
					                                       f32_4 %119 = OpLoad %9 
					                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 2 3 
					                                                      OpStore %9 %120 
					                              Uniform f32_4* %121 = OpAccessChain %22 %114 %24 
					                                       f32_4 %122 = OpLoad %121 
					                                       f32_2 %123 = OpVectorShuffle %122 %122 0 1 
					                                       f32_4 %124 = OpLoad %45 
					                                       f32_2 %125 = OpVectorShuffle %124 %124 0 0 
					                                       f32_2 %126 = OpFMul %123 %125 
					                                       f32_4 %127 = OpLoad %9 
					                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
					                                       f32_2 %129 = OpFAdd %126 %128 
					                                       f32_4 %130 = OpLoad %9 
					                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 2 3 
					                                                      OpStore %9 %131 
					                              Uniform f32_4* %132 = OpAccessChain %22 %114 %37 
					                                       f32_4 %133 = OpLoad %132 
					                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
					                                       f32_4 %135 = OpLoad %45 
					                                       f32_2 %136 = OpVectorShuffle %135 %135 2 2 
					                                       f32_2 %137 = OpFMul %134 %136 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                                       f32_2 %140 = OpFAdd %137 %139 
					                                       f32_4 %141 = OpLoad %9 
					                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
					                                                      OpStore %9 %142 
					                              Uniform f32_4* %145 = OpAccessChain %22 %114 %47 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
					                                       f32_4 %148 = OpLoad %45 
					                                       f32_2 %149 = OpVectorShuffle %148 %148 3 3 
					                                       f32_2 %150 = OpFMul %147 %149 
					                                       f32_4 %151 = OpLoad %9 
					                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
					                                       f32_2 %153 = OpFAdd %150 %152 
					                                                      OpStore vs_TEXCOORD6 %153 
					                                       f32_4 %156 = OpLoad %155 
					                                       f32_2 %157 = OpVectorShuffle %156 %156 0 1 
					                              Uniform f32_4* %159 = OpAccessChain %22 %158 
					                                       f32_4 %160 = OpLoad %159 
					                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
					                                       f32_2 %162 = OpFMul %157 %161 
					                              Uniform f32_4* %163 = OpAccessChain %22 %158 
					                                       f32_4 %164 = OpLoad %163 
					                                       f32_2 %165 = OpVectorShuffle %164 %164 2 3 
					                                       f32_2 %166 = OpFAdd %162 %165 
					                                                      OpStore vs_TEXCOORD0 %166 
					                                       f32_3 %169 = OpLoad %168 
					                              Uniform f32_4* %170 = OpAccessChain %22 %25 %24 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %169 %172 
					                                Private f32* %174 = OpAccessChain %9 %78 
					                                                      OpStore %174 %173 
					                                       f32_3 %175 = OpLoad %168 
					                              Uniform f32_4* %176 = OpAccessChain %22 %25 %25 
					                                       f32_4 %177 = OpLoad %176 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpDot %175 %178 
					                                Private f32* %180 = OpAccessChain %9 %88 
					                                                      OpStore %180 %179 
					                                       f32_3 %181 = OpLoad %168 
					                              Uniform f32_4* %182 = OpAccessChain %22 %25 %37 
					                                       f32_4 %183 = OpLoad %182 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                         f32 %185 = OpDot %181 %184 
					                                Private f32* %187 = OpAccessChain %9 %186 
					                                                      OpStore %187 %185 
					                                       f32_4 %189 = OpLoad %9 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_4 %191 = OpLoad %9 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
					                                         f32 %193 = OpDot %190 %192 
					                                                      OpStore %188 %193 
					                                         f32 %194 = OpLoad %188 
					                                         f32 %195 = OpExtInst %1 32 %194 
					                                                      OpStore %188 %195 
					                                         f32 %196 = OpLoad %188 
					                                       f32_3 %197 = OpCompositeConstruct %196 %196 %196 
					                                       f32_4 %198 = OpLoad %9 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                       f32_3 %200 = OpFMul %197 %199 
					                                       f32_4 %201 = OpLoad %9 
					                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
					                                                      OpStore %9 %202 
					                                       f32_4 %204 = OpLoad %203 
					                                       f32_3 %205 = OpVectorShuffle %204 %204 1 1 1 
					                              Uniform f32_4* %206 = OpAccessChain %22 %24 %25 
					                                       f32_4 %207 = OpLoad %206 
					                                       f32_3 %208 = OpVectorShuffle %207 %207 1 2 0 
					                                       f32_3 %209 = OpFMul %205 %208 
					                                       f32_4 %210 = OpLoad %45 
					                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
					                                                      OpStore %45 %211 
					                              Uniform f32_4* %212 = OpAccessChain %22 %24 %24 
					                                       f32_4 %213 = OpLoad %212 
					                                       f32_3 %214 = OpVectorShuffle %213 %213 1 2 0 
					                                       f32_4 %215 = OpLoad %203 
					                                       f32_3 %216 = OpVectorShuffle %215 %215 0 0 0 
					                                       f32_3 %217 = OpFMul %214 %216 
					                                       f32_4 %218 = OpLoad %45 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                       f32_3 %220 = OpFAdd %217 %219 
					                                       f32_4 %221 = OpLoad %45 
					                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
					                                                      OpStore %45 %222 
					                              Uniform f32_4* %223 = OpAccessChain %22 %24 %37 
					                                       f32_4 %224 = OpLoad %223 
					                                       f32_3 %225 = OpVectorShuffle %224 %224 1 2 0 
					                                       f32_4 %226 = OpLoad %203 
					                                       f32_3 %227 = OpVectorShuffle %226 %226 2 2 2 
					                                       f32_3 %228 = OpFMul %225 %227 
					                                       f32_4 %229 = OpLoad %45 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
					                                       f32_3 %231 = OpFAdd %228 %230 
					                                       f32_4 %232 = OpLoad %45 
					                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
					                                                      OpStore %45 %233 
					                                       f32_4 %234 = OpLoad %45 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
					                                       f32_4 %236 = OpLoad %45 
					                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
					                                         f32 %238 = OpDot %235 %237 
					                                                      OpStore %188 %238 
					                                         f32 %239 = OpLoad %188 
					                                         f32 %240 = OpExtInst %1 32 %239 
					                                                      OpStore %188 %240 
					                                         f32 %241 = OpLoad %188 
					                                       f32_3 %242 = OpCompositeConstruct %241 %241 %241 
					                                       f32_4 %243 = OpLoad %45 
					                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
					                                       f32_3 %245 = OpFMul %242 %244 
					                                       f32_4 %246 = OpLoad %45 
					                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
					                                                      OpStore %45 %247 
					                                       f32_4 %248 = OpLoad %9 
					                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
					                                       f32_4 %250 = OpLoad %45 
					                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
					                                       f32_3 %252 = OpFMul %249 %251 
					                                       f32_4 %253 = OpLoad %51 
					                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
					                                                      OpStore %51 %254 
					                                       f32_4 %255 = OpLoad %9 
					                                       f32_3 %256 = OpVectorShuffle %255 %255 2 0 1 
					                                       f32_4 %257 = OpLoad %45 
					                                       f32_3 %258 = OpVectorShuffle %257 %257 1 2 0 
					                                       f32_3 %259 = OpFMul %256 %258 
					                                       f32_4 %260 = OpLoad %51 
					                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
					                                       f32_3 %262 = OpFNegate %261 
					                                       f32_3 %263 = OpFAdd %259 %262 
					                                       f32_4 %264 = OpLoad %51 
					                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
					                                                      OpStore %51 %265 
					                                  Input f32* %268 = OpAccessChain %203 %266 
					                                         f32 %269 = OpLoad %268 
					                                Uniform f32* %271 = OpAccessChain %22 %37 %266 
					                                         f32 %272 = OpLoad %271 
					                                         f32 %273 = OpFMul %269 %272 
					                                                      OpStore %188 %273 
					                                         f32 %274 = OpLoad %188 
					                                       f32_3 %275 = OpCompositeConstruct %274 %274 %274 
					                                       f32_4 %276 = OpLoad %51 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
					                                       f32_3 %278 = OpFMul %275 %277 
					                                       f32_4 %279 = OpLoad %51 
					                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
					                                                      OpStore %51 %280 
					                                Private f32* %282 = OpAccessChain %51 %186 
					                                         f32 %283 = OpLoad %282 
					                                 Output f32* %284 = OpAccessChain vs_TEXCOORD1 %78 
					                                                      OpStore %284 %283 
					                                Private f32* %285 = OpAccessChain %45 %88 
					                                         f32 %286 = OpLoad %285 
					                                 Output f32* %287 = OpAccessChain vs_TEXCOORD1 %186 
					                                                      OpStore %287 %286 
					                                Private f32* %288 = OpAccessChain %9 %78 
					                                         f32 %289 = OpLoad %288 
					                                 Output f32* %290 = OpAccessChain vs_TEXCOORD1 %88 
					                                                      OpStore %290 %289 
					                                Private f32* %292 = OpAccessChain %45 %186 
					                                         f32 %293 = OpLoad %292 
					                                 Output f32* %294 = OpAccessChain vs_TEXCOORD2 %186 
					                                                      OpStore %294 %293 
					                                Private f32* %296 = OpAccessChain %45 %78 
					                                         f32 %297 = OpLoad %296 
					                                 Output f32* %298 = OpAccessChain vs_TEXCOORD3 %186 
					                                                      OpStore %298 %297 
					                                Private f32* %299 = OpAccessChain %9 %88 
					                                         f32 %300 = OpLoad %299 
					                                 Output f32* %301 = OpAccessChain vs_TEXCOORD2 %88 
					                                                      OpStore %301 %300 
					                                Private f32* %302 = OpAccessChain %9 %186 
					                                         f32 %303 = OpLoad %302 
					                                 Output f32* %304 = OpAccessChain vs_TEXCOORD3 %88 
					                                                      OpStore %304 %303 
					                                Private f32* %305 = OpAccessChain %51 %78 
					                                         f32 %306 = OpLoad %305 
					                                 Output f32* %307 = OpAccessChain vs_TEXCOORD2 %78 
					                                                      OpStore %307 %306 
					                                Private f32* %308 = OpAccessChain %51 %88 
					                                         f32 %309 = OpLoad %308 
					                                 Output f32* %310 = OpAccessChain vs_TEXCOORD3 %78 
					                                                      OpStore %310 %309 
					                                       f32_4 %313 = OpLoad %312 
					                                                      OpStore %311 %313 
					                                                      OpStore vs_TEXCOORD5 %316 
					                                 Output f32* %317 = OpAccessChain %82 %24 %78 
					                                         f32 %318 = OpLoad %317 
					                                         f32 %319 = OpFNegate %318 
					                                 Output f32* %320 = OpAccessChain %82 %24 %78 
					                                                      OpStore %320 %319 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 426
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %22 %65 %70 %76 %96 %367 %374 %395 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpDecorate %12 DescriptorSet 12 
					                                                      OpDecorate %12 Binding 12 
					                                                      OpDecorate %16 DescriptorSet 16 
					                                                      OpDecorate %16 Binding 16 
					                                                      OpDecorate vs_TEXCOORD0 Location 22 
					                                                      OpDecorate vs_TEXCOORD1 Location 65 
					                                                      OpDecorate vs_TEXCOORD2 Location 70 
					                                                      OpDecorate vs_TEXCOORD3 Location 76 
					                                                      OpDecorate vs_TEXCOORD4 Location 96 
					                                                      OpDecorate %100 ArrayStride 100 
					                                                      OpMemberDecorate %101 0 Offset 101 
					                                                      OpMemberDecorate %101 1 Offset 101 
					                                                      OpMemberDecorate %101 2 Offset 101 
					                                                      OpMemberDecorate %101 3 Offset 101 
					                                                      OpMemberDecorate %101 4 Offset 101 
					                                                      OpMemberDecorate %101 5 Offset 101 
					                                                      OpMemberDecorate %101 6 Offset 101 
					                                                      OpDecorate %101 Block 
					                                                      OpDecorate %103 DescriptorSet 103 
					                                                      OpDecorate %103 Binding 103 
					                                                      OpDecorate %300 DescriptorSet 300 
					                                                      OpDecorate %300 Binding 300 
					                                                      OpDecorate %302 DescriptorSet 302 
					                                                      OpDecorate %302 Binding 302 
					                                                      OpDecorate %352 DescriptorSet 352 
					                                                      OpDecorate %352 Binding 352 
					                                                      OpDecorate %354 DescriptorSet 354 
					                                                      OpDecorate %354 Binding 354 
					                                                      OpDecorate %367 Location 367 
					                                                      OpDecorate %374 Location 374 
					                                                      OpDecorate vs_TEXCOORD7 Location 395 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %11 = OpTypePointer UniformConstant %10 
					         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                              %14 = OpTypeSampler 
					                                              %15 = OpTypePointer UniformConstant %14 
					                     UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                              %18 = OpTypeSampledImage %10 
					                                              %20 = OpTypeVector %6 2 
					                                              %21 = OpTypePointer Input %20 
					                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                              %24 = OpTypeVector %6 4 
					                                              %27 = OpTypeInt 32 0 
					                                          u32 %28 = OpConstant 2 
					                                              %29 = OpTypePointer Private %6 
					                                          u32 %32 = OpConstant 0 
					                                          f32 %39 = OpConstant 3,674022E-40 
					                                        f32_2 %40 = OpConstantComposite %39 %39 
					                                          f32 %42 = OpConstant 3,674022E-40 
					                                        f32_2 %43 = OpConstantComposite %42 %42 
					                                 Private f32* %47 = OpVariable Private 
					                                          f32 %54 = OpConstant 3,674022E-40 
					                                              %62 = OpTypePointer Private %24 
					                               Private f32_4* %63 = OpVariable Private 
					                                              %64 = OpTypePointer Input %7 
					                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                                          u32 %74 = OpConstant 1 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                                          u32 %99 = OpConstant 4 
					                                             %100 = OpTypeArray %24 %99 
					                                             %101 = OpTypeStruct %7 %24 %24 %24 %24 %100 %24 
					                                             %102 = OpTypePointer Uniform %101 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %103 = OpVariable Uniform 
					                                             %104 = OpTypeInt 32 1 
					                                         i32 %105 = OpConstant 0 
					                                             %106 = OpTypePointer Uniform %7 
					                              Private f32_3* %119 = OpVariable Private 
					                                         i32 %130 = OpConstant 2 
					                                             %131 = OpTypePointer Uniform %24 
					                                         f32 %149 = OpConstant 3,674022E-40 
					                                Private f32* %152 = OpVariable Private 
					                                Private f32* %157 = OpVariable Private 
					                                         f32 %164 = OpConstant 3,674022E-40 
					                                         f32 %166 = OpConstant 3,674022E-40 
					                                         f32 %174 = OpConstant 3,674022E-40 
					                                         f32 %191 = OpConstant 3,674022E-40 
					                                         f32 %221 = OpConstant 3,674022E-40 
					                                Private f32* %229 = OpVariable Private 
					                                Private f32* %234 = OpVariable Private 
					                                         i32 %261 = OpConstant 5 
					                                         i32 %262 = OpConstant 1 
					                                         i32 %293 = OpConstant 3 
					        UniformConstant read_only Texture2D* %300 = OpVariable UniformConstant 
					                    UniformConstant sampler* %302 = OpVariable UniformConstant 
					                                         u32 %308 = OpConstant 3 
					                                         i32 %312 = OpConstant 4 
					                                         f32 %344 = OpConstant 3,674022E-40 
					                                         f32 %346 = OpConstant 3,674022E-40 
					        UniformConstant read_only Texture2D* %352 = OpVariable UniformConstant 
					                    UniformConstant sampler* %354 = OpVariable UniformConstant 
					                                         i32 %360 = OpConstant 6 
					                                             %366 = OpTypePointer Input %24 
					                                Input f32_4* %367 = OpVariable Input 
					                                             %373 = OpTypePointer Output %24 
					                               Output f32_4* %374 = OpVariable Output 
					                                             %377 = OpTypePointer Input %6 
					                                             %381 = OpTypePointer Output %6 
					                                       f32_3 %385 = OpConstantComposite %344 %344 %344 
					                          Input f32* vs_TEXCOORD7 = OpVariable Input 
					                                             %397 = OpTypePointer Uniform %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                          read_only Texture2D %13 = OpLoad %12 
					                                      sampler %17 = OpLoad %16 
					                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
					                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 3 
					                                                      OpStore %9 %26 
					                                 Private f32* %30 = OpAccessChain %9 %28 
					                                          f32 %31 = OpLoad %30 
					                                 Private f32* %33 = OpAccessChain %9 %32 
					                                          f32 %34 = OpLoad %33 
					                                          f32 %35 = OpFMul %31 %34 
					                                 Private f32* %36 = OpAccessChain %9 %32 
					                                                      OpStore %36 %35 
					                                        f32_3 %37 = OpLoad %9 
					                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
					                                        f32_2 %41 = OpFMul %38 %40 
					                                        f32_2 %44 = OpFAdd %41 %43 
					                                        f32_3 %45 = OpLoad %9 
					                                        f32_3 %46 = OpVectorShuffle %45 %44 3 4 2 
					                                                      OpStore %9 %46 
					                                        f32_3 %48 = OpLoad %9 
					                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
					                                        f32_3 %50 = OpLoad %9 
					                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
					                                          f32 %52 = OpDot %49 %51 
					                                                      OpStore %47 %52 
					                                          f32 %53 = OpLoad %47 
					                                          f32 %55 = OpExtInst %1 37 %53 %54 
					                                                      OpStore %47 %55 
					                                          f32 %56 = OpLoad %47 
					                                          f32 %57 = OpFNegate %56 
					                                          f32 %58 = OpFAdd %57 %54 
					                                                      OpStore %47 %58 
					                                          f32 %59 = OpLoad %47 
					                                          f32 %60 = OpExtInst %1 31 %59 
					                                 Private f32* %61 = OpAccessChain %9 %28 
					                                                      OpStore %61 %60 
					                                        f32_3 %66 = OpLoad vs_TEXCOORD1 
					                                        f32_3 %67 = OpLoad %9 
					                                          f32 %68 = OpDot %66 %67 
					                                 Private f32* %69 = OpAccessChain %63 %32 
					                                                      OpStore %69 %68 
					                                        f32_3 %71 = OpLoad vs_TEXCOORD2 
					                                        f32_3 %72 = OpLoad %9 
					                                          f32 %73 = OpDot %71 %72 
					                                 Private f32* %75 = OpAccessChain %63 %74 
					                                                      OpStore %75 %73 
					                                        f32_3 %77 = OpLoad vs_TEXCOORD3 
					                                        f32_3 %78 = OpLoad %9 
					                                          f32 %79 = OpDot %77 %78 
					                                 Private f32* %80 = OpAccessChain %63 %28 
					                                                      OpStore %80 %79 
					                                        f32_4 %81 = OpLoad %63 
					                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
					                                        f32_4 %83 = OpLoad %63 
					                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
					                                          f32 %85 = OpDot %82 %84 
					                                 Private f32* %86 = OpAccessChain %9 %32 
					                                                      OpStore %86 %85 
					                                 Private f32* %87 = OpAccessChain %9 %32 
					                                          f32 %88 = OpLoad %87 
					                                          f32 %89 = OpExtInst %1 32 %88 
					                                 Private f32* %90 = OpAccessChain %9 %32 
					                                                      OpStore %90 %89 
					                                        f32_3 %91 = OpLoad %9 
					                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
					                                        f32_4 %93 = OpLoad %63 
					                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
					                                        f32_3 %95 = OpFMul %92 %94 
					                                                      OpStore %9 %95 
					                                        f32_3 %97 = OpLoad vs_TEXCOORD4 
					                                        f32_3 %98 = OpFNegate %97 
					                              Uniform f32_3* %107 = OpAccessChain %103 %105 
					                                       f32_3 %108 = OpLoad %107 
					                                       f32_3 %109 = OpFAdd %98 %108 
					                                       f32_4 %110 = OpLoad %63 
					                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
					                                                      OpStore %63 %111 
					                                       f32_4 %112 = OpLoad %63 
					                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
					                                       f32_4 %114 = OpLoad %63 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                         f32 %116 = OpDot %113 %115 
					                                                      OpStore %47 %116 
					                                         f32 %117 = OpLoad %47 
					                                         f32 %118 = OpExtInst %1 32 %117 
					                                                      OpStore %47 %118 
					                                         f32 %120 = OpLoad %47 
					                                       f32_3 %121 = OpCompositeConstruct %120 %120 %120 
					                                       f32_4 %122 = OpLoad %63 
					                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
					                                       f32_3 %124 = OpFMul %121 %123 
					                                                      OpStore %119 %124 
					                                       f32_4 %125 = OpLoad %63 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
					                                         f32 %127 = OpLoad %47 
					                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
					                                       f32_3 %129 = OpFMul %126 %128 
					                              Uniform f32_4* %132 = OpAccessChain %103 %130 
					                                       f32_4 %133 = OpLoad %132 
					                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
					                                       f32_3 %135 = OpFAdd %129 %134 
					                                       f32_4 %136 = OpLoad %63 
					                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
					                                                      OpStore %63 %137 
					                                       f32_3 %138 = OpLoad %9 
					                                       f32_3 %139 = OpLoad %119 
					                                         f32 %140 = OpDot %138 %139 
					                                                      OpStore %47 %140 
					                                       f32_3 %141 = OpLoad %9 
					                              Uniform f32_4* %142 = OpAccessChain %103 %130 
					                                       f32_4 %143 = OpLoad %142 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
					                                         f32 %145 = OpDot %141 %144 
					                                Private f32* %146 = OpAccessChain %9 %32 
					                                                      OpStore %146 %145 
					                                Private f32* %147 = OpAccessChain %9 %32 
					                                         f32 %148 = OpLoad %147 
					                                         f32 %150 = OpExtInst %1 43 %148 %149 %54 
					                                Private f32* %151 = OpAccessChain %9 %32 
					                                                      OpStore %151 %150 
					                                         f32 %153 = OpLoad %47 
					                                         f32 %154 = OpExtInst %1 4 %153 
					                                         f32 %155 = OpFNegate %154 
					                                         f32 %156 = OpFAdd %155 %54 
					                                                      OpStore %152 %156 
					                                         f32 %158 = OpLoad %47 
					                                         f32 %159 = OpExtInst %1 4 %158 
					                                Private f32* %160 = OpAccessChain %9 %32 
					                                         f32 %161 = OpLoad %160 
					                                         f32 %162 = OpFAdd %159 %161 
					                                                      OpStore %157 %162 
					                                         f32 %163 = OpLoad %157 
					                                         f32 %165 = OpFAdd %163 %164 
					                                                      OpStore %157 %165 
					                                         f32 %167 = OpLoad %157 
					                                         f32 %168 = OpFDiv %166 %167 
					                                                      OpStore %157 %168 
					                                Private f32* %169 = OpAccessChain %9 %32 
					                                         f32 %170 = OpLoad %169 
					                                         f32 %171 = OpLoad %157 
					                                         f32 %172 = OpFMul %170 %171 
					                                                      OpStore %157 %172 
					                                         f32 %173 = OpLoad %157 
					                                         f32 %175 = OpFMul %173 %174 
					                                                      OpStore %157 %175 
					                                         f32 %176 = OpLoad %152 
					                                         f32 %177 = OpLoad %152 
					                                         f32 %178 = OpFMul %176 %177 
					                                                      OpStore %47 %178 
					                                         f32 %179 = OpLoad %47 
					                                         f32 %180 = OpLoad %47 
					                                         f32 %181 = OpFMul %179 %180 
					                                                      OpStore %47 %181 
					                                         f32 %182 = OpLoad %152 
					                                         f32 %183 = OpLoad %47 
					                                         f32 %184 = OpFMul %182 %183 
					                                                      OpStore %152 %184 
					                                       f32_4 %185 = OpLoad %63 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_4 %187 = OpLoad %63 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                         f32 %189 = OpDot %186 %188 
					                                                      OpStore %47 %189 
					                                         f32 %190 = OpLoad %47 
					                                         f32 %192 = OpExtInst %1 40 %190 %191 
					                                                      OpStore %47 %192 
					                                         f32 %193 = OpLoad %47 
					                                         f32 %194 = OpExtInst %1 32 %193 
					                                                      OpStore %47 %194 
					                                         f32 %195 = OpLoad %47 
					                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
					                                       f32_4 %197 = OpLoad %63 
					                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
					                                       f32_3 %199 = OpFMul %196 %198 
					                                       f32_4 %200 = OpLoad %63 
					                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
					                                                      OpStore %63 %201 
					                              Uniform f32_4* %202 = OpAccessChain %103 %130 
					                                       f32_4 %203 = OpLoad %202 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
					                                       f32_4 %205 = OpLoad %63 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
					                                         f32 %207 = OpDot %204 %206 
					                                                      OpStore %47 %207 
					                                         f32 %208 = OpLoad %47 
					                                         f32 %209 = OpExtInst %1 43 %208 %149 %54 
					                                                      OpStore %47 %209 
					                                         f32 %210 = OpLoad %47 
					                                       f32_2 %211 = OpCompositeConstruct %210 %210 
					                                         f32 %212 = OpLoad %47 
					                                       f32_2 %213 = OpCompositeConstruct %212 %212 
					                                         f32 %214 = OpDot %211 %213 
					                                Private f32* %215 = OpAccessChain %63 %32 
					                                                      OpStore %215 %214 
					                                         f32 %216 = OpLoad %47 
					                                         f32 %217 = OpFNegate %216 
					                                         f32 %218 = OpFAdd %217 %54 
					                                                      OpStore %47 %218 
					                                Private f32* %219 = OpAccessChain %63 %32 
					                                         f32 %220 = OpLoad %219 
					                                         f32 %222 = OpFAdd %220 %221 
					                                Private f32* %223 = OpAccessChain %63 %32 
					                                                      OpStore %223 %222 
					                                Private f32* %224 = OpAccessChain %63 %32 
					                                         f32 %225 = OpLoad %224 
					                                         f32 %226 = OpLoad %152 
					                                         f32 %227 = OpFMul %225 %226 
					                                         f32 %228 = OpFAdd %227 %54 
					                                                      OpStore %152 %228 
					                                Private f32* %230 = OpAccessChain %9 %32 
					                                         f32 %231 = OpLoad %230 
					                                         f32 %232 = OpFNegate %231 
					                                         f32 %233 = OpFAdd %232 %54 
					                                                      OpStore %229 %233 
					                                         f32 %235 = OpLoad %229 
					                                         f32 %236 = OpLoad %229 
					                                         f32 %237 = OpFMul %235 %236 
					                                                      OpStore %234 %237 
					                                         f32 %238 = OpLoad %234 
					                                         f32 %239 = OpLoad %234 
					                                         f32 %240 = OpFMul %238 %239 
					                                                      OpStore %234 %240 
					                                         f32 %241 = OpLoad %229 
					                                         f32 %242 = OpLoad %234 
					                                         f32 %243 = OpFMul %241 %242 
					                                                      OpStore %229 %243 
					                                Private f32* %244 = OpAccessChain %63 %32 
					                                         f32 %245 = OpLoad %244 
					                                         f32 %246 = OpLoad %229 
					                                         f32 %247 = OpFMul %245 %246 
					                                         f32 %248 = OpFAdd %247 %54 
					                                Private f32* %249 = OpAccessChain %63 %32 
					                                                      OpStore %249 %248 
					                                         f32 %250 = OpLoad %152 
					                                Private f32* %251 = OpAccessChain %63 %32 
					                                         f32 %252 = OpLoad %251 
					                                         f32 %253 = OpFMul %250 %252 
					                                                      OpStore %152 %253 
					                                Private f32* %254 = OpAccessChain %9 %32 
					                                         f32 %255 = OpLoad %254 
					                                         f32 %256 = OpLoad %152 
					                                         f32 %257 = OpFMul %255 %256 
					                                Private f32* %258 = OpAccessChain %9 %32 
					                                                      OpStore %258 %257 
					                                       f32_3 %259 = OpLoad vs_TEXCOORD4 
					                                       f32_2 %260 = OpVectorShuffle %259 %259 1 1 
					                              Uniform f32_4* %263 = OpAccessChain %103 %261 %262 
					                                       f32_4 %264 = OpLoad %263 
					                                       f32_2 %265 = OpVectorShuffle %264 %264 0 1 
					                                       f32_2 %266 = OpFMul %260 %265 
					                                       f32_4 %267 = OpLoad %63 
					                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 2 3 
					                                                      OpStore %63 %268 
					                              Uniform f32_4* %269 = OpAccessChain %103 %261 %105 
					                                       f32_4 %270 = OpLoad %269 
					                                       f32_2 %271 = OpVectorShuffle %270 %270 0 1 
					                                       f32_3 %272 = OpLoad vs_TEXCOORD4 
					                                       f32_2 %273 = OpVectorShuffle %272 %272 0 0 
					                                       f32_2 %274 = OpFMul %271 %273 
					                                       f32_4 %275 = OpLoad %63 
					                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
					                                       f32_2 %277 = OpFAdd %274 %276 
					                                       f32_4 %278 = OpLoad %63 
					                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 2 3 
					                                                      OpStore %63 %279 
					                              Uniform f32_4* %280 = OpAccessChain %103 %261 %130 
					                                       f32_4 %281 = OpLoad %280 
					                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
					                                       f32_3 %283 = OpLoad vs_TEXCOORD4 
					                                       f32_2 %284 = OpVectorShuffle %283 %283 2 2 
					                                       f32_2 %285 = OpFMul %282 %284 
					                                       f32_4 %286 = OpLoad %63 
					                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
					                                       f32_2 %288 = OpFAdd %285 %287 
					                                       f32_4 %289 = OpLoad %63 
					                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
					                                                      OpStore %63 %290 
					                                       f32_4 %291 = OpLoad %63 
					                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
					                              Uniform f32_4* %294 = OpAccessChain %103 %261 %293 
					                                       f32_4 %295 = OpLoad %294 
					                                       f32_2 %296 = OpVectorShuffle %295 %295 0 1 
					                                       f32_2 %297 = OpFAdd %292 %296 
					                                       f32_4 %298 = OpLoad %63 
					                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 2 3 
					                                                      OpStore %63 %299 
					                         read_only Texture2D %301 = OpLoad %300 
					                                     sampler %303 = OpLoad %302 
					                  read_only Texture2DSampled %304 = OpSampledImage %301 %303 
					                                       f32_4 %305 = OpLoad %63 
					                                       f32_2 %306 = OpVectorShuffle %305 %305 0 1 
					                                       f32_4 %307 = OpImageSampleImplicitLod %304 %306 
					                                         f32 %309 = OpCompositeExtract %307 3 
					                                                      OpStore %152 %309 
					                                         f32 %310 = OpLoad %152 
					                                       f32_3 %311 = OpCompositeConstruct %310 %310 %310 
					                              Uniform f32_4* %313 = OpAccessChain %103 %312 
					                                       f32_4 %314 = OpLoad %313 
					                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
					                                       f32_3 %316 = OpFMul %311 %315 
					                                       f32_4 %317 = OpLoad %63 
					                                       f32_4 %318 = OpVectorShuffle %317 %316 4 5 6 3 
					                                                      OpStore %63 %318 
					                                       f32_3 %319 = OpLoad %9 
					                                       f32_3 %320 = OpVectorShuffle %319 %319 0 0 0 
					                                       f32_4 %321 = OpLoad %63 
					                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
					                                       f32_3 %323 = OpFMul %320 %322 
					                                                      OpStore %119 %323 
					                                         f32 %324 = OpLoad %157 
					                                       f32_3 %325 = OpCompositeConstruct %324 %324 %324 
					                                       f32_4 %326 = OpLoad %63 
					                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
					                                       f32_3 %328 = OpFMul %325 %327 
					                                                      OpStore %9 %328 
					                                         f32 %329 = OpLoad %47 
					                                         f32 %330 = OpLoad %47 
					                                         f32 %331 = OpFMul %329 %330 
					                                Private f32* %332 = OpAccessChain %63 %32 
					                                                      OpStore %332 %331 
					                                Private f32* %333 = OpAccessChain %63 %32 
					                                         f32 %334 = OpLoad %333 
					                                Private f32* %335 = OpAccessChain %63 %32 
					                                         f32 %336 = OpLoad %335 
					                                         f32 %337 = OpFMul %334 %336 
					                                Private f32* %338 = OpAccessChain %63 %32 
					                                                      OpStore %338 %337 
					                                         f32 %339 = OpLoad %47 
					                                Private f32* %340 = OpAccessChain %63 %32 
					                                         f32 %341 = OpLoad %340 
					                                         f32 %342 = OpFMul %339 %341 
					                                                      OpStore %47 %342 
					                                         f32 %343 = OpLoad %47 
					                                         f32 %345 = OpFMul %343 %344 
					                                         f32 %347 = OpFAdd %345 %346 
					                                                      OpStore %47 %347 
					                                         f32 %348 = OpLoad %47 
					                                       f32_3 %349 = OpCompositeConstruct %348 %348 %348 
					                                       f32_3 %350 = OpLoad %9 
					                                       f32_3 %351 = OpFMul %349 %350 
					                                                      OpStore %9 %351 
					                         read_only Texture2D %353 = OpLoad %352 
					                                     sampler %355 = OpLoad %354 
					                  read_only Texture2DSampled %356 = OpSampledImage %353 %355 
					                                       f32_2 %357 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %358 = OpImageSampleImplicitLod %356 %357 
					                                                      OpStore %63 %358 
					                                       f32_4 %359 = OpLoad %63 
					                              Uniform f32_4* %361 = OpAccessChain %103 %360 
					                                       f32_4 %362 = OpLoad %361 
					                                       f32_4 %363 = OpFMul %359 %362 
					                                                      OpStore %63 %363 
					                                       f32_4 %364 = OpLoad %63 
					                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
					                                       f32_4 %368 = OpLoad %367 
					                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                                       f32_3 %370 = OpFMul %365 %369 
					                                       f32_4 %371 = OpLoad %63 
					                                       f32_4 %372 = OpVectorShuffle %371 %370 4 5 6 3 
					                                                      OpStore %63 %372 
					                                Private f32* %375 = OpAccessChain %63 %308 
					                                         f32 %376 = OpLoad %375 
					                                  Input f32* %378 = OpAccessChain %367 %308 
					                                         f32 %379 = OpLoad %378 
					                                         f32 %380 = OpFMul %376 %379 
					                                 Output f32* %382 = OpAccessChain %374 %308 
					                                                      OpStore %382 %380 
					                                       f32_4 %383 = OpLoad %63 
					                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
					                                       f32_3 %386 = OpFMul %384 %385 
					                                       f32_4 %387 = OpLoad %63 
					                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 6 3 
					                                                      OpStore %63 %388 
					                                       f32_4 %389 = OpLoad %63 
					                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
					                                       f32_3 %391 = OpLoad %119 
					                                       f32_3 %392 = OpFMul %390 %391 
					                                       f32_3 %393 = OpLoad %9 
					                                       f32_3 %394 = OpFAdd %392 %393 
					                                                      OpStore %9 %394 
					                                         f32 %396 = OpLoad vs_TEXCOORD7 
					                                Uniform f32* %398 = OpAccessChain %103 %262 %74 
					                                         f32 %399 = OpLoad %398 
					                                         f32 %400 = OpFDiv %396 %399 
					                                                      OpStore %47 %400 
					                                         f32 %401 = OpLoad %47 
					                                         f32 %402 = OpFNegate %401 
					                                         f32 %403 = OpFAdd %402 %54 
					                                                      OpStore %47 %403 
					                                         f32 %404 = OpLoad %47 
					                                Uniform f32* %405 = OpAccessChain %103 %262 %28 
					                                         f32 %406 = OpLoad %405 
					                                         f32 %407 = OpFMul %404 %406 
					                                                      OpStore %47 %407 
					                                         f32 %408 = OpLoad %47 
					                                         f32 %409 = OpExtInst %1 40 %408 %149 
					                                                      OpStore %47 %409 
					                                         f32 %410 = OpLoad %47 
					                                Uniform f32* %411 = OpAccessChain %103 %293 %28 
					                                         f32 %412 = OpLoad %411 
					                                         f32 %413 = OpFMul %410 %412 
					                                Uniform f32* %414 = OpAccessChain %103 %293 %308 
					                                         f32 %415 = OpLoad %414 
					                                         f32 %416 = OpFAdd %413 %415 
					                                                      OpStore %47 %416 
					                                         f32 %417 = OpLoad %47 
					                                         f32 %418 = OpExtInst %1 43 %417 %149 %54 
					                                                      OpStore %47 %418 
					                                       f32_3 %419 = OpLoad %9 
					                                         f32 %420 = OpLoad %47 
					                                       f32_3 %421 = OpCompositeConstruct %420 %420 %420 
					                                       f32_3 %422 = OpFMul %419 %421 
					                                       f32_4 %423 = OpLoad %374 
					                                       f32_4 %424 = OpVectorShuffle %423 %422 4 5 6 3 
					                                                      OpStore %374 %424 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat10 = -abs(u_xlat9) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat11) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = max(u_xlat11, 0.00100000005);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat6 = (-u_xlat1.x) + 1.0;
					    u_xlat3 = u_xlat3 + -0.5;
					    u_xlat1.x = u_xlat3 * u_xlat10 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat3 = u_xlat3 * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat1.x * u_xlat3;
					    u_xlat3 = u_xlat0.x * u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat3 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat3 = u_xlat3 + 9.99999975e-06;
					    u_xlat3 = 0.5 / u_xlat3;
					    u_xlat3 = u_xlat3 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "POINT" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "POINT" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = -abs(u_xlat9) + 1.0;
					    u_xlat6 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat6 = u_xlat6 + 9.99999975e-06;
					    u_xlat6 = 0.5 / u_xlat6;
					    u_xlat6 = u_xlat6 * 0.999999881;
					    u_xlat6 = u_xlat0.x * u_xlat6;
					    u_xlat2.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat6 = u_xlat3 * u_xlat3;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat3 = u_xlat3 * u_xlat6;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat9 = dot(vec2(u_xlat6), vec2(u_xlat6));
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat3 = u_xlat9 * u_xlat3 + 1.0;
					    u_xlat1.x = (-u_xlat0.x) + 1.0;
					    u_xlat4 = u_xlat1.x * u_xlat1.x;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * u_xlat4;
					    u_xlat9 = u_xlat9 * u_xlat1.x + 1.0;
					    u_xlat3 = u_xlat3 * u_xlat9;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat2 * _Color;
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat2.w * vs_COLOR0.w;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyw + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					float u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat0.z = sqrt(u_xlat12);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat13 = -abs(u_xlat12) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat13 = u_xlat13 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat14) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = max(u_xlat14, 0.00100000005);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat14);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat8 = (-u_xlat1.x) + 1.0;
					    u_xlat4 = u_xlat4 + -0.5;
					    u_xlat1.x = u_xlat4 * u_xlat13 + 1.0;
					    u_xlat5 = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat4 = u_xlat4 * u_xlat5 + 1.0;
					    u_xlat4 = u_xlat1.x * u_xlat4;
					    u_xlat4 = u_xlat0.x * u_xlat4;
					    u_xlat1 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat4) * u_xlat1.xyz;
					    u_xlat4 = abs(u_xlat12) + u_xlat0.x;
					    u_xlat4 = u_xlat4 + 9.99999975e-06;
					    u_xlat4 = 0.5 / u_xlat4;
					    u_xlat4 = u_xlat4 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat8 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = u_xlat8 * u_xlat1.x;
					    u_xlat8 = u_xlat8 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "SPOT" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "SPOT" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat10 = -abs(u_xlat9) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat11) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = max(u_xlat11, 0.00100000005);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat6 = (-u_xlat1.x) + 1.0;
					    u_xlat3 = u_xlat3 + -0.5;
					    u_xlat1.x = u_xlat3 * u_xlat10 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat3 = u_xlat3 * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat1.x * u_xlat3;
					    u_xlat3 = u_xlat0.x * u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat3 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat3 = u_xlat3 + 9.99999975e-06;
					    u_xlat3 = 0.5 / u_xlat3;
					    u_xlat3 = u_xlat3 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "POINT_COOKIE" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "POINT_COOKIE" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = -abs(u_xlat9) + 1.0;
					    u_xlat6 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat6 = u_xlat6 + 9.99999975e-06;
					    u_xlat6 = 0.5 / u_xlat6;
					    u_xlat6 = u_xlat6 * 0.999999881;
					    u_xlat6 = u_xlat0.x * u_xlat6;
					    u_xlat9 = u_xlat3 * u_xlat3;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat3 = u_xlat3 * u_xlat9;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1.x = dot(vec2(u_xlat9), vec2(u_xlat9));
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat3 = u_xlat1.x * u_xlat3 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat3 * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat1.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9 = u_xlat9 * u_xlat1.x;
					    u_xlat9 = u_xlat9 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat10 = -abs(u_xlat9) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat11) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = max(u_xlat11, 0.00100000005);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat6 = (-u_xlat1.x) + 1.0;
					    u_xlat3 = u_xlat3 + -0.5;
					    u_xlat1.x = u_xlat3 * u_xlat10 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat3 = u_xlat3 * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat1.x * u_xlat3;
					    u_xlat3 = u_xlat0.x * u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat3 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat3 = u_xlat3 + 9.99999975e-06;
					    u_xlat3 = 0.5 / u_xlat3;
					    u_xlat3 = u_xlat3 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = u_xlat9 * _ProjectionParams.z;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = u_xlat9 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "FOG_LINEAR" "POINT" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = -abs(u_xlat9) + 1.0;
					    u_xlat6 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat6 = u_xlat6 + 9.99999975e-06;
					    u_xlat6 = 0.5 / u_xlat6;
					    u_xlat6 = u_xlat6 * 0.999999881;
					    u_xlat6 = u_xlat0.x * u_xlat6;
					    u_xlat2.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat6 = u_xlat3 * u_xlat3;
					    u_xlat6 = u_xlat6 * u_xlat6;
					    u_xlat3 = u_xlat3 * u_xlat6;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat9 = dot(vec2(u_xlat6), vec2(u_xlat6));
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat3 = u_xlat9 * u_xlat3 + 1.0;
					    u_xlat1.x = (-u_xlat0.x) + 1.0;
					    u_xlat4 = u_xlat1.x * u_xlat1.x;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * u_xlat4;
					    u_xlat9 = u_xlat9 * u_xlat1.x + 1.0;
					    u_xlat3 = u_xlat3 * u_xlat9;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat2.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat2 * _Color;
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat2.w * vs_COLOR0.w;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyw + u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = u_xlat9 * _ProjectionParams.z;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = u_xlat9 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					float u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat0.z = sqrt(u_xlat12);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat13 = -abs(u_xlat12) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat13 = u_xlat13 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat14) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = max(u_xlat14, 0.00100000005);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat14);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat8 = (-u_xlat1.x) + 1.0;
					    u_xlat4 = u_xlat4 + -0.5;
					    u_xlat1.x = u_xlat4 * u_xlat13 + 1.0;
					    u_xlat5 = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat4 = u_xlat4 * u_xlat5 + 1.0;
					    u_xlat4 = u_xlat1.x * u_xlat4;
					    u_xlat4 = u_xlat0.x * u_xlat4;
					    u_xlat1 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat4) * u_xlat1.xyz;
					    u_xlat4 = abs(u_xlat12) + u_xlat0.x;
					    u_xlat4 = u_xlat4 + 9.99999975e-06;
					    u_xlat4 = 0.5 / u_xlat4;
					    u_xlat4 = u_xlat4 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat8 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = u_xlat8 * u_xlat1.x;
					    u_xlat8 = u_xlat8 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat10 = -abs(u_xlat9) + 1.0;
					    u_xlat2.x = u_xlat10 * u_xlat10;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10 = u_xlat10 * u_xlat2.x;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat11) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat11 = max(u_xlat11, 0.00100000005);
					    u_xlat11 = inversesqrt(u_xlat11);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat1.xx, u_xlat1.xx);
					    u_xlat6 = (-u_xlat1.x) + 1.0;
					    u_xlat3 = u_xlat3 + -0.5;
					    u_xlat1.x = u_xlat3 * u_xlat10 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat3 = u_xlat3 * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat1.x * u_xlat3;
					    u_xlat3 = u_xlat0.x * u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat3 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat3 = u_xlat3 + 9.99999975e-06;
					    u_xlat3 = 0.5 / u_xlat3;
					    u_xlat3 = u_xlat3 * 0.999999881;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat1.x = u_xlat6 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyw;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = u_xlat9 * _ProjectionParams.z;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = u_xlat9 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"spirv"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 unused_0_5;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Normal;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_Normal, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat0.z = sqrt(u_xlat9);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat3 = -abs(u_xlat9) + 1.0;
					    u_xlat6 = abs(u_xlat9) + u_xlat0.x;
					    u_xlat6 = u_xlat6 + 9.99999975e-06;
					    u_xlat6 = 0.5 / u_xlat6;
					    u_xlat6 = u_xlat6 * 0.999999881;
					    u_xlat6 = u_xlat0.x * u_xlat6;
					    u_xlat9 = u_xlat3 * u_xlat3;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat3 = u_xlat3 * u_xlat9;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1.x = dot(vec2(u_xlat9), vec2(u_xlat9));
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat3 = u_xlat1.x * u_xlat3 + 1.0;
					    u_xlat4 = (-u_xlat0.x) + 1.0;
					    u_xlat7 = u_xlat4 * u_xlat4;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat4 = u_xlat4 * u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + 1.0;
					    u_xlat3 = u_xlat3 * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat3;
					    u_xlat1.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat9 * u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9 = u_xlat9 * u_xlat1.x;
					    u_xlat9 = u_xlat9 * 0.959999979 + 0.0399999991;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 * _Color;
					    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = u_xlat1.w * vs_COLOR0.w;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = u_xlat9 * _ProjectionParams.z;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = u_xlat9 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"spirv"
				}
			}
		}
	}
	Fallback "Diffuse"
}